/*===========================================================================================================================================
    This is the DoomWare boss fight. A lot of the code is copy pasted from the DOOMWARE lump, which will require splitting the lump into
	multiple libraries (so I can selectively not include certain scripts)... For now, I'm a bit lazy, so I'll leave the gamemode code in
	its entirety here. This'll be cleaned up in a later version, hopefully.
===========================================================================================================================================*/

#include "zcommon.acs"


/*===================================================================================================
                                           Definitions
===================================================================================================*/

// Don't Touch
#define SECOND 35   // Doom's internal tickrate
#define SAFETY ""   // To prevent "BEGINNERS LUCK" from being the default text due to it being the first #define'd string


// Game selection

#define NUMBEROFGAMES 13 // Number Of minigames in the boss fight


// Game settings

#define MAXPLAYERS 16    // All minigames were designed with 16 players in mind! Change if you know what you're doing!


// Game Status

#define STATUS_NOTSTARTED 0 // Waiting for buu342
#define STATUS_STARTING   1 // Game Initializing
#define STATUS_WAITING    2 // Waiting between minigames
#define STATUS_PHASE1     3 // Fight phase 1
#define STATUS_PHASE1OVER 4 // Fight phase 1 over
#define STATUS_PHASE2     5 // Fight phase 2
#define STATUS_PHASE2OVER 6 // Fight phase 2
#define STATUS_PHASE3     7 // Fight phase 2
#define STATUS_MINIGAME   8 // Minigame
#define STATUS_GAMEOVER   9 // The game has ended


// Message ID's

#define MELEMENTS       48  // Number of reserved slots for menu elements

#define MSGID_CONSOLE   -1                      // Console only messages
#define MSGID_HSPLAYR   1                       // Highscore background
#define MSGID_HSBACK    2+MAXPLAYERS            // Highscore table player name (occupies MAXPLAYERS numbers)
#define MSGID_CURSOR    3+MAXPLAYERS            // Menu Cursor
#define MSGID_MELEM     4+MAXPLAYERS            // Menu element (occopies 64 slots)
#define MSGID_MENU      5+MAXPLAYERS+MELEMENTS  // Menu background
#define MSGID_CENTER    6+MAXPLAYERS+MELEMENTS  // Centered messages (eg You Win!)
#define MSGID_CENTER2   7+MAXPLAYERS+MELEMENTS  // Centered messages below above (eg speedup hints)
#define MSGID_SCORE     8+MAXPLAYERS+MELEMENTS  // HUD Score background
#define MSGID_ROUND     9+MAXPLAYERS+MELEMENTS  // HUD Round background
#define MSGID_ROUND2    10+MAXPLAYERS+MELEMENTS // HUD Round counter
#define MSGID_LEADER    11+MAXPLAYERS+MELEMENTS // HUD Leader background
#define MSGID_SPREAD    12+MAXPLAYERS+MELEMENTS // HUD Spread
#define MSGID_LEADER2   13+MAXPLAYERS+MELEMENTS // HUD Leader name
#define MSGID_SCORE2    14+MAXPLAYERS+MELEMENTS // HUD score counter
#define MSGID_SCORE3    15+MAXPLAYERS+MELEMENTS // HUD score text
#define MSGID_ROUND3    16+MAXPLAYERS+MELEMENTS // HUD Round text
#define MSGID_VIEWHS    17+MAXPLAYERS+MELEMENTS // HUD Highscore reminder
#define MSGID_STFACE    18+MAXPLAYERS+MELEMENTS // STATUSBAR Face
#define MSGID_STBAR     19+MAXPLAYERS+MELEMENTS // STATUSBAR Extra
#define MSGID_TIMER     20+MAXPLAYERS+MELEMENTS // Timer on the HUD
#define MSGID_TIMER2    21+MAXPLAYERS+MELEMENTS // Timer on the HUD background
#define MSGID_CENTER3   22+MAXPLAYERS+MELEMENTS // Centered messages below CENTER2
#define MSGID_OBSERVE   23+MAXPLAYERS+MELEMENTS // Press # to observe this minigame
#define MSGID_MENUBIND  24+MAXPLAYERS+MELEMENTS // Press # to open the menu
#define MSGID_VIEWSP    25+MAXPLAYERS+MELEMENTS // View sprite
#define MSGID_ACHIEVEM  26+MAXPLAYERS+MELEMENTS // Achievement notifications
#define MSGID_WARNING   27+MAXPLAYERS+MELEMENTS // Warnings


// Special TID's

#define TID_PLAYER    1337  // TID given to players (Occupies MAXPLAYERS amount of TID's)
#define TID_HATGAME   3337  // TID given to leader/winner hat (Occupies 2 TID's)
#define TID_EXTRA     4337  // TID given to extra objects during minigames (Occupies MAXPLAYERS amount of TID's)
#define TID_HATROLE   5337  // TID given to players with roles (Occupies MAXPLAYERS amount of TID's)
#define TID_AVOID     6337  // TID given to the AVOID object
#define TID_REMOVE    7337  // TID given to objects to be removed after a minigame ended
#define TID_BUU342    8337  // TID given to objects to buu342
#define TID_BUU3422   32    // TID given to objects to buu342 (phase 2)


// Game Over Reasons

#define OVER_NONE       -1  // Game is not over
#define OVER_WINNER     0   // Because someone won
#define OVER_FORCED     1   // Because it was forced to end
#define OVER_LOST       2   // Everyone died


// Player Roles

#define ROLE_UNLOGGED   -1  // Player is not logged in
#define ROLE_NONE       0   // No role
#define ROLE_REGULAR    1   // Someone who played this game wayyyyy too much
#define ROLE_BETA       2   // Someone special <3
#define ROLE_BUU342     3   // The god himself
#define ROLE_ACHIEVER   4   // Someone who has unlocked all the achievements


// Music Durations (only change if you changed the sounds)

#define MUSICDUR_WAIT1 (SECOND*4)
#define MUSICDUR_WAIT2 (SECOND*3 + 25)
#define MUSICDUR_WAIT3 (SECOND*3 + 10)
#define MUSICDUR_WAIT4 (SECOND*2 + 30)
#define MUSICDUR_WAIT5 (SECOND*2 + 20)

#define MUSICDUR_SPEEDUP1 (SECOND*7 + 10)
#define MUSICDUR_SPEEDUP2 (SECOND*6 + 25)
#define MUSICDUR_SPEEDUP3 (SECOND*6)
#define MUSICDUR_SPEEDUP4 (SECOND*5 + 15)

#define MUSICDUR_WINLOSE (SECOND + 32)

#define MUSICDUR_GAMEOVER (SECOND*7)
#define MUSICDUR_TIEBREAK (SECOND*4 + 9)


// Achievements

#define ACHIEVE_ID_1WIN        0
#define ACHIEVE_ID_10WIN       1
#define ACHIEVE_ID_50WIN       2
#define ACHIEVE_ID_25POINTS    3
#define ACHIEVE_ID_1v1WIN      4
#define ACHIEVE_ID_MVMWIN      5
#define ACHIEVE_ID_501UPS      6
#define ACHIEVE_ID_100DEATH    7
#define ACHIEVE_ID_300POINTS   8
#define ACHIEVE_ID_JUMP        9
#define ACHIEVE_ID_LONGJUMP    10
#define ACHIEVE_ID_3FRAGS      11
#define ACHIEVE_ID_BULLETHELL  12
#define ACHIEVE_ID_KARTWIN     13
#define ACHIEVE_ID_ATST        14
#define ACHIEVE_ID_WAIFU       15
#define ACHIEVE_ID_BOSS        16
#define ACHIEVE_ID_FULLSERVER  17

#define ACHIEVE_NAME_1WIN        "Beginners Luck"
#define ACHIEVE_NAME_10WIN       "Just getting warmed up!"
#define ACHIEVE_NAME_50WIN       "Bingo Bango Bongo Bish Bash Bosh"
#define ACHIEVE_NAME_25POINTS    "Hoarder"
#define ACHIEVE_NAME_1v1WIN      "Fastest Gun in the West"
#define ACHIEVE_NAME_MVMWIN      "Darwinism"
#define ACHIEVE_NAME_501UPS      "Poor Kids in Africa Could Have Eaten Those"
#define ACHIEVE_NAME_100DEATH    "The Final Frontier"
#define ACHIEVE_NAME_300POINTS   "DoomWare veteran"
#define ACHIEVE_NAME_JUMP        "Future Legend of Rhythm Alien"
#define ACHIEVE_NAME_LONGJUMP    "Mike Powell"
#define ACHIEVE_NAME_3FRAGS      "Point Man"
#define ACHIEVE_NAME_BULLETHELL  "Mushihimesama"
#define ACHIEVE_NAME_KARTWIN     "Tokyo Drifter"
#define ACHIEVE_NAME_ATST        "Dash Rendar"
#define ACHIEVE_NAME_WAIFU       "The Perfect Waifu"
#define ACHIEVE_NAME_BOSS        "Deicide"
#define ACHIEVE_NAME_FULLSERVER  "House party"

#define ACHIEVE_DESC_1WIN        "Win a single game"
#define ACHIEVE_DESC_10WIN       "Win 10 games"
#define ACHIEVE_DESC_50WIN       "Win 50 games"
#define ACHIEVE_DESC_25POINTS    "Finish a game with 25 points or more"
#define ACHIEVE_DESC_1v1WIN      "Win a 1v1 tiebreaker match"
#define ACHIEVE_DESC_MVMWIN      "Be the sole survivor of a non-1v1 tiebreaker match"
#define ACHIEVE_DESC_501UPS      "Collect 50 1-ups"
#define ACHIEVE_DESC_100DEATH    "Die 100 times"
#define ACHIEVE_DESC_300POINTS   "Earn a total of 300 points"
#define ACHIEVE_DESC_JUMP        "Beat the Jumping Scroller minigame (without flying)"
#define ACHIEVE_DESC_LONGJUMP    "Get the 1-Up in the sonic minigame (without flying)"
#define ACHIEVE_DESC_3FRAGS      "Frag 3 players in a deathmatch minigame"
#define ACHIEVE_DESC_BULLETHELL  "Survive the bullet hell minigame (without flying)"
#define ACHIEVE_DESC_KARTWIN     "Finish first in a kart race"
#define ACHIEVE_DESC_ATST        "Destroy an AT-ST"
#define ACHIEVE_DESC_WAIFU       "Sucessfully match a fully scrambled Imp"
#define ACHIEVE_DESC_BOSS        "Defeated the final boss"
#define ACHIEVE_DESC_FULLSERVER  "Play on a full server"


// Miscellaneous

#define NUMOBSERVERS    8   // Size of the observers array. Increase if you need more.
#define TIMER_OFF       -1  // Not using the timer
#define TIMER_EARLY     -2  // Timer ended early

#define MAPSKIN_NONE      0
#define MAPSKIN_HALLOWEEN 1
#define MAPSKIN_CHRISTMAS 2

#define CHATSOUND_NONE 0
#define CHATSOUND_MSG  1
#define CHATSOUND_CON  2

#define BUU342NAME "\cqB\csu\cdu\cq3\cs4\cd2\c-"


// Menu Text

#define WELCOME "\
Welcome to DoomWare, a fast paced competitive minigame wad. Every few seconds you are\n\
thrown into a new minigame with variying different goals. The longer you play, the\n\
faster and harder the game gets...\n\n\
Before you get started, make sure you have mouselook and jump bound, as you're going\n\
to need them. Also, make sure you have DoomWare specific binds setup as well (you\n\
should see them at the bottom of 'Options->Customize Controls' in your ESC menu). You\n\
can alternatively bind them manually via '+dwscores' (highscore), '+dwobserve'\n\
(observation) and '+dwmenu' (this menu).\n\n\
You can navigate this menu either using your movement keys or mouse, and you can select\n\
buttons via your USE or ATTACK key. You can close this menu via your menu button.\n\n\
If you are having trouble reading this or any other text due to a large resolution, you\n\
can force HUD scaling in the options tab of this menu, or via the console command\n\
doomware_hudscale.\n\n\
Good luck, and have fun!\
"

// Login Menu Text

#define LOGIN "You are not logged in.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
You must have an account at www.auth.zandronum.com, and then login by opening the\n\
console and typing in 'login username password'. If you do not login, your stats and\n\
achievemnts will not be tracked.\
"


// Game changelog

#define CHANGES "\
Version 666\n\
What's new?\n\n\
+ You are going to die\n\
"


/*===================================================================================================
                                        Global Variables
===================================================================================================*/

bool player_viewingscore[MAXPLAYERS];   // List of players looking at the highscore
bool player_viewingmenu[MAXPLAYERS];    // List of players looking at their menu
bool player_musicwaiting[MAXPLAYERS];   // List of whether players are hearing the waiting/speedup music
bool player_musicwinlose[MAXPLAYERS];   // List of whether players are hearing the win/lose music
bool player_musicgameover[MAXPLAYERS];  // List of whether players are hearing the game over music
int  player_observe[MAXPLAYERS];        // List of what players are observing
bool player_frozen[MAXPLAYERS];         // List of what players have APROP_TOTALLYFROZEN
str  player_achievement[MAXPLAYERS];    // Notification of achievements
int  player_position[MAXPLAYERS][3];    // List player's XYZ pos before a minigame starts
int  player_teleporter[MAXPLAYERS];     // Array to keep track of randomized player spawns
int  player_frags[MAXPLAYERS];          // List player's frags
int  player_viewsprite[MAXPLAYERS];     // List of player's view sprite (like in the clean your weapon minigame)
int  player_answer1[MAXPLAYERS];        // Variables for minigame stuff (like keeping track of laps in Kart races)
int  player_answer2[MAXPLAYERS][4];     // Variables for minigame stuff (like keeping track of cacodemon answers)

int  game_roundnum;                 // A number containing the current round.
int  game_status;                   // A number containing the status of the gamemode's logic.
int  game_over;                     // The reason the game ended
bool game_solo;                     // Is someone playing alone?
int  game_alive;                    // How many people are alive
int  game_phase2health;             // The last phase 2 fight health check
int  game_skin;                     // Map skin
bool game_lastplayerdied;			// Is the last player dead? (Workaround for Zandronum 3.1 bug)

bool round_winifmid;                // Allow a player to win if he is in the midround array (like in games where you don't do anything to win)
bool round_winifsuicide;            // Pass the player if he killed himself
int  round_noforceend;              // Prevent the game from ending prematurely (unless everyone lost). Useful so people can collect 1ups.
int  round_tiebreaker;              // Which tiebreaker round are we playing
int  round_observers[NUMOBSERVERS]; // An array containing all the possible observer TID's
int  round_current[NUMBEROFGAMES];  // The currently playing round
int  round_nextgame;                // The next mid-phase minigame

int  minigame_wincondition1;            // A generic global variable for minigames
int  minigame_wincondition2;            // A generic global variable for minigames
int  minigame_wincondition3;            // A generic global variable for minigames
int  minigame_timer;                    // A timer that is displayed during the minigame
bool minigame_canobserve;               // Can this minigame be observed?
bool minigame_fragpoints;               // Can you get points for frags?
bool minigame_duringphase;				// Whether a minigame can be played during phase 3
str  minigame_instruction1[MAXPLAYERS]; // Center text during minigame

int data_points[MAXPLAYERS];    // List of points each player has received in total
int data_wins[MAXPLAYERS];      // List of wins each player has achieved in total
int data_deaths[MAXPLAYERS];    // List of deaths each player suffered in total
int data_1ups[MAXPLAYERS];      // List of 1Ups each player got in total
int data_role[MAXPLAYERS];      // List of each player's role
int data_achieve[MAXPLAYERS];   // List of each player's achievements
int data_bosskills[MAXPLAYERS]; // List of each player's number of boss kills


/*===================================================================================================
                                           Server Start
===================================================================================================*/

script "DoomWare_Server_Boot" OPEN
{
    int i;
    bool buuingame = false;
    
    // Initialize some global variables
    game_status = STATUS_NOTSTARTED;
    game_solo = false;
    game_phase2health = 0;
	game_lastplayerdied = false;

    // Create a "thread" that continually updates the hats and handles the database
    ACS_NamedExecute("DoomWare_Server_Hats", 0);

    // Clean up all the globals
    ACS_NamedExecute("DoomWare_Server_InitGlobals", 0);

    // Create a "thread" to syncronize global variables for CLIENTSIDE scripts
    ACS_NamedExecute("DoomWare_Server_SyncGlobals", 0);

    // Initialize the map
    ACS_NamedExecute("DoomWare_Server_InitMap", 0);

    // Wait a little bit
    Delay(SECOND*5);
    
    // Check if buu342 is ingame
    for (i=0; i<MAXPLAYERS; i++)
    {
        str plyname = StrParam(n:(i+1));
        if (!strcmp(plyname, BUU342NAME))
            buuingame = true;
    }
    
    // If he isn't, connect him to the game
    if (!buuingame)
    {
        ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c- has connected. (from: pt)", CHATSOUND_CON);
        Delay(SECOND*2);
    }
    
    // Make buu342 say something edgy
    switch (1/*random(1, 7)*/)
    {
        case 1:
            ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: I hope you've made your prayers.", CHATSOUND_MSG);
            break;
        case 2:
            ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: Killing you all is my favorite part.", CHATSOUND_MSG);
            break;
        case 3:
            ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: Hopefully you prepared new pants!", CHATSOUND_MSG);
            break;
        case 4:
            ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: Let's get it started in here.", CHATSOUND_MSG);
            break;
        case 5:
            ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: Now it's my turn.", CHATSOUND_MSG);
            break;
        case 6:
            ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: Did you know: You're going to die.", CHATSOUND_MSG);
            break;
        case 7:
            ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: I'm curious how long you'll last.", CHATSOUND_MSG);
            break;
    }
    delay(SECOND);
    
    // Make buu342 join the game
    ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c- joined the game.", CHATSOUND_NONE);
    SpawnSpotForced("Buu342Phase1", 1, TID_BUU342, 192);
    SpawnSpotForced("TeleportFog", 1, 0, 0.25);
    Thing_Deactivate(TID_BUU342);

    // Mark the game as starting
    game_status = STATUS_STARTING;

    // Initialize the game's serverside logic
    ACS_NamedExecute("DoomWare_Server_Initialize", 0);
}


/*===================================================================================================
                                           Client Enter
===================================================================================================*/

script "DoomWare_Client_Join" ENTER
{
    // Initialize the player's variables
    ACS_NamedExecuteAlways("DoomWare_Client_Initialize", 0);

    // Start the HUD "thread"
    ACS_NamedExecuteAlways("DoomWare_Client_DrawHUD", 0, PlayerNumber());
    ACS_NamedExecuteAlways("DoomWare_Client_DrawMenu", 0);

    // Wait until Buu342 has joined
    while (game_status == STATUS_NOTSTARTED || game_status == STATUS_STARTING)
        delay(1);
        
    // Start the main clientside logic "thread"
    ACS_NamedExecuteAlways("DoomWare_Client_GameLogic", 0);
}


/*===================================================================================================
                                DoomWare Server Logic Initialization
===================================================================================================*/

Script "DoomWare_Server_Initialize" (void)
{
    // Select which games will be played from the collection
    ACS_NamedExecute("DoomWare_Server_InitRounds", 0);

    // Initialize the highscore table
    ACS_NamedExecute("DoomWare_Server_InitHighscores", 0);

    // Wait a bit so everyone knows the game is starting
    delay(SECOND*3);

    // Create a "thread" that controls the game logic
    game_status = STATUS_WAITING;
    ACS_NamedExecute("DoomWare_Server_GameLogic", 0);
}

Script "DoomWare_Server_InitMap" (void)
{
    // Lava color and damage
    Sector_SetColor(4, 255, 105, 0, 0);
    Sector_SetDamage(4, 99999, mod_lava);

    // Terry wad sky and floor scrolling
    Scroll_Floor(3, 300, 2, 240);
    Scroll_Ceiling(3, 300, 2, 90);
    
    // Rotating spikes arena fog
    Sector_SetFade(150, 255, 106, 0);
    Sector_SetFade(151, 255, 106, 0);
    Sector_SetFade(152, 255, 106, 0);
    Sector_SetFade(153, 255, 106, 0);
    Sector_SetFade(154, 255, 106, 0);
    Sector_SetFade(155, 255, 106, 0);
    Sector_SetFade(156, 255, 106, 0);
    Sector_SetFade(157, 255, 106, 0);
    Sector_SetFade(158, 255, 106, 0);
    
    // Bouncy arena walls
    if (GetCVar("doomware_bouncywalls"))
    {
        SetLineSpecial(255, 226, 255, 0, 255, 64);
        SetLineSpecial(254, 226, 255, 0, 254, 128);
        SetLineSpecial(253, 226, 255, 0, 253, 192);
        SetLineSpecial(252, 226, 255, 0, 252, 0);
    }
    
    // OpenGL red lights
    SpawnSpotForced("RedPoint", 88, TID_REMOVE, 0.0);
    Thing_remove(88);
    Thing_ChangeTID(TID_REMOVE, 88);
    Thing_Deactivate(TID_BUU3422);
    
    // Detect the map skin
    if (!strcmp(GetCVarString("doomware_mode"), "halloween") || (GetCVar("doomware_automode") && GetTimeProperty(SystemTime(), TM_MONTH) == 9))
        game_skin = MAPSKIN_HALLOWEEN;
    else if (!strcmp(GetCVarString("doomware_mode"), "christmas") || (GetCVar("doomware_automode") && GetTimeProperty(SystemTime(), TM_MONTH) == 11))
        game_skin = MAPSKIN_CHRISTMAS;
    else
        game_skin = MAPSKIN_NONE;
    
    // Mod the map for the different map skins mode
    if (game_skin == MAPSKIN_HALLOWEEN)
    {
        SpawnSpotForced("OrangeTorch", 838, 0, 0);
        Thing_remove(838);
        SpawnSpotForced("OrangePoint", 147, TID_REMOVE, 0.0);
        Thing_remove(147);
        Thing_ChangeTID(TID_REMOVE, 147);
        ChangeFloor(839, "FLATHLWN");
        ChangeFloor(856, "FLATHLWN");
        ChangeFloor(22, "TLITE6_8");
        SetLineTexture(89, SIDE_BACK, TEXTURE_BOTTOM , "N_BRGR16");
        ACS_NamedExecute("DoomWare_DoLightning", 0);
    }
    else if (game_skin == MAPSKIN_CHRISTMAS)
    {
        SpawnSpotForced("WhiteTorch", 838, 0, 0);
        Thing_remove(838);
        SpawnSpotForced("WhitePoint", 147, TID_REMOVE, 0.0);
        Thing_remove(147);
        Thing_ChangeTID(TID_REMOVE, 147);
        ChangeFloor(839, "FLATCHRS");
        ChangeFloor(856, "FLATCHRS");
        ChangeFloor(22, "TLITE6_9");
        SetLineTexture(89, SIDE_BACK, TEXTURE_BOTTOM , "N_BRGR17");
        Light_ChangeToValue(256, 255);
        for (int i=3; i<=10; i++)
        {
            SpawnSpotForced("SnowDropper", i, TID_REMOVE, 0);
            SetActorPosition(TID_REMOVE, GetActorX(TID_REMOVE), GetActorY(TID_REMOVE), GetActorZ(TID_REMOVE)+100.0, false);
            Thing_ChangeTID(TID_REMOVE, 0);
        }
    }
    else
    {
        SpawnSpotForced("BluePoint", 147, TID_REMOVE, 0.0);
        Thing_remove(147);
        Thing_ChangeTID(TID_REMOVE, 147);
    }
}

Script "DoomWare_Server_InitRounds" (void)
{
    int i, j, k;
    game_roundnum = 1;
    game_over = OVER_NONE;
    
    // If we are not allowed repeats
    if (!GetCVar("doomware_duplicates"))
    {
        // Initialize the array with all the rounds
        for (i=0; i<NUMBEROFGAMES; i++)
            round_current[i] = i+1;

        // Shuffle the rounds array
        for (i=0; i<NUMBEROFGAMES; i++)
        {
            j = random(i, NUMBEROFGAMES-1);
            k = round_current[i];
            round_current[i] = round_current[j];
            round_current[j] = k;
        }
    }
    else // Otherwise just pick a bunch of games at random
    {
        for (i=0; i<NUMBEROFGAMES; i++)
            round_current[i] = random(1, NUMBEROFGAMES);
    }
}

Script "DoomWare_Server_InitHighscores" (void)
{
    int i;
    for (i=0; i<MAXPLAYERS; i++)
        player_achievement[i] = "";
}


/*===================================================================================================
                                DoomWare Client Logic Initialization
===================================================================================================*/

Script "DoomWare_Client_Initialize" (void)
{
    // Wipe the player's Inventory
    clearinventory();

    // Assign each player a TID, starting at 1337
    Thing_ChangeTID(0, TID_PLAYER+PlayerNumber());

    // Clean up the database and variables for this player
    data_deaths[PlayerNumber()] = 0;
    data_1ups[PlayerNumber()] = 0;
    player_achievement[PlayerNumber()] = "";
    minigame_instruction1[PlayerNumber()] = "";
    player_viewsprite[PlayerNumber()] = "";

    HUDMessage(s:""; HUDMSG_PLAIN, MSGID_ACHIEVEM, CR_CYAN, 0, 0, 1.0);

    // Check the player's role or warn if they're not logged in
    if (!GetCVar("doomware_unsafedb") && playerIsLoggedIn(PlayerNumber()))
        Load_PlayerDB(PlayerNumber());
    else
        data_role[PlayerNumber()] = ROLE_UNLOGGED;

    // If the server is full, give the achievement
    if (PlayerCount() == MAXPLAYERS)
        for (int i=0; i<MAXPLAYERS; i++)
            Give_Achievement(i, ACHIEVE_ID_FULLSERVER);
}


/*===================================================================================================
                                  DoomWare Server Main Logic
===================================================================================================*/

Script "DoomWare_Server_GameLogic" (void)
{
    // Initialize some global variables
    int i;
    str plyname;
    bool buuingame;
    str gametoplay = "";
    round_winifmid = false;
    round_winifsuicide = false;
    round_noforceend = false;
    minigame_wincondition1 = 0;
    minigame_wincondition2 = 0;
    minigame_wincondition3 = 0;
    minigame_fragpoints = false;
    minigame_timer = TIMER_OFF;
    minigame_duringphase = true;
    
    // Start phase 1
    if (game_status == STATUS_WAITING)
    {
        delay(MUSICDUR_WAIT1);
        game_status = STATUS_PHASE1;
        Thing_Activate(TID_BUU342);
    }
    
    // Start phase 2 when Buu342 dies
    if (game_status == STATUS_PHASE1 && ThingCount(0, TID_BUU342) == 0)
    {
        game_status = STATUS_PHASE1OVER;
        SetMusic("");
        delay(SECOND*3);
        
        // Make buu342 say some more edgy things
        ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: Did you really think it'd be that easy?", CHATSOUND_MSG);
        delay(SECOND*3);
        ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: This is just the beginning.", CHATSOUND_MSG);
        delay(SECOND*3);
        
        // Start the floor shake
        Radius_Quake(3,SECOND*6,0,255,1);
        delay(SECOND*3);
        
        // Make the head rise from the corpse
        SpawnSpotForced("Buu342HeadCorpse", TID_BUU342, TID_BUU342+1, 0);
        delay(SECOND*3);
        
        // Stop the head for a second
        SetActorState(TID_BUU342+1, "Paused", false);
        AmbientSound("DoomWare/BuuWoo", 127);
        delay(SECOND*2);
        
        // Do an explosion and fade everyone's view
        AmbientSound("DoomWare/BigBoom", 127);
        FadeTo(255, 255, 255, 1.0, 0.5);
        Radius_Quake(9,SECOND,0,255,1);
        delay(SECOND*3);
        
        // Show Buu342's true form
        thing_Remove(TID_BUU342);
        thing_Remove(TID_BUU342+1);
        for (i=0; i<MAXPLAYERS; i++)
            SetActorAngle(TID_PLAYER+i, 0.25);
        FadeTo(255, 255, 255, 0.0, 0.5);
        Thing_Move(TID_BUU3422, 28, true);
        Delay(SECOND);
        Thing_Activate(TID_BUU3422);
        delay(SECOND*5);
        
        // Start the second phase
        SetMusic("D_WRAPD");
        game_status = STATUS_PHASE2;
    }
    
    // Handle phase 2 minigames
    if (game_status == STATUS_PHASE2 && ClassifyActor(TID_BUU3422)&ACTOR_ALIVE)
    {
        bool dominigame = false;
        
        // Check the phase 2 health
        switch (game_phase2health)
        {
            case 0:
                if (GetActorProperty(TID_BUU3422, APROP_HEALTH) <= 60000)
                {
                    game_phase2health++;
                    dominigame = true;
                    SetActorState(TID_BUU3422, "TurnInvisible", true);
                    delay(SECOND*3);
                    ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: you FOOLS! This is MY WAD, MY GAMEMODE.", CHATSOUND_MSG);
                    delay(SECOND*3);
                    ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: I'M THE ONE IN CONTROL HERE. WATCH!", CHATSOUND_MSG);
                    delay(SECOND*3);
                    ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "The Server Host or an RCON user is possibly cheating by calling \"puke \"DoomWare_Console_Buu342TakeOver\" 0 0 0 0\"", CHATSOUND_NONE);
                    delay(SECOND*3);
                    ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: Lets see how good you are at DoomWare!", CHATSOUND_MSG);
                    delay(SECOND*3);
                }
                break;
            case 1:
                if (GetActorProperty(TID_BUU3422, APROP_HEALTH) <= 50000)
                {
                    game_phase2health++;
                    dominigame = true;
                    SetActorState(TID_BUU3422, "TurnInvisible", true);
                    delay(SECOND*3);
                    ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: You're a persistent bunch. Lets try this then.", CHATSOUND_MSG);
                    delay(SECOND*3);
                }
                break;
            case 2:
                if (GetActorProperty(TID_BUU3422, APROP_HEALTH) <= 40000)
                {
                    game_phase2health++;
                    dominigame = true;
                    SetActorState(TID_BUU3422, "TurnInvisible", true);
                    delay(SECOND*3);
                    ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: Gosh, you're annoying. How about this?", CHATSOUND_MSG);
                    delay(SECOND*3);
                }
                break;
            case 3:
                if (GetActorProperty(TID_BUU3422, APROP_HEALTH) <= 30000)
                {
                    game_phase2health++;
                    dominigame = true;
                    SetActorState(TID_BUU3422, "TurnInvisible", true);
                    delay(SECOND*3);
                    ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: Why won't you die already!?", CHATSOUND_MSG);
                    delay(SECOND*3);
                }
                break;
            case 4:
                if (GetActorProperty(TID_BUU3422, APROP_HEALTH) <= 20000)
                {
                    game_phase2health++;
                    dominigame = true;
                    SetActorState(TID_BUU3422, "TurnInvisible", true);
                    delay(SECOND*3);
                    ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: fuckfuckfuckfuck!!!!!", CHATSOUND_MSG);
                    delay(SECOND*3);
                }
                break;
            case 5:
                if (GetActorProperty(TID_BUU3422, APROP_HEALTH) <= 10000)
                {
                    game_phase2health++;
                    dominigame = true;
                    SetActorState(TID_BUU3422, "TurnInvisible", true);
                    game_status = STATUS_PHASE2OVER;
                    SetMusic("D_WRAPDR");
                    delay(SECOND*3);
                    ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: I", CHATSOUND_MSG);
                    delay(SECOND);
                    ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: WONT", CHATSOUND_MSG);
                    delay(SECOND);
                    ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: FUCKING", CHATSOUND_MSG);
                    delay(SECOND);
                    ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: LOSE!!!!!!!!!!!!!!!", CHATSOUND_MSG);
                    delay(SECOND*3);
                    ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: You might survive this next one, but you won't what comes after!", CHATSOUND_MSG);
                    delay(SECOND*3);
                    round_nextgame = random(SECOND*5, SECOND*8);
                }
                break;
        }

        // Do a minigame
        if (dominigame)
        {
            int laststatus = game_status;
            gametoplay = StrParam(s:"DoomWare_Server_Minigame", d:round_current[(game_phase2health-1)%NUMBEROFGAMES]);
            game_status = STATUS_MINIGAME;
            ClearInventory();
            
            // Play a minigame
            ACS_NamedExecute(gametoplay, 0);
            NamedScriptWait(gametoplay);
            
            // Cleanup
            Thing_remove(TID_REMOVE);
            if (laststatus == STATUS_PHASE2)
                game_status = STATUS_PHASE2;
            else if(laststatus == STATUS_PHASE2OVER)
                game_status = STATUS_PHASE3;
                
            // Respawn people
            if (GetCVar("doomware_bossfightrespawn") && !game_lastplayerdied)
            {
                // Make sure at least one person is alive
                game_alive = 0;
                for (i=0; i<MAXPLAYERS; i++)
                    if (PlayerInGame(i) && PlayerIsSpectator(i) == 0)
                        game_alive++;
                
                // If so, respawn everyone
                if (game_alive != 0)
                {
                    for (i=0; i<MAXPLAYERS; i++)
                    {
                        if (PlayerIsSpectator(i) == 2)
                        {
                            SetDeadSpectator(i, 0);
                            game_alive++;
                        }
                    }
                }
            }
                
            // Make Buu342 visible again
            Delay(SECOND);
            SetActorState(TID_BUU3422, "TurnVisible", true);
        }
    }
    
    // Handle phase 3 minigames
    if (game_status == STATUS_PHASE3 && ClassifyActor(TID_BUU3422)&ACTOR_ALIVE)
    {
        if (round_nextgame <= 0)
        {
            gametoplay = StrParam(s:"DoomWare_Server_Minigame", d:random(1, NUMBEROFGAMES));
            ACS_NamedExecute(gametoplay, 0);
            round_nextgame = random(SECOND*7, SECOND*12);
        }
        round_nextgame--;
    }

    // Handle ending
    if (game_status >= STATUS_PHASE1 && ClassifyActor(TID_BUU3422)&ACTOR_DEAD)
    {        
        int tx, ty, ang;
        
        // Clear the arena and make players invul (in case of minigame stuff)
        thing_remove(TID_REMOVE);
        for (i=0; i<MAXPLAYERS; i++)
            if (PlayerInGame(i) && PlayerIsSpectator(i) == 0)
                SetPlayerProperty(1, 2, PROP_INVULNERABILITY);
        
        // Stop the music and flash the screen
        SetMusic("");
        FadeTo(255, 255, 255, 1.0, 0);
        delay(1);
        FadeTo(255, 255, 255, 0.0, 0.5);
        Delay(SECOND*3);
        
        // Say the last words
        AmbientSound("misc/chat", 127);
        ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: Heh, looks like you really are...", CHATSOUND_MSG);
        Delay(SECOND*2);
        AmbientSound("misc/chat", 127);
        ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: Too strong...", CHATSOUND_MSG);
        Delay(SECOND*2);
        Radius_Quake(3, SECOND*7, 0, 255, 1);
        
        // Final death
        Delay(SECOND*9);
        ang = FixedMul(VectorAngle(GetActorX(TID_BUU3422), GetActorY(TID_BUU3422)), 255.0)>>16;
        ThrustThing(ang+64, 10, 1, TID_BUU3422);
        FadeTo(255, 255, 255, 1.0, 0);
        delay(1);
        FadeTo(255, 255, 255, 0.0, 0.5);
        Radius_Quake(9, SECOND , 0, 255, 1);
        Delay(SECOND*3);

        // Check if buu342 is ingame
        for (i=0; i<MAXPLAYERS; i++)
        {
            plyname = StrParam(n:i);
            if (strcmp(plyname, BUU342NAME))
                buuingame = true;
        }
        
        // If he isn't, disconnect him from the game
        if (!buuingame)
            ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "Client \cqB\csu\cdu\cq3\cs4\cd2\c- disconnected.", CHATSOUND_NONE);
        else
            ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c- joined the spectators.", CHATSOUND_NONE);
        thing_remove(TID_BUU3422);
        Delay(SECOND*3);
        
        // End the game
        game_status = STATUS_GAMEOVER;
        game_over = OVER_WINNER;
        SetMusic("D_BOSWIN");
        for (i=0; i<MAXPLAYERS; i++)
        {
            if (PlayerInGame(i) || PlayerIsSpectator(i) != 1)
            {
                Give_Achievement(i, ACHIEVE_ID_BOSS);
                data_bosskills[i]++;
            }
        }
        delay(SECOND*7 + 15);
        
        // Update the database and exit to the original map
        ACS_NamedExecute("DoomWare_Server_UpdateDB", 0);
        NamedScriptWait("DoomWare_Server_UpdateDB");
        ChangeLevel("map01", 0, 0, 0);
    }

    // Check if everyone is dead
    game_alive = 0;
    for (i=0; i<MAXPLAYERS; i++)
        if (PlayerInGame(i) && PlayerIsSpectator(i) == 0)
            game_alive++;
    
    // If everone is dead, then end the game
    if ((game_alive == 0 || game_lastplayerdied)  && game_status != STATUS_GAMEOVER)
    {
        buuingame = false;
        game_status = STATUS_GAMEOVER;
        game_over = OVER_LOST;
        
        // Game over transition
        SetMusic("D_BOSLOS");
        delay(15);
        SetActorState(TID_BUU3422, "Laugh", true);
        delay(SECOND*3);
        switch(random(1, 7))
        {
            case 2:
                ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: Try a little harder next time", CHATSOUND_MSG);
                break;
            case 3:
                ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: Pathetic", CHATSOUND_MSG);
                break;
            case 4:
                ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: Whoops, looks like I accidentally obliterated you", CHATSOUND_MSG);
                break;
            case 5:
                ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: I'll call next time I want to be tickled", CHATSOUND_MSG);
                break;
            case 6:
                ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: Maybe try hurting me next time", CHATSOUND_MSG);
                break;
            case 7:
                ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: Maybe if you use IDDQD, you'll actually do some damage", CHATSOUND_MSG);
                break;
            default:
                ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c-\cd: You're crazier than me if you thought you stood a chance", CHATSOUND_MSG);
                break;
        }
        delay(SECOND*2);
        
        // Check if buu342 is ingame
        for (i=0; i<MAXPLAYERS; i++)
        {
            plyname = StrParam(n:i);
            if (strcmp(plyname, BUU342NAME))
                buuingame = true;
        }
        
        // If he isn't, disconnect him from the game
        if (!buuingame)
            ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "Client \cqB\csu\cdu\cq3\cs4\cd2\c- disconnected.", CHATSOUND_NONE);
        else
            ACS_NamedExecuteAlways("DoomWare_FakeMessage", 0, "\cqB\csu\cdu\cq3\cs4\cd2\c- joined the spectators.", CHATSOUND_NONE);
        thing_remove(TID_BUU342);
        thing_remove(TID_BUU3422);
        delay(SECOND*2);

        // Update the database and exit to the original map
        ACS_NamedExecute("DoomWare_Server_UpdateDB", 0);
        NamedScriptWait("DoomWare_Server_UpdateDB");
        ChangeLevel("map01", 0, 0, 0);
    }
    
    // If the game was forcefully ended
    if (game_over == OVER_FORCED)
    {
        SetMusic("");
        game_status = STATUS_GAMEOVER;
        thing_remove(TID_BUU342);
        thing_remove(TID_BUU3422);
        delay(MUSICDUR_GAMEOVER);
        
        // Update the database and exit to the original map
        ACS_NamedExecute("DoomWare_Server_UpdateDB", 0);
        NamedScriptWait("DoomWare_Server_UpdateDB");
        ChangeLevel("map01", 0, 0, 0);
    }

    // Restart this script
    Delay(1);
    restart;
}

function bool No_MidRound_Array(void) // Return whether everyone has passed/failed
{
    for (int i=0; i<MAXPLAYERS; i++)
        if (PlayerInGame(i) && PlayerIsSpectator(i) == 0)
            return false;
    return true;
}

Script "DoomWare_Server_GameWait" (int time)
{
    int time_passed;
    minigame_timer = time;
    while (time_passed < time)
    {
        delay(1);
        time_passed++;
        minigame_timer--;

        // Stop if everyone has already passed/died
        if (No_MidRound_Array() && !round_noforceend)
        {
            if (time - time_passed < SECOND)
                delay(time - time_passed);
            else
            {
                minigame_timer = TIMER_EARLY;
                delay(SECOND);
            }
            break;
        }
    }
    minigame_timer = TIMER_OFF;
}

Script "DoomWare_Server_SavePlayerPositions" (void)
{
    for (int i=0; i<MAXPLAYERS; i++)
    {
        // Don't bother if the player doesn't exist
        if (!PlayerInGame(i))
            continue;

        // Get all player positions
        player_position[i][0] = GetActorX(TID_PLAYER+i);
        player_position[i][1] = GetActorY(TID_PLAYER+i);
        player_position[i][2] = GetActorZ(TID_PLAYER+i);
    }
}

Script "DoomWare_Server_TeleportPlayers" (int tid, int telesector, int fog)
{
    int i;
    
    // Randomize the destinations if we're not using telesector
    if (telesector == 0)
    {
        for (i=0; i<MAXPLAYERS; i++)
            player_teleporter[i] = tid+i;

        int j, k;
        for (i=0; i<MAXPLAYERS; i++)
        {
            j = random(i, MAXPLAYERS-1);
            k = player_teleporter[i];
            player_teleporter[i] = player_teleporter[j];
            player_teleporter[j] = k;
        }
    }

    // Teleport everyone
    for (i=0; i<MAXPLAYERS; i++)
    {
        // Don't bother if the player doesn't exist
        if (!PlayerInGame(i))
            continue;

        // Get all player positions
        player_position[i][0] = GetActorX(TID_PLAYER+i);
        player_position[i][1] = GetActorY(TID_PLAYER+i);
        player_position[i][2] = GetActorZ(TID_PLAYER+i);

        if (!telesector)
        {
            Thing_Move(TID_PLAYER+i, player_teleporter[i], !fog); // Move to an individual TID
        }
        else
        {
            TeleportInSector(2, 1, tid, fog, TID_PLAYER+i);  // Move them using a single TID
            TeleportInSector(17, 1, tid, fog, TID_PLAYER+i);
            TeleportInSector(19, 1, tid, fog, TID_PLAYER+i);
            TeleportInSector(20, 1, tid, fog, TID_PLAYER+i);
            TeleportInSector(21, 1, tid, fog, TID_PLAYER+i);
            TeleportInSector(22, 1, tid, fog, TID_PLAYER+i);
            TeleportInSector(23, 1, tid, fog, TID_PLAYER+i);
            TeleportInSector(24, 1, tid, fog, TID_PLAYER+i);
            TeleportInSector(25, 1, tid, fog, TID_PLAYER+i);
            TeleportInSector(39, 1, tid, fog, TID_PLAYER+i);
            TeleportInSector(44, 1, tid, fog, TID_PLAYER+i);
        }
    }

    // Reduce everyone's speed and fix their angles
    delay(1);
    if (fog)
    {
        for (i=0; i<MAXPLAYERS; i++)
        {
            // Don't bother if the player doesn't exist
            if (!PlayerInGame(i))
                continue;

            SetActorPitch(TID_PLAYER+i, 0.0);
            if (telesector)
                SetActorAngle(TID_PLAYER+i, GetActorAngle(tid));
            else
                SetActorAngle(TID_PLAYER+i, GetActorAngle(player_teleporter[i]));
            SetActorVelocity(TID_PLAYER+i, 0.0, 0.0, 0.0, false, false);
        }
    }

    // Retry for anyone who was not teleported due to telefragging prevention
    for (i=0; i<MAXPLAYERS; i++)
    {
        // Don't bother if the player doesn't exist
        if (!PlayerInGame(i))
            continue;

        while (Distance(TID_PLAYER+i, 1) < 512 && game_status == STATUS_MINIGAME)
        {
            if (!telesector)
            {
                Thing_Move(TID_PLAYER+i, player_teleporter[i], !fog); // Move to an individual TID
            }
            else
            {
                TeleportInSector(2, 1, tid, fog, TID_PLAYER+i);  // Move them using a single TID
                TeleportInSector(17, 1, tid, fog, TID_PLAYER+i);
                TeleportInSector(19, 1, tid, fog, TID_PLAYER+i);
                TeleportInSector(20, 1, tid, fog, TID_PLAYER+i);
                TeleportInSector(21, 1, tid, fog, TID_PLAYER+i);
                TeleportInSector(22, 1, tid, fog, TID_PLAYER+i);
                TeleportInSector(23, 1, tid, fog, TID_PLAYER+i);
                TeleportInSector(24, 1, tid, fog, TID_PLAYER+i);
                TeleportInSector(25, 1, tid, fog, TID_PLAYER+i);
                TeleportInSector(39, 1, tid, fog, TID_PLAYER+i);
                TeleportInSector(44, 1, tid, fog, TID_PLAYER+i);
            }
            delay(1);

            if (fog)
            {
                SetActorPitch(TID_PLAYER+i, 0.0);
                if (telesector)
                    SetActorAngle(TID_PLAYER+i, GetActorAngle(tid));
                else
                    SetActorAngle(TID_PLAYER+i, GetActorAngle(player_teleporter[i]));
                SetActorVelocity(TID_PLAYER+i, 0.0, 0.0, 0.0, false, false);
            }
        }
    }
}

Script "DoomWare_Server_TeleportSingle" (int plynum, int dest)
{
    player_position[plynum][0] = GetActorX(TID_PLAYER+plynum);
    player_position[plynum][1] = GetActorY(TID_PLAYER+plynum);
    player_position[plynum][2] = GetActorZ(TID_PLAYER+plynum);
    Thing_Move(TID_PLAYER+plynum, dest, false);
    SetActorPitch(TID_PLAYER+plynum, 0.0);
    SetActorAngle(TID_PLAYER+plynum, GetActorAngle(dest));
}

Script "DoomWare_Server_ReturnPlayers" (int move_if_lost, int fog)
{
    for (int i=0; i<MAXPLAYERS; i++)
    {
        if (!PlayerInGame(i))
            continue;

        // Move the player back to their original spot
        if ((!move_if_lost && PlayerInGame(i) && PlayerIsSpectator(i) == 0) || move_if_lost)
            SetActorPosition(TID_PLAYER+i, player_position[i][0], player_position[i][1], player_position[i][2], fog);

        // If for some reason they're not at the spawn, force them back to the center
        while (Distance(TID_PLAYER+i, 1) > 512)
        {
            SetActorPosition(TID_PLAYER+i, GetActorX(1), GetActorY(1), GetActorZ(1), fog);
            delay(1);
        }
    }
}

Script "DoomWare_Server_UpdateDB" (void) // Updates the Database at the end of the game
{
    int i;

    // Don't update if it was a solo game
    if (game_solo)
        terminate;

    // Begin the Database Transaction
    BeginDBTransaction();

    for (i=0; i<MAXPLAYERS; i++)
    {
        if ((PlayerIsLoggedIn(i) || GetCVar("doomware_unsafedb")) && playerInGame(i))
        {
            str plyname = getPlayerAccountName(i);
            if (GetCVar("doomware_unsafedb"))
                plyname = StrParam(n:i+1);

            // Log the number of deaths
            SetDBEntry("Deaths", plyname, data_deaths[i]);

            // Log the achievements
            SetDBEntry("Achievements", plyname, data_achieve[i]);

            // Log the player's roles
            SetDBEntry("Role", plyname, data_role[i]);
        }
    }

    // Update the Database
    EndDBTransaction();
    delay(1);
}

Script "DoomWare_Server_InitGlobals" (void)
{
    for (int i=0; i< MAXPLAYERS; i++)
    {
        data_points[i] = 0;
        data_wins[i] = 0;
        data_deaths[i] = 0;
        data_1ups[i] = 0;
        data_role[i] = 0;
        data_achieve[i] = 0;
        data_bosskills[i] = 0;
        player_viewingmenu[i] = 0;
        minigame_instruction1[i] = "";
        player_viewsprite[i] = "";
    }

    SetCVar("__clientsync_round", 0);
    SetCVar("__clientsync_gamestatus", 0);
    SetCVar("__clientsync_gameover", 0);
    SetCVar("__clientsync_minigametimer", 0);
    SetCVar("__clientsync_highscore1", 0);
    SetCVar("__clientsync_highscore2", 0);
    SetCVar("__clientsync_canobserve", 0);
    SetCVar("__clientsync_canmove", 0);
    SetCVar("__clientsync_gamesolo", 0);
    SetCVar("__clientsync_wincondition1", 0);
    SetCVar("__clientsync_roundcurrent", 0);
    SetCVarString("__clientsync_highname", "");
    SetCVarString("__clientsync_speeduphint", "");

    SetCVarString("__clientsync_player_score", "");
    SetCVarString("__clientsync_player_loggedin", "");
    SetCVarString("__clientsync_player_datascore", "");
    SetCVarString("__clientsync_player_datawins", "");
    SetCVarString("__clientsync_player_datadeaths", "");
    SetCVarString("__clientsync_player_data1ups", "");
    SetCVarString("__clientsync_player_dataroles", "");
    SetCVarString("__clientsync_player_dataachieve", "");
    SetCVarString("__clientsync_player_databosskills", "");
    SetCVarString("__clientsync_player_viewingmenu", "");
    SetCVarString("__clientsync_player_instruction1", "");
    SetCVarString("__clientsync_player_instruction2", "");
    SetCVarString("__clientsync_player_instruction3", "");
    SetCVarString("__clientsync_player_viewsprite", "");
    
    // Get global stat data
    DB_NetworkStats("Wins", "wins");
    DB_NetworkStats("Points", "points");
    DB_NetworkStats("1Ups", "1ups");
    DB_NetworkStats("Deaths", "deaths");
    DB_NetworkStats("BossKills", "bosses");
}

function void DB_NetworkStats(str namespace, str cvarname) // Updates the global stats variables to network to clients
{
    int stat_t = 0;
    int stat_g = 0;
    int stat_n = "Multiple Players";
    int res = GetDBEntries(namespace);
    int c = CountDBResults(res);
    if (c != 0)
    {
        FreeDBResults(res);
        res = SortDBEntries(namespace, c, 0, true);
        if (GetDBResultValue(res, 0) != GetDBResultValue(res, 1))
            stat_n = GetDBResultKeyString(res, 0);
        for (int i=0; i<c; i++)
            stat_g += GetDBResultValue(res, i);
        stat_t = GetDBResultValue(res, 0);
        FreeDBResults(res);
        
        Player_SetCVar(StrParam(s:"__clientsync_stats_t_", s:cvarname), stat_t);
        Player_SetCVar(StrParam(s:"__clientsync_stats_g_", s:cvarname), stat_g);
        Player_SetCVarString(StrParam(s:"__clientsync_stats_n_", s:cvarname), stat_n);
    }
}

Script "DoomWare_Server_SyncGlobals" (void)
{
    /*
        Why on earth are global variables not synced between the server and
        CLIENTSIDE scripts??? Pretty much every single game engine I've worked on
        At least gives me the option of marking a variable as "Syncable" to the
        client...
    */
    Player_SetCVar("__clientsync_round", game_roundnum);
    Player_SetCVar("__clientsync_gamestatus", game_status);
    Player_SetCVar("__clientsync_gameover", game_over);
    Player_SetCVar("__clientsync_minigametimer", minigame_timer);
    Player_SetCVar("__clientsync_wincondition1", minigame_wincondition1);
    Player_SetCVar("__clientsync_canobserve", minigame_canobserve);
    Player_SetCVar("__clientsync_gamesolo", game_solo);
    Player_SetCVar("__clientsync_roundcurrent", game_alive);
    if (ClassifyActor(TID_BUU342)&ACTOR_ALIVE)
        Player_SetCVar("__clientsync_highscore1", GetActorProperty(TID_BUU342, APROP_HEALTH));
    else
        Player_SetCVar("__clientsync_highscore1", GetActorProperty(TID_BUU3422, APROP_HEALTH));

    Pack_Global_Array("__clientsync_player_score");
    Pack_Global_Array("__clientsync_player_loggedin");
    Pack_Global_Array("__clientsync_player_datascore");
    Pack_Global_Array("__clientsync_player_datawins");
    Pack_Global_Array("__clientsync_player_datadeaths");
    Pack_Global_Array("__clientsync_player_data1ups");
    Pack_Global_Array("__clientsync_player_dataroles");
    Pack_Global_Array("__clientsync_player_dataachieve");
    Pack_Global_Array("__clientsync_player_databosskills");
    Pack_Global_Array("__clientsync_player_viewingmenu");
    Pack_Global_Array("__clientsync_player_instruction1");
    Pack_Global_Array("__clientsync_player_instruction2");
    Pack_Global_Array("__clientsync_player_instruction3");
    Pack_Global_Array("__clientsync_player_viewsprite");

    delay(1);
    restart;
}

function void Player_SetCVar(str cvar, int value) // Efficient SetCVar function
{
    if (GetCVar(cvar) != value)
        SetCVar(cvar, value);
}

function void Player_SetCVarString(str cvar, str value) // Efficient SetCVarString function
{
    if (StrCmp(GetCVarString(cvar), value))
        SetCVarString(cvar, value);
}

function void Pack_Global_Array(str cvar) // Replacement for Get/SetUserCVar
{
    /*
        Since GetUserCVar is broken on Zandornum, instead I fill everyone's data into a single
        string and make it a server cvar. A new line represents a different player, so the data
        in line 3 of the string corresponds to the data of PlayerNumber() == 3
    */
    int i;
    str final = "";

    /* 
        Super ugly hack!
        Strings in ACS are pretty much just integers that point to a string table. This means that
        You can do string comparisons in a switch statement! Literally O(1) string comparisons!
    */
    switch (cvar)
    {
        case "__clientsync_player_loggedin":      for (i=0; i< MAXPLAYERS; i++) final = StrParam(s:final, d:(PlayerIsLoggedIn(i) || GetCVar("doomware_unsafedb")), s:"\n"); break;
        case "__clientsync_player_datascore":     for (i=0; i< MAXPLAYERS; i++) final = StrParam(s:final, d:data_points[i], s:"\n"); break;
        case "__clientsync_player_datawins":      for (i=0; i< MAXPLAYERS; i++) final = StrParam(s:final, d:data_wins[i], s:"\n"); break;
        case "__clientsync_player_datadeaths":    for (i=0; i< MAXPLAYERS; i++) final = StrParam(s:final, d:data_deaths[i], s:"\n"); break;
        case "__clientsync_player_data1ups":      for (i=0; i< MAXPLAYERS; i++) final = StrParam(s:final, d:data_1ups[i], s:"\n"); break;
        case "__clientsync_player_dataroles":     for (i=0; i< MAXPLAYERS; i++) final = StrParam(s:final, d:data_role[i], s:"\n"); break;
        case "__clientsync_player_dataachieve":   for (i=0; i< MAXPLAYERS; i++) final = StrParam(s:final, d:data_achieve[i], s:"\n"); break;
        case "__clientsync_player_databosskills": for (i=0; i< MAXPLAYERS; i++) final = StrParam(s:final, d:data_bosskills[i], s:"\n"); break;
        case "__clientsync_player_viewingmenu":   for (i=0; i< MAXPLAYERS; i++) final = StrParam(s:final, d:player_viewingmenu[i], s:"\n"); break;
        case "__clientsync_player_instruction1":  for (i=0; i< MAXPLAYERS; i++) final = StrParam(s:final, s:minigame_instruction1[i], s:"\n"); break;
        case "__clientsync_player_viewsprite":    for (i=0; i< MAXPLAYERS; i++) final = StrParam(s:final, s:player_viewsprite[i], s:"\n"); break;    
    }

    if (StrCmp(GetCVarString(cvar), final))
        SetCVarString(cvar, final);
}

function int Unpack_CVar_Array(str cvar) // Retrieve the value of a Pack_Global_Array CVar and convert it to int.
{
    str data = GetCVarString(cvar);
    int datalen = StrLen(data);

    int start = 0;
    int linecount = 0;

    for (int i=0; i<datalen; i++)
    {
        if (GetChar(data, i) == '\n')
        {
            if (linecount == ConsolePlayerNumber())
            {
                data = StrMid(data, start, i-start);
                break;
            }
            else
            {
                start = i+1;
                linecount++;
            }

        }
    }
    return AToI(data);
}

function str Unpack_CVar_Array_String(str cvar) // Retrieve the value of a Pack_Global_Array CVar and convert it to string.
{
    str data = GetCVarString(cvar);
    int datalen = StrLen(data);

    int start = 0;
    int linecount = 0;

    for (int i=0; i<datalen; i++)
    {
        if (GetChar(data, i) == '\n')
        {
            if (linecount == ConsolePlayerNumber())
            {
                data = StrMid(data, start, i-start);
                break;
            }
            else
            {
                start = i+1;
                linecount++;
            }

        }
    }
    return data;
}


/*===================================================================================================
                                  DoomWare Client Main Logic
===================================================================================================*/

Script "DoomWare_Client_Death" DEATH
{
    // Spawn a spoopy ghost
    if (game_skin == MAPSKIN_HALLOWEEN)
        SpawnSpotForced("SpoopyGhost", TID_PLAYER+PlayerNumber(), TID_REMOVE, 0);

    // Wait a bit for the corpse animation to play
    delay(33);
    
    // Jank workaround because of scripts getting killed when SetDeadSpectator is called
    ACS_NamedExecuteAlways("DoomWare_Client_DeathExtra", 0, PlayerNumber()); 
    delay(1);
    
    // Force the player to spectate. If failed (return 0), then they're the last player
    if (SetDeadSpectator(PlayerNumber(), 1) == 0)
	{
		game_lastplayerdied = true;
		game_alive = 0;
	}
}

Script "DoomWare_Client_Respawn" RESPAWN
{
    ACS_NamedExecuteAlways("DoomWare_Client_Join", 0);
	
	// If the player is the last one, then set a bunch of properties to behave as a fake spectator (workaround for Zandronum 3.1 bug)
	delay(1);
	if (game_lastplayerdied)
	{
		SetPlayerProperty(PlayerNumber(), 1, PROP_FLY);
		SetPlayerProperty(PlayerNumber(), 1, PROP_NOTARGET);
		SetPlayerProperty(PlayerNumber(), 2, PROP_INVULNERABILITY);
		SetActorProperty(0, APROP_Alpha, 0.0);
		SetActorProperty(0, APROP_RenderStyle, STYLE_None);
	}
}

Script "DoomWare_Client_DeathExtra" (int plynum)
{
    // Zandronum kills clientside scripts on spectation, so execute the HUD script again...
    SetActivator(0, AAPTR_NULL);
    delay(10);
    ACS_NamedExecuteAlways("DoomWare_Client_DrawHUD", 0, plynum);
}

Script "DoomWare_Client_Disconnect" (int gone) DISCONNECT
{
    // Wipe all messages
    HUDMessage(s:""; HUDMSG_PLAIN, MSGID_CENTER, CR_WHITE, 0.5, 0.3, 1);
    HUDMessage(s:""; HUDMSG_PLAIN, MSGID_CENTER2, CR_WHITE, 0.5, 0.3, 1);
    HUDMessage(s:""; HUDMSG_PLAIN, MSGID_SCORE, CR_WHITE, 0.5, 0.3, 1);
    HUDMessage(s:""; HUDMSG_PLAIN, MSGID_ROUND, CR_WHITE, 0.5, 0.3, 1);
    HUDMessage(s:""; HUDMSG_PLAIN, MSGID_LEADER, CR_WHITE, 0.5, 0.3, 1);
    HUDMessage(s:""; HUDMSG_PLAIN, MSGID_SPREAD, CR_WHITE, 0.5, 0.3, 1);
    HUDMessage(s:""; HUDMSG_PLAIN, MSGID_VIEWHS, CR_WHITE, 0.5, 0.3, 1);
    HUDMessage(s:""; HUDMSG_PLAIN, MSGID_HSPLAYR, CR_WHITE, 0.5, 0.3, 1);
    HUDMessage(s:""; HUDMSG_PLAIN, MSGID_HSBACK, CR_WHITE, 0.5, 0.3, 1);

    // Reset that player's score and data
    data_points[gone] = 0;
    data_wins[gone] = 0;
    data_deaths[gone] = 0;
    data_1ups[gone] = 0;
    data_bosskills[gone] = 0;
    data_role[gone] = ROLE_UNLOGGED;
    data_achieve[gone] = 0;
    
    // Zandronum kills clientside scripts on spectation, so execute the HUD script again...
    if (PlayerIsSpectator(gone))
    {
        ACS_NamedTerminate("DoomWare_Client_DrawHUD", 0);
        ACS_NamedExecuteAlways("DoomWare_Client_DrawHUD", 0, gone);
    }
}

Script "DoomWare_Client_GameLogic" (void)
{
    int lastalivecount = game_alive;
    str extra = "";
    if (game_skin == MAPSKIN_HALLOWEEN)
        extra = "Halloween/";
    else if (game_skin == MAPSKIN_CHRISTMAS)
        extra = "Christmas/";
    
    // Play Waiting music
    if (player_musicwaiting[PlayerNumber()] == false)
    {
        // Check if the game is speeding up
        if (game_status == STATUS_WAITING)
        {
            // Play the waiting music
            if (GetUserCVar(PlayerNumber(), "doomware_music"))
                LocalAmbientSound(StrParam(s:"DoomWare/", s:extra, s:"Intro"), 127);
            player_musicwaiting[PlayerNumber()] = true;
            player_musicgameover[PlayerNumber()] = false;
        }
    }
    
    // Give weapons at the start of Phase 1 to 3
    if (game_status == STATUS_PHASE1 || game_status == STATUS_PHASE2 || game_status == STATUS_PHASE3)
    {
        int wep = random(1, 2);
        delay(1); // Needed or respawned players won't get weapons???
        
        // If someone is by themselves, give them stronger weapons
        if (game_status != STATUS_PHASE1)
        {
            if (game_alive == 2 && CheckInventory("DoubleDamagePickup") == 0)
                GiveInventory("DoubleDamagePickup", 1);
            else if (game_alive == 1 && CheckInventory("QuadDamagePickup") == 0)
            {
                if (CheckInventory("DoubleDamagePickup") == 1)
                    TakeInventory("DoubleDamagePickup", 9);
                GiveInventory("QuadDamagePickup", 1);
            }
        }
        
        // Give the player some nice weapons to shoot with
        GiveInventory("CoopShotgun", 1);
        GiveInventory("CoopChaingun", 1);
        if (wep == 1)
            SetWeapon("CoopShotgun");
        else
            SetWeapon("CoopChaingun");
        
        // Give them more stuff and reset their health
        GiveInventory("Backpack", 1);
        GiveInventory("Clip", 400);
        GiveInventory("Shell", 100);
        SetActorProperty(TID_PLAYER+PlayerNumber(), APROP_Health, 100);
    }
    
    // Phase 1 to 3
    while (game_status == STATUS_PHASE1 || game_status == STATUS_PHASE2 || game_status == STATUS_PHASE2OVER || game_status == STATUS_PHASE3)
    {
        if (ClassifyActor(TID_BUU3422)&ACTOR_ALIVE)
            minigame_instruction1[PlayerNumber()] = StrParam(s:"Kill ", s:BUU342NAME);
        else
            minigame_instruction1[PlayerNumber()] = "";
            
        // Give more damage if the player count gets reduced
        if (game_status != STATUS_PHASE1 && lastalivecount != game_alive)
        {
            if (game_alive == 2 && CheckInventory("DoubleDamagePickup") == 0)
                GiveInventory("DoubleDamagePickup", 1);
            else if (game_alive == 1 && CheckInventory("QuadDamagePickup") == 0)
            {
                if (CheckInventory("DoubleDamagePickup") == 1)
                    TakeInventory("DoubleDamagePickup", 9);
                GiveInventory("QuadDamagePickup", 1);
            }
        }
            
        lastalivecount = game_alive;
        delay(1);
    }
    
    // Minigame
    while (game_status == STATUS_MINIGAME)
    {
        minigame_instruction1[PlayerNumber()] = "Survive";
        delay(1);
    }
    
    // Clear out the minigame instructions
    minigame_instruction1[PlayerNumber()] = "";

    delay(1);
    if (PlayerInGame(PlayerNumber()) && !PlayerIsSpectator(PlayerNumber())) // Unless the player disconnected
        restart;
}

function bool Check_Player_Lost(int plynum)
{
    return !(PlayerInGame(plynum) && PlayerIsSpectator(plynum) == 0);
}


/*===================================================================================================
                                    Minigames (Serverside)
===================================================================================================*/

Script "DoomWare_Server_Minigame1" (void) // The floor is lava
{
    if (game_status == STATUS_PHASE3)
        terminate;
    HUDMessage(s:"The Floor Is Lava"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);

    floor_lowerbyvalue(20, 8, 10);
    floor_lowerbyvalue(21, 8, 8);
    floor_lowerbyvalue(22, 8, 8);
    floor_lowerbyvalue(691, 8, 10);
    floor_lowerbyvalue(692, 8, 8);
    floor_lowerbyvalue(693, 8, 8);
    SetThingSpecial(88, 0, 0, 0, 0, 0, 0);
    SetThingSpecial(147, 0, 0, 0, 0, 0, 0);
    delay(SECOND);

    // Make the floor lava
    Sector_setDamage(2, 200000, MOD_LAVA);
    Sector_setDamage(20, 200000, MOD_LAVA);
    Sector_setDamage(21, 200000, MOD_LAVA);
    Sector_setDamage(22, 200000, MOD_LAVA);
    Sector_setDamage(691, 200000, MOD_LAVA);
    Sector_setDamage(692, 200000, MOD_LAVA);
    Sector_setDamage(693, 200000, MOD_LAVA);
    ChangeFloor(2, "WFLAVA1");
    ChangeFloor(20, "WFLAVA1");
    ChangeFloor(21, "WFLAVA1");
    ChangeFloor(22, "WFLAVA1");
    ChangeFloor(691, "WFLAVA1");
    ChangeFloor(692, "WFLAVA1");
    ChangeFloor(693, "WFLAVA1");
    delay(SECOND);

    // Make everything safe again
    if (game_skin == MAPSKIN_HALLOWEEN)
        SetThingSpecial(147, 0, 255, 105, 0, 8, 0);
    else if (game_skin == MAPSKIN_CHRISTMAS)
        SetThingSpecial(147, 0, 255, 255, 255, 8, 0);
    else
        SetThingSpecial(147, 0, 0, 0, 255, 8, 0);
    SetThingSpecial(88, 0, 255, 0, 0, 8, 0);
    Sector_setDamage(2, 0, MOD_UNKNOWN);
    Sector_setDamage(20, 0, MOD_UNKNOWN);
    Sector_setDamage(21, 0, MOD_UNKNOWN);
    Sector_setDamage(22, 0, MOD_UNKNOWN);
    Sector_setDamage(691, 0, MOD_UNKNOWN);
    Sector_setDamage(692, 0, MOD_UNKNOWN);
    Sector_setDamage(693, 0, MOD_UNKNOWN);
    ChangeFloor(2, "SLIME15");
    ChangeFloor(20, "N_BRGR13");
    ChangeFloor(691, "N_BRGR13");
    ChangeFloor(21, "TLITE6_5");
    ChangeFloor(692, "TLITE6_5");
    if (game_skin == MAPSKIN_HALLOWEEN)
    {
        ChangeFloor(22, "TLITE6_8");
        ChangeFloor(693, "TLITE6_8");
    }
    else if (game_skin == MAPSKIN_CHRISTMAS)
    {
        ChangeFloor(22, "TLITE6_9");
        ChangeFloor(693, "TLITE6_9");
    }
    else
    {
        ChangeFloor(22, "TLITE6_7");
        ChangeFloor(693, "TLITE6_7");
    }
    
    floor_raisebyvalue(20, 8, 10);
    floor_raisebyvalue(21, 8, 8);
    floor_raisebyvalue(22, 8, 8);
    floor_raisebyvalue(691, 8, 10);
    floor_raisebyvalue(692, 8, 8);
    floor_raisebyvalue(693, 8, 8);
    delay(SECOND);
}

Script "DoomWare_Server_Minigame2" (void) // Survive (Cyberdemon)
{
    HUDMessage(s:"Survive (Cyberdemon)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);

    // Spawn Cyberdemons
    SpawnSpotForced("TeleportFog", 1, TID_REMOVE, 0);
    SpawnSpotForced("Cyberdemon", 1, TID_REMOVE, random(0, 359));
    SpawnSpotForced("Cyberdemon", 7+random(0, 3), TID_REMOVE, random(0, 359));
    NoiseAlert(TID_PLAYER+random(0, PlayerCount()-1), TID_PLAYER+random(0, PlayerCount()-1));

    // Let the players survive
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*7);
    Thing_remove(TID_REMOVE);
}

Script "DoomWare_Server_Minigame3" (void) // Survive (ghouls)
{
    if (game_status == STATUS_PHASE3)
        terminate;
    HUDMessage(s:"Survive (Ghouls)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 440, false, true);

    // Spawn a bunch of Jitterskulls
    SpawnSpotForced("Jitterskull", 45, TID_REMOVE, random(0, 359));

    // Let the players survive
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*10);

    // Move the players back if they didn't die
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true, true);
}

Script "DoomWare_Server_Minigame4" (void) // Evade the Kamikazi
{
    int time=0;
    HUDMessage(s:"Evade the Kamikazi"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);

    // Spawn a Kamikaze
    SpawnSpotForced("TeleportFog", 1, TID_REMOVE, 0);
    SpawnSpotForced("Jihad", 1, TID_REMOVE , random(0, 359));
    SpawnSpotForced("AvoidDecoration", 1, TID_AVOID, 0);
    NoiseAlert(TID_PLAYER+random(0, PlayerCount()-1), TID_PLAYER+random(0, PlayerCount()-1));

    // Move the AVOID item to follow the Kamikaze
    while (time < (SECOND*2 - 10))
    {
        time++;
        SetActorPosition(TID_AVOID, GetActorX(TID_REMOVE), GetActorY(TID_REMOVE), GetActorZ(TID_REMOVE)+64.0, 0);
        delay(1);
    }

    // Blow up the Kamikaze
    thing_remove(TID_AVOID);
    thing_damage(TID_REMOVE, 50, 0);

    delay(10);
}

Script "DoomWare_Server_Minigame5" (void) // Survive (Grenades)
{
    HUDMessage(s:"Survive (Grenades)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);

    // Raise the floor
    ChangeFloor(17, "SHAWN2");
    floor_raisebyvalue(17, 16, 64);
    delay(SECOND);

    // Shoot grenades
    SpawnProjectile(87, "DWGrenade", 0, 90, 4, 0.25, 0);
    SpawnProjectile(87, "DWGrenade", 32, 90, 4, 0.25, 0);
    SpawnProjectile(87, "DWGrenade", 64, 90, 4, 0.25, 0);
    SpawnProjectile(87, "DWGrenade", 96, 90, 4, 0.25, 0);
    SpawnProjectile(87, "DWGrenade", 128, 90, 4, 0.25, 0);
    SpawnProjectile(87, "DWGrenade", 160, 90, 4, 0.25, 0);
    SpawnProjectile(87, "DWGrenade", 192, 90, 4, 0.25, 0);
    SpawnProjectile(87, "DWGrenade", 224, 90, 4, 0.25, 0);
    delay(SECOND + 10);

    // Lower the floor
    ChangeFloor(17, "NFMBGY01");
    floor_lowerbyvalue(17, 16, 64);
    delay(SECOND*2);
}

Script "DoomWare_Server_Minigame6" (void) // Survive (Terry)
{
    if (game_status == STATUS_PHASE3)
        terminate;
    HUDMessage(s:"Survive (Terry)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);

    // Teleport players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 127, true, true);

    // Summon our lord and saviour
    SpawnSpotForced("dickfail", 129, TID_REMOVE, 0);

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*10);

    // Return players back
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, false, true);
}

Script "DoomWare_Server_Minigame7" (void) // Get on the Colored Circle
{
    if (game_status == STATUS_PHASE3)
        terminate;
    int color = random(0, 3);
    int i;
    HUDMessage(s:"Get on the Colored Circle"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 248, true, true);

    // Display the color after a while
    delay(35);
    switch (color)
    {
        case 0:
            SetLineTexture(1, SIDE_FRONT, TEXTURE_BOTTOM, "TRANBLUE");
            break;
        case 1:
            SetLineTexture(1, SIDE_FRONT, TEXTURE_BOTTOM, "TRANGRN");
            break;
        case 2:
            SetLineTexture(1, SIDE_FRONT, TEXTURE_BOTTOM, "TRANRED");
            break;
        case 3:
            SetLineTexture(1, SIDE_FRONT, TEXTURE_BOTTOM, "TRANYEL");
            break;
    }
    delay(SECOND*2);

    // Lower the floors
    for (i=0; i<5; i++)
    {
        if (i == color)
            continue;
        Floor_LowerInstant(111+i, 0, 16);
        Sector_setDamage(111+i, 200000, MOD_LAVA);
        ChangeFloor(111+i, "WFLAVA1");
    }
    delay(70);

    // Return the players
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, false, true);

    // Raise the floors back up
    for (i=0; i<5; i++)
    {
        if (i == color)
            continue;
        Floor_RaiseInstant(111+i, 0, 16);
        Sector_setDamage(111+i, 0, MOD_UNKNOWN);
        switch (i)
        {
            case 0:
                ChangeFloor(111, "TRANBLUE");
                break;
            case 1:
                ChangeFloor(112, "TRANGRN");
                break;
            case 2:
                ChangeFloor(113, "TRANRED");
                break;
            case 3:
                ChangeFloor(114, "TRANYEL");
                break;
            case 4:
                ChangeFloor(115, "PURE");
                break;
        }

    }
    SetLineTexture(1, SIDE_FRONT, TEXTURE_BOTTOM, "PURE");
}

Script "DoomWare_Server_Minigame8" (void) // Go To The Light
{
    if (game_status == STATUS_PHASE3)
        terminate;
    int i;
    hudmessage(s:"Go To The Light"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 206, true, true);

    // Pick a random sector to mark as safe
    int cl = random(0, 11);
    Light_ChangeToValue(116+cl, 256);
    delay(SECOND);

    // Lower the ceiling
    for (i=0; i<13; i++)
        if (i != cl)
            Ceiling_LowerAndCrush(116+i, 20, 100, 1);
    delay(SECOND*3+17);

    // Return players back
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, false, true);

    // Raise the ceiling back up
    for (i=0; i<13; i++)
        if (cl != i)
            Ceiling_RaiseByValue(116+i, 16, 256);
    Light_ChangeToValue(116+cl, 16);
}

Script "DoomWare_Server_Minigame9" (void) // Survive (Banana)
{
    HUDMessage(s:"Survive (Banana)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);

    // Spawn some warnings
    SpawnSpotForced("Avoid", 1, TID_REMOVE, random(0, 359));
    SpawnSpotForced("Avoid", 57, TID_REMOVE, random(0, 359));
    NoiseAlert(TID_PLAYER+random(0, PlayerCount()-1), TID_PLAYER+random(0, PlayerCount()-1));
    delay(SECOND*4);

    // Spawn the banana
    SpawnSpotForced("Banana", TID_REMOVE, TID_REMOVE+1, random(0, 359));
    thing_destroy(TID_REMOVE, 0);
    delay(SECOND*2);
}

Script "DoomWare_Server_Minigame10" (void) // Survive (Spike)
{
    HUDMessage(s:"Survive (Banana)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);

    // Spawn some warnings
    SpawnSpotForced("Avoid", 1, TID_REMOVE+1, random(0, 359));
    SpawnSpotForced("Avoid", 58, TID_REMOVE+1, random(0, 359));
    SpawnSpotForced("Avoid", 59, TID_REMOVE+1, random(0, 359));
    SpawnSpotForced("Avoid", 60, TID_REMOVE+1, random(0, 359));
    SpawnSpotForced("Avoid", 57, TID_REMOVE+1, random(0, 359));
    NoiseAlert(TID_PLAYER+random(0, PlayerCount()-1), TID_PLAYER+random(0, PlayerCount()-1));
    delay(SECOND*3);

    // Spawn the spikes
    SpawnSpotForced("LilithSpikeSpawner", TID_REMOVE+1, TID_REMOVE, random(0, 359));
    thing_destroy(TID_REMOVE+1, 0);
    delay(SECOND + 17);
}

Script "DoomWare_Server_Minigame11" (void) // Survive (Chilli)
{
    HUDMessage(s:"Survive (Chilli)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);

    // Create some warnings
    SpawnSpotForced("Avoid", 1, TID_REMOVE+1, random(0, 359));
    SpawnSpotForced("Avoid", 57, TID_REMOVE+1, random(0, 359));
    NoiseAlert(TID_PLAYER+random(0, PlayerCount()-1), TID_PLAYER+random(0, PlayerCount()-1));
    delay(SECOND*4);

    // Spawn the chilli
    SpawnSpotForced("Chilli", TID_REMOVE+1, TID_REMOVE, random(0, 359));
    thing_destroy(TID_REMOVE+1, 0);
    delay(SECOND + 18);

    // Make the world tremble at the sight of it's spicyness
    Radius_Quake2(1, 5, SECOND*3+21, 0, 512, "DoomWare/IceMove");
    delay(SECOND*3+21);
}

Script "DoomWare_Server_Minigame12" (void) // Survive (Spike Circle)
{
    if (game_status == STATUS_PHASE3)
        terminate;
    HUDMessage(s:"Survive (Spike Circle)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 460, false, true);

    // Activate the rotaty dead spikes of doom
    thing_activate(64);
    thing_activate(65);

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*8);

    // Give the spikes a break
    thing_deactivate(64);
    thing_deactivate(65);

    // Return players back
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, false, true);
}

Script "DoomWare_Server_Minigame13" (void) // Survive (Disappearing Floor)
{
    if (game_status == STATUS_PHASE3)
        terminate;
    int i;
    int dropped = 0;
    int state = 0;
    bool firstdrop = true;
    HUDMessage(s:"Survive (Disappearing Floor)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);

    // We'll make use of the player_answer variables to save up on making more globals
    // Start by filling in a list of all numbers from 1 to 9
    for (i=0; i<9; i++)
        player_answer1[i] = i;

    // Shuffle that array
    for (i=0; i<9; i++)
    {
        int j = random(i, 8);
        int k = player_answer1[i];
        player_answer1[i] = player_answer1[j];
        player_answer1[j] = k;
    }

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 519, true, true);

    // Start the timer
    int time = SECOND*2 + 6*6*8 + (SECOND-4)*8;
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, time);
    time = SECOND*2;

    // Handle the floors
    do
    {
        time--;
        if (time == 0 && dropped != 8)
        {
            switch(state)
            {
                case 4:
                case 2:
                case 0:
                    changefloor(193+player_answer1[dropped], "TRANYEL");
                    SectorSound("doomware/blip", 127);
                    time = 6;
                    if (firstdrop)
                    {
                        // Warn newcomers to avoid the color
                        int sector = player_answer1[dropped];
                        SpawnSpotForced("Avoid", 519, TID_REMOVE, 0);
                        SetActorPosition(TID_REMOVE, GetActorX(TID_REMOVE)-213.0+213.0*(sector%3), GetActorY(TID_REMOVE)+213.0-213.0*(sector/3), GetActorZ(TID_REMOVE), false);
                        Thing_Destroy(TID_REMOVE, false, 0);
                        firstdrop = false;
                    }
                    break;
                case 5:
                case 3:
                case 1:
                    changefloor(193+player_answer1[dropped], "PURE");
                    time = 6;
                    break;
                case 6:
                    SectorSound("doomware/bloop", 127);
                    Floor_LowerInstant(193+player_answer1[dropped], 0, 16);
                    Sector_setDamage(193+player_answer1[dropped], 200000, MOD_LAVA);
                    ChangeFloor(193+player_answer1[dropped], "WFLAVA1");
                    dropped++;
                    time = SECOND-4;
                    break;
            }
            state = (state+1)%7;
        }
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, false, true);

    // Put the floors back to normal
    for (i=0;i<9;i++)
    {
        if (i < dropped)
        {
            Floor_RaiseInstant(193+player_answer1[i], 0, 16);
            Sector_setDamage(193+player_answer1[i], 0, MOD_LAVA);
        }
        ChangeFloor(193+player_answer1[i], "PURE");
    }
}


/*===================================================================================================
                                            DoomWare HUD
===================================================================================================*/

Script "DoomWare_Client_DrawHUD" (int plynumhud) CLIENTSIDE
{
    // Make sure only the person who called it actually sees the HUD
    if (ConsolePlayerNumber() != plynumhud)
        terminate;
        
    int plynum = ConsolePlayerNumber();

    // Open the menu if this is the player's first time joining
    if (GetUserCVar(plynum, "__doomware_firstjoin") == true && PlayerInGame(ConsolePlayerNumber()))
    {
        SetActivatorToPlayer(ConsolePlayerNumber());
        SetUserCVar(plynum, "__doomware_firstjoin", false);
        RequestScriptPuke(999);
    }

    // Initialize the hud
    int w = GetScreenWidth();
    int h = GetScreenHeight();
    if (GetUserCVar(plynum, "doomware_hudscale"))
    {
        w = 800;
        h = 600;
    }
    SetHudSize(w, h, true);
    w = w << 16;
    h = h << 16;

    bool wasAlive = PlayerInGame(ConsolePlayerNumber()); // Prevents 2 of these scripts from running when the player dies
    str lastchat = GetCVarString("__clientsync_highname");
    bool remind_login = true;
    int hud_toppos  = 0.0; 
    int hud_botpos  = h+64.0;
    int hud_spindex = 0;
    int hud_time    = 0;
    int lasttimertime   = -1;
    if (GetCvar("__clientsync_gamestatus") <= STATUS_STARTING)
        hud_toppos = -95.0;

    while (1)
    {
        SetActivatorToPlayer(ConsolePlayerNumber());
        w = GetScreenWidth();
        h = GetScreenHeight();
        if (GetUserCVar(plynum, "doomware_hudscale"))
        {
            w = 800;
            h = 600;
        }
        SetHudSize(w, h, true);
        w = w << 16;
        h = h << 16;

        // Obtain the value of all global variables
        int syncdata_gamestatus = GetCvar("__clientsync_gamestatus");
        int syncdata_gameover = GetCvar("__clientsync_gameover");
        int syncdata_wincondition1 = GetCvar("__clientsync_wincondition1");
        str syncdata_insctruction1 = Unpack_CVar_Array_String("__clientsync_player_instruction1");
        str syncdata_hint = GetCVarString("__clientsync_speeduphint");
        str syncdata_gamesolo = GetCvar("__clientsync_gamesolo");
        str syncdata_roundnum = GetCvar("__clientsync_round");
        str syncdata_canobserve = GetCvar("__clientsync_canobserve");
        str syncdata_timer = GetCvar("__clientsync_minigametimer");
        str syncdata_alive = GetCvar("__clientsync_roundcurrent");
        str syncdata_loggedin = Unpack_CVar_Array("__clientsync_player_loggedin");
        
        // Boss fight stuff
        int syncdata_buuhealth = GetCvar("__clientsync_highscore1");


        /*==============================
                 Center Text
        ==============================*/

        // Move the top of the HUD stuff downwards if game is ready
        if (syncdata_gamestatus >= STATUS_STARTING && hud_toppos < 0)
        {
            // Make some sounds
            if (hud_toppos == -92.0 && GetUserCVar(plynum, "doomware_huddynamic") && GetUserCVar(plynum, "doomware_hudsounds"))
                AmbientSound("DoomWare/HUDMove", 127);

            // Move the hud
            if (GetUserCVar(plynum, "doomware_huddynamic"))
                hud_toppos += 1.0;
            else
                hud_toppos = 0;
        }

        SetFont("DW_FONT4");
        if (syncdata_gamestatus == STATUS_NOTSTARTED) // State that we're waiting for Buu342
        {
            HUDMessage(s:"Waiting for ", s:BUU342NAME; HUDMSG_PLAIN, MSGID_CENTER, CR_PURPLE, w/2, FixedMul(h, 0.25), 1);
        }
        else if (syncdata_gamestatus == STATUS_STARTING) // We're ready to go
        {
            HUDMessage(s:"READY TO DIE?"; HUDMSG_PLAIN, MSGID_CENTER, CR_PURPLE, w/2, FixedMul(h, 0.25), 1);
            HUDMessage(s:""; HUDMSG_PLAIN, MSGID_CENTER2, CR_BLACK, 0, 0, 1);
            HUDMessage(s:""; HUDMSG_PLAIN, MSGID_CENTER3, CR_BLACK, 0, 0, 1);
        }
        else if (syncdata_gamestatus == STATUS_GAMEOVER)
        {
            HUDMessage(s:"Game Over"; HUDMSG_PLAIN, MSGID_CENTER, CR_WHITE, w/2, FixedMul(h, 0.25), 1);
            HUDMessage(s:""; HUDMSG_PLAIN, MSGID_CENTER2, CR_GREEN, 0.5, 0.3, 1);
            HUDMessage(s:""; HUDMSG_PLAIN, MSGID_CENTER3, CR_GREEN, 0.5, 0.3, 1);
            
            // State why the game ended
            switch (syncdata_gameover)
            {
                case OVER_WINNER:
                    HUDMessage(s:"\n\nYou beat ", s:BUU342NAME, s:"!"; HUDMSG_PLAIN, MSGID_CENTER2, CR_RED, w/2, FixedMul(h, 0.25), 0.3, 1);
                    break;
                case OVER_FORCED:
                    HUDMessage(s:"\n\nThe game was forcefully ended"; HUDMSG_PLAIN, MSGID_CENTER2, CR_RED, w/2, FixedMul(h, 0.25), 1);
                    break;
                case OVER_LOST:
                    HUDMessage(s:"\n\nEveryone is dead"; HUDMSG_PLAIN, MSGID_CENTER2, CR_RED, w/2, FixedMul(h, 0.25), 1);
                    break;
            }
        }
        else if (syncdata_gamestatus == STATUS_MINIGAME || (syncdata_gamestatus >= STATUS_PHASE1 && syncdata_gamestatus <= STATUS_PHASE3) )
        {
            HUDMessage(s:syncdata_insctruction1; HUDMSG_PLAIN, MSGID_CENTER, CR_ORANGE, w/2, FixedMul(h, 0.25), 1);
        }
        else
        {
            HUDMessage(s:""; HUDMSG_PLAIN, MSGID_CENTER, CR_BLACK, 0, 0, 1);
        }


        /*==============================
                  Boss Health
        ==============================*/

        // Background
        SetFont("HUD2BOSS");
        HUDMessage(s:"A"; HUDMSG_PLAIN, MSGID_LEADER2, CR_PURPLE, w/2, hud_toppos + 0.1, 1);

        if (syncdata_gamestatus == STATUS_PHASE1 && ThingCount(0, TID_BUU342) > 0)
        {
            SetFont("DW_FONT1");
            HUDMessage(d:syncdata_buuhealth; HUDMSG_PLAIN, MSGID_LEADER, CR_ORANGE, w/2, hud_toppos+46.0, 1);
        }
        else if (syncdata_gamestatus >= STATUS_PHASE2 && ThingCount(0, TID_BUU3422) > 0)
        {
            SetFont("DW_FONT1");
            HUDMessage(d:syncdata_buuhealth; HUDMSG_PLAIN, MSGID_LEADER, CR_ORANGE, w/2, hud_toppos+46.0, 1);
        }
        else
            HUDMessage(s:""; HUDMSG_PLAIN, MSGID_LEADER, CR_ORANGE, w/2, hud_toppos+46.0, 1);
            
        if (GetUserCVar(plynum, "doomware_hudshowbinds"))
        {
            SetFont("DW_FONT3");
            HUDMessage(s:"Press ", k:"+dwmenu", s:" to open the menu"; HUDMSG_PLAIN, MSGID_MENUBIND, CR_ORANGE, w/2, hud_toppos + 68.0 + 0.1, 1);
        }
        else
            HUDMessage(s:""; HUDMSG_PLAIN, MSGID_MENUBIND, CR_YELLOW, 0.0, 0.0, 1);


        /*==============================
                     Alive
        ==============================*/

        int x_start = 64.0;
        if (GetUserCVar(plynum, "doomware_hudscale") && GetUserCVar(plynum, "doomware_hudwide"))
            x_start = -48.0;
        SetFont("HUD1BOSS");
        HUDMessage(s:"A"; HUDMSG_PLAIN, MSGID_SCORE2, CR_PURPLE, x_start + 0.1, hud_toppos + 0.1, 1);
        SetFont("HUD1ALVE");
        HUDMessage(s:"A"; HUDMSG_PLAIN, MSGID_SCORE3, CR_PURPLE, x_start+36.0 + 0.1, hud_toppos + 9.0 + 0.1, 1);
        if (syncdata_gamestatus >= STATUS_PHASE1)
        {
            SetFont("DW_FONT1");
            HUDMessage(d:syncdata_alive; HUDMSG_PLAIN, MSGID_SCORE, CR_YELLOW, x_start+64.0, hud_toppos+46.0, 1);
            HUDMessage(s:""; HUDMSG_PLAIN, MSGID_OBSERVE, CR_CYAN, 0.0, 0.0, 1);
        }
        

        /*==============================
                     Timer
        ==============================*/

        if (GetUserCVar(plynum, "doomware_huddynamic"))
        {
            if (syncdata_timer != TIMER_EARLY && syncdata_timer <= 0 && hud_botpos < h+64.0)
                hud_botpos += 4.0;
            else if (syncdata_timer > 0 && hud_botpos > h)
                hud_botpos -= 4.0;

            // In case people decide to resize the hud midway through the round
            if (hud_botpos < h)
                hud_botpos = h;
        }
        else
        {
            if (syncdata_timer > 0)
                hud_botpos = h;
            else
                hud_botpos = h+64.0;
        }

        SetHudSize(w>>16, h>>16, false);
        if (syncdata_timer == TIMER_EARLY)
            SetFont("HUDCLK2");
        else
            SetFont("HUDCLK1");

        if (hud_botpos != h+64.0)
            HUDMessage(s:"a"; HUDMSG_PLAIN | HUDMSG_LAYER_UNDERHUD, MSGID_TIMER2, CR_GREEN, w/2, hud_botpos + 0.2, 1);
        else
            HUDMessage(s:""; HUDMSG_PLAIN, MSGID_TIMER2, CR_GREEN, 0.0, 0.0, 1);
        SetFont("DW_FONT2");
        int time = ((FixedDiv(syncdata_timer, SECOND)*100)&0xFFFF0000) >> 16;
        int oldtime = ((FixedDiv(lasttimertime, SECOND)*100)&0xFFFF0000) >> 16;
        int tens = time/1000;
        int ones = (time/100)%10;
        int oldones = (oldtime/100)%10;
        int tenths = (time/10)%10;
        int hundredths = time%10;
        if (syncdata_timer > 0)
        {
            HUDMessage(d:tens, d:ones, s:":", d:tenths, d:hundredths; HUDMSG_PLAIN | HUDMSG_LAYER_UNDERHUD, MSGID_TIMER, CR_RED, w/2, hud_botpos - 16.0 + 0.2, 1);

            // Play some ticking sounds when there's 3, 2, 1 seconds left
            if (GetUserCvar(plynum, "doomware_hudsounds") && tens == 0)
            {
                if (ones == 2 && oldones == 3)
                    AmbientSound("DoomWare/Clock3", 127);
                if (ones == 1 && oldones == 2)
                    AmbientSound("DoomWare/Clock2", 127);
                if (ones == 0 && oldones == 1)
                    AmbientSound("DoomWare/Clock1", 127);
            }
        }
        else
            HUDMessage(s:""; HUDMSG_PLAIN | HUDMSG_LAYER_UNDERHUD, MSGID_TIMER, CR_RED, w/2, hud_botpos + 0.2, 1);


        /*==============================
                    Warnings
        ==============================*/

        SetFont("DW_FONT5");
        if (PlayerCount() > MAXPLAYERS)// Warn that we have too many players
            HUDMessage(s:"WARNING! TOO MANY PLAYERS! MAX: ", d:MAXPLAYERS; HUDMSG_PLAIN, MSGID_WARNING, CR_RED, w/2, h + 0.2, 1);
        else if (remind_login == true && GetUserCVar(plynum, "doomware_loginwarn")) // Remind players to login
        {
            HUDMessage(s:"You are not logged in, your stats will not be tracked!\nPress ", k:"+use", s:" to dismiss this message."; HUDMSG_PLAIN, MSGID_WARNING, CR_RED, w/2 + 0.4, h + 0.2, 1);

            // Allow players to dismiss that message
            if (GetPlayerInput(plynum, MODINPUT_BUTTONS) & BT_USE || syncdata_loggedin)
                remind_login = false;
        }
        else
            HUDMessage(s:""; HUDMSG_PLAIN, MSGID_WARNING, CR_RED, w/2, h + 0.2, 1);
        SetHudSize(w>>16, h>>16, true);

        lasttimertime = syncdata_timer;

        if (PlayerInGame(plynum) || (PlayerIsSpectator(plynum) && !wasAlive))
            delay(1);
        else
            break;
    }
}

script "DoomWare_FakeMessage" (int message, int sound) CLIENTSIDE // Log() doesn't work unless it's clientsided, thus this script...
{
    Log(s:message);
    switch(sound)
    {
        case CHATSOUND_MSG:
            AmbientSound("misc/chat", 127);
            break;
        case CHATSOUND_CON:
            AmbientSound("zandronum/connect", 127);
            break;
        case CHATSOUND_NONE:
            break;
    }
}


/*===================================================================================================
                                        Highscore table
===================================================================================================*/

// This is using a number rather than a named script to make binding the puke easier
Script 257 (void) NET
{
    // Not used in boss arena
}


/*===================================================================================================
                                        DoomWare Menu
===================================================================================================*/

Script 999 (void) NET // Client - Menu toggle
{
   // Toggle the scoreboard visibility
    if (player_viewingmenu[PlayerNumber()] == false)
    {
        player_viewingmenu[PlayerNumber()] = true;
        SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
    }
    else
    {
        player_viewingmenu[PlayerNumber()] = false;

        // Unfreeze the player (as long as the game lets them)
        if (!player_frozen[PlayerNumber()])
            SetPlayerProperty(1, 0, PROP_TOTALLYFROZEN);
    }
}

Script "DoomWare_Client_DrawMenu" (void) CLIENTSIDE
{
    // Make sure only the person who called it actually opens the menu
    if (ConsolePlayerNumber() != PlayerNumber())
        terminate;

    SetActivator(TID_PLAYER+ConsolePlayerNumber());

    // Initialize a bunch of variables
    int i;
    int x = GetScreenWidth() / 2;
    int y = GetScreenHeight() / 2;
    int x_sensitivity = 1.0;
    int y_sensitivity = 1.0;
    int dx;
    int dy;
    int tab = 1;
    int plynum = ConsolePlayerNumber();
    bool menu_wasopen = false;
    
    // Initialize global top stats variables
    int topstat_wins = GetCVar("__clientsync_stats_t_wins");
    int topstat_score = GetCVar("__clientsync_stats_t_points");
    int topstat_1ups = GetCVar("__clientsync_stats_t_1ups");
    int topstat_deaths = GetCVar("__clientsync_stats_t_deaths");
    int topstat_bosskills = GetCVar("__clientsync_stats_t_bosses");
    int topstat_g_wins = GetCVar("__clientsync_stats_g_wins");
    int topstat_g_score = GetCVar("__clientsync_stats_g_points");
    int topstat_g_1ups = GetCVar("__clientsync_stats_g_1ups");
    int topstat_g_deaths = GetCVar("__clientsync_stats_g_deaths");
    int topstat_g_bosskills = GetCVar("__clientsync_stats_g_bosses");
    str topstat_n_wins = GetCVarString("__clientsync_stats_n_wins");
    str topstat_n_score = GetCVarString("__clientsync_stats_n_points");
    str topstat_n_1ups = GetCVarString("__clientsync_stats_n_1ups");
    str topstat_n_deaths = GetCVarString("__clientsync_stats_n_deaths");
    str topstat_n_bosskills = GetCVarString("__clientsync_stats_n_bosses");

    // Start the menu drawing loop
    while (1)
    {
        int menuopen = Unpack_CVar_Array("__clientsync_player_viewingmenu");
        if (menuopen == 1)
        {
            menu_wasopen = true;
            bool changedtab = false;
            int w = GetScreenWidth();
            int h = GetScreenHeight();
            bool moving_mouse = true;

            if (GetUserCVar(plynum, "doomware_hudscale"))
            {
                w = 800;
                h = 600;
            }
            SetHUDSize(w, h, true);

            w = w << 16;
            h = h << 16;

            // Get input
            dx = FixedMul(x_sensitivity, GetPlayerInput(plynum, INPUT_YAW)) / 24;
            dy = FixedMul(y_sensitivity, GetPlayerInput(plynum, INPUT_PITCH)) / 12;
            if (dy == 0)
            {
                dy = -GetPlayerInput(plynum, INPUT_FORWARDMOVE) / 1200;
                moving_mouse = false;
            }

            // Move the mouse
            x -= dx;
            if (moving_mouse && !GetCVar("invertmouse"))
                y -= dy;
            else
                y += dy;

            // Prevent the mouse from escaping
            if (x < 0)
                x = 0;
            if (x > w>>16)
                x = w>>16;
            if (y < 0)
                y = 0;
            if (y > h>>16)
                y = h>>16;

            // Allow changing tabs
            if ((y <= (h/2-220.0)>>16 && y >= (h/2-240.0)>>16) && (x >= (w/2 - 318.00)>>16 && x <= (w/2 + 318.00)>>16))
            {
                int input = GetPlayerInput(plynum, INPUT_BUTTONS);
                int oldinput = GetPlayerInput(plynum, INPUT_OLDBUTTONS);
                if (!(oldinput & (BT_USE|BT_ATTACK)) && (input & (BT_USE|BT_ATTACK)))
                {
                    int oldtab = tab;
                    tab = 1+((x-(((w/2)-318.0)>>16))/106);
                    if (tab != oldtab)
                    {
                        changedtab = true;
                        if (GetUserCVar(plynum, "doomware_hudsounds"))
                            AmbientSound("DoomWare/MenuTab", 127);
                    }

                    if (tab == 6)
                        RequestScriptPuke(999);
                }
            }

            // Draw the mouse
            SetFont("CURSOR");
            HUDMessage(s:"A"; HUDMSG_PLAIN, MSGID_CURSOR, CR_WHITE, (x<<16)+2.0+0.1, (y<<16)+2.0+0.1, 1);

            // Handle each tab
            switch(tab)
            {
                case 1:
                    SetFont("DW_FONT3");
                    HUDMessage(s:WELCOME; HUDMSG_PLAIN, MSGID_MELEM, CR_WHITE, w/2-312.0 + 0.1, h/2 + 28.0 + 0.1, 1);

                    // Clear unused elements
                    if (changedtab)
                        for (i=1; i<MELEMENTS; i++)
                            HUDMessage(s:""; HUDMSG_PLAIN, MSGID_MELEM+i, CR_WHITE, 0.0, 0.0, 1);
                    break;
                case 2:
                    SetFont("DW_FONT3");
                    HUDMessage(s:"                                    ", s:CHANGES;
                        HUDMSG_PLAIN, MSGID_MELEM, CR_WHITE, w/2-312.0 + 0.1, h/2 - 200.0 + 0.1, 1);

                    // Clear unused elements
                    if (changedtab)
                        for (i=1; i<MELEMENTS; i++)
                            HUDMessage(s:""; HUDMSG_PLAIN, MSGID_MELEM+i, CR_WHITE, 0.0, 0.0, 1);
                    break;
                case 3:
                    SetFont("DW_FONT3");
                    int syncdata_loggedin = Unpack_CVar_Array("__clientsync_player_loggedin");
                    
                    // Print global and top stats
                    HUDMessage(s:"\ckGlobal Stats\c-\n\n",
                        s:"Games Played\n", d:topstat_g_wins,
                        s:"\n\nPoints Given\n", d:topstat_g_score,
                        s:"\n\n1-Ups Collected\n", d:topstat_g_1ups,
                        s:"\n\nTotal Deaths\n", d:topstat_g_deaths,
                        s:"\n\nBosses Defeated\n", d:topstat_g_bosskills,
                        s:"\n\n\n\ckThese stats update\n\ckon map start\c-"
                        ; HUDMSG_PLAIN, MSGID_MELEM+2, CR_WHITE, w/2-220.0 + 0.4, h/2 - 200.0 + 0.1, 1);
                    HUDMessage(s:"\ckTop Stats\c-\n\n",
                        s:"Game Wins\n", s:topstat_n_wins, s:" (", d:topstat_wins, s:")",
                        s:"\n\nPoints Received\n", s:topstat_n_score, s:" (", d:topstat_score, s:")",
                        s:"\n\n1-Ups Collected\n", s:topstat_n_1ups, s:" (", d:topstat_1ups, s:")",
                        s:"\n\nTotal Deaths\n", s:topstat_n_deaths, s:" (", d:topstat_deaths, s:")",
                        s:"\n\nBosses Defeated\n", s:topstat_n_bosskills, s:" (", d:topstat_bosskills, s:")",
                        s:"\n\n\n\ckThese stats update\n\ckon map start\c-"
                        ; HUDMSG_PLAIN, MSGID_MELEM+1, CR_WHITE, w/2+220.0 + 0.4, h/2 - 200.0 + 0.1, 1);
                    
                    // Display player stats based on whether they're logged in or not
                    if (syncdata_loggedin >= 1)
                    {
                        int syncdata_score = Unpack_CVar_Array("__clientsync_player_score");
                        int syncdata_totalpoints = Unpack_CVar_Array("__clientsync_player_datascore");
                        int syncdata_wins = Unpack_CVar_Array("__clientsync_player_datawins");
                        int syncdata_deaths = Unpack_CVar_Array("__clientsync_player_datadeaths");
                        int syncdata_1ups = Unpack_CVar_Array("__clientsync_player_data1ups");
                        int syncdata_role = Unpack_CVar_Array("__clientsync_player_dataroles");
                        int syncdata_achieve = Unpack_CVar_Array("__clientsync_player_dataachieve");
                        int syncdata_bosskills = Unpack_CVar_Array("__clientsync_player_databosskills");
                        str role;
                        switch (syncdata_role)
                        {
                            case ROLE_NONE:
                                role = "None";
                                break;
                            case ROLE_REGULAR:
                                role = "\cgVeteran\c-";
                                break;
                            case ROLE_ACHIEVER:
                                role = "\cnOver Achiever\c-";
                                break;
                            case ROLE_BETA:
                                role = "\cfBeta Tester\c-";
                                break;
                            case ROLE_BUU342:
                                role = "\cqG\csO\cdD";
                                break;
                        }
                        HUDMessage(s:"\ckYour Stats\c-\n\n",
                            s:"Game Wins\n", d:syncdata_wins,
                            s:"\n\nPoints Received\n", d:(syncdata_score + syncdata_totalpoints),
                            s:"\n\n1-Ups Collected\n", d:syncdata_1ups,
                            s:"\n\nTotal Deaths\n", d:syncdata_deaths,
                            s:"\n\nBosses Defeated\n", d:syncdata_bosskills,
                            s:"\n\nRank\n", s:role
                            ; HUDMSG_PLAIN, MSGID_MELEM, CR_WHITE, w/2 + 0.4, h/2 - 200.0 + 0.1, 1);

                        Handle_Menu_Achievement(syncdata_achieve, ACHIEVE_ID_1WIN,       ACHIEVE_NAME_1WIN,       ACHIEVE_DESC_1WIN, "ACH_WINO", plynum, x, y, w, h);
                        Handle_Menu_Achievement(syncdata_achieve, ACHIEVE_ID_10WIN,      ACHIEVE_NAME_10WIN,      ACHIEVE_DESC_10WIN, "ACH_WINT", plynum, x, y, w, h);
                        Handle_Menu_Achievement(syncdata_achieve, ACHIEVE_ID_50WIN,      ACHIEVE_NAME_50WIN,      ACHIEVE_DESC_50WIN, "ACH_WINH", plynum, x, y, w, h);
                        Handle_Menu_Achievement(syncdata_achieve, ACHIEVE_ID_25POINTS,   ACHIEVE_NAME_25POINTS,   ACHIEVE_DESC_25POINTS, "ACH_25PN", plynum, x, y, w, h);
                        Handle_Menu_Achievement(syncdata_achieve, ACHIEVE_ID_1v1WIN,     ACHIEVE_NAME_1v1WIN,     ACHIEVE_DESC_1v1WIN, "ACH_1V1W", plynum, x, y, w, h);
                        Handle_Menu_Achievement(syncdata_achieve, ACHIEVE_ID_MVMWIN,     ACHIEVE_NAME_MVMWIN,     ACHIEVE_DESC_MVMWIN, "ACH_MVMW", plynum, x, y, w, h);
                        Handle_Menu_Achievement(syncdata_achieve, ACHIEVE_ID_501UPS,     ACHIEVE_NAME_501UPS,     ACHIEVE_DESC_501UPS, "ACH_1UPF", plynum, x, y, w, h);
                        Handle_Menu_Achievement(syncdata_achieve, ACHIEVE_ID_100DEATH,   ACHIEVE_NAME_100DEATH,   ACHIEVE_DESC_100DEATH, "ACH_DEDH", plynum, x, y, w, h);
                        Handle_Menu_Achievement(syncdata_achieve, ACHIEVE_ID_300POINTS,  ACHIEVE_NAME_300POINTS,  ACHIEVE_DESC_300POINTS, "ACH_300P", plynum, x, y, w, h);
                        Handle_Menu_Achievement(syncdata_achieve, ACHIEVE_ID_JUMP,       ACHIEVE_NAME_JUMP,       ACHIEVE_DESC_JUMP, "ACH_JUMP", plynum, x, y, w, h);
                        Handle_Menu_Achievement(syncdata_achieve, ACHIEVE_ID_LONGJUMP,   ACHIEVE_NAME_LONGJUMP,   ACHIEVE_DESC_LONGJUMP, "ACH_1UPS", plynum, x, y, w, h);
                        Handle_Menu_Achievement(syncdata_achieve, ACHIEVE_ID_3FRAGS,     ACHIEVE_NAME_3FRAGS,     ACHIEVE_DESC_3FRAGS, "ACH_3FRG", plynum, x, y, w, h);
                        Handle_Menu_Achievement(syncdata_achieve, ACHIEVE_ID_BULLETHELL, ACHIEVE_NAME_BULLETHELL, ACHIEVE_DESC_BULLETHELL, "ACH_BULL", plynum, x, y, w, h);
                        Handle_Menu_Achievement(syncdata_achieve, ACHIEVE_ID_KARTWIN,    ACHIEVE_NAME_KARTWIN,    ACHIEVE_DESC_KARTWIN, "ACH_KART", plynum, x, y, w, h);
                        Handle_Menu_Achievement(syncdata_achieve, ACHIEVE_ID_ATST,       ACHIEVE_NAME_ATST,       ACHIEVE_DESC_ATST, "ACH_ATST", plynum, x, y, w, h);
                        Handle_Menu_Achievement(syncdata_achieve, ACHIEVE_ID_WAIFU,      ACHIEVE_NAME_WAIFU,     ACHIEVE_DESC_WAIFU, "ACH_WAIF", plynum, x, y, w, h);
                        Handle_Menu_Achievement(syncdata_achieve, ACHIEVE_ID_BOSS,       ACHIEVE_NAME_BOSS,       ACHIEVE_DESC_BOSS, "ACH_BOSS", plynum, x, y, w, h);
                        Handle_Menu_Achievement(syncdata_achieve, ACHIEVE_ID_FULLSERVER, ACHIEVE_NAME_FULLSERVER, ACHIEVE_DESC_FULLSERVER, "ACH_FULL", plynum, x, y, w, h);
                    }
                    else
                    {
                        HUDMessage(s:"\ckYour Stats\n\n", s:LOGIN; HUDMSG_PLAIN, MSGID_MELEM, CR_RED, w/2 + 0.4, h/2 - 200.0 + 0.1, 1);

                        // Clear unused elements
                        if (changedtab)
                            for (i=3; i<MELEMENTS; i++)
                                HUDMessage(s:""; HUDMSG_PLAIN, MSGID_MELEM+i, CR_WHITE, 0.0, 0.0, 1);
                    }
                    break;
                case 4:
                    SetFont("DW_FONT3");
                    HUDMessage(s:"Click the switch to toggle the console command"; HUDMSG_PLAIN, MSGID_MELEM, CR_WHITE, w/2 + 0.0, h/2 - 200.0 + 0.1, 1);
                    Handle_Menu_Option(0, "doomware_hudscale", "Force large HUD", plynum, x, y, w, h);
                    Handle_Menu_Option(1, "doomware_hudwide", "Widescreen large HUD", plynum, x, y, w, h);
                    Handle_Menu_Option(2, "doomware_hudsounds", "Allow the HUD to emit sound effects", plynum, x, y, w, h);
                    Handle_Menu_Option(3, "doomware_huddynamic", "Allow the HUD to move dynamically", plynum, x, y, w, h);
                    Handle_Menu_Option(4, "doomware_hudshowbinds", "Show your binds on the game HUD", plynum, x, y, w, h);
                    Handle_Menu_Option(5, "doomware_loginwarn", "Warn you that you're not logged in", plynum, x, y, w, h);
                    Handle_Menu_Option(6, "doomware_music", "Enable DoomWare music (such as winning/losing)", plynum, x, y, w, h);
                    Handle_Menu_Option(7, "doomware_invertfly", "Invert Y axis on flight controls", plynum, x, y, w, h);

                    // Clear unused elements
                    if (changedtab)
                        for (i=1; i<MELEMENTS; i++)
                            HUDMessage(s:""; HUDMSG_PLAIN, MSGID_MELEM+i, CR_WHITE, 0.0, 0.0, 1);

                    //Handle_Menu_Option(6, "doomware_joinmenu", "Open this menu upon connecting to a game", PlayerNumber(), x, y, w, h);
                    break;
                case 5:
                    SetFont("DW_FONT3");
                    HUDMessage(s:"\cgA wad by \cqB\csu\cdu\cq3\cs4\cd2\c-\n\n",
                        s:"Based on the Nintendo game series WarioWare, all rights reserved\n",
                        s:"Credit for all used assets are provided within the wad's data\n\n",
                        s:"\cvPlease report any bugs you encounter to:\n",
                        s:"\cvbuu342@hotmail.com\n",
                        s:"\cvAlternatively, bugs can be reported on the Doomworld or Zandronum\n",
                        s:"\cvDoomWare thread.\n",
                        s:"\cvOr use the GitHub page!\n",
                        s:"https://github.com/buu342/ACS-DoomWare"; HUDMSG_PLAIN, MSGID_MELEM, CR_WHITE, w/2 + 0.4, h/2 + 0.0, 1);

                    // Clear unused elements
                    if (changedtab)
                        for (i=1; i<MELEMENTS; i++)
                            HUDMessage(s:""; HUDMSG_PLAIN, MSGID_MELEM+i, CR_WHITE, 0.0, 0.0, 1);
                    break;
            }

            // Draw the background
            SetFont(StrParam(s:"MENU", d:tab));
            HUDMessage(s:"A"; HUDMSG_PLAIN, MSGID_MENU, CR_WHITE, w/2+0.0, h/2+0.0, 1);
        }
        else
        {
            if (menu_wasopen)
            {
                for (i=0; i<MELEMENTS; i++)
                    HUDMessage(s:""; HUDMSG_PLAIN, MSGID_MELEM+i, CR_WHITE, 0.0, 0.0, 1);
                HUDMessage(s:""; HUDMSG_PLAIN, MSGID_MENU, CR_WHITE, 0.0, 0.0, 0);
                HUDMessage(s:""; HUDMSG_PLAIN, MSGID_CURSOR, CR_WHITE, 0.0, 0.0, 0);
                menu_wasopen = false;
                tab = 1;
            }
        }

        // Restart the script to keep drawing the menu
        delay(1);

        if (!PlayerInGame(plynum))
            terminate;
    }
}

function void Handle_Menu_Option(int number, str command, str desc, int plynum, int mouse_x, int mouse_y, int w, int h)
{
    int x = w/2-312.0 + 0.1;
    int y = h/2-180.0 + (number)*48.0 + 0.1;
    int oldbutton = GetPlayerInput(plynum, INPUT_OLDBUTTONS);
    int button = GetPlayerInput(plynum, INPUT_BUTTONS);

    // Draw the button
    if (GetUserCVar(plynum, command))
        SetFont("SOTESCHY");
    else
        SetFont("SOTESCHN");
    HUDMessage(s:"A"; HUDMSG_PLAIN, MSGID_MELEM+(number+1)*2, CR_WHITE, x, y, 1);
    SetFont("DW_FONT3");
    HUDMessage(s:command, s:"\n", s:desc; HUDMSG_PLAIN, MSGID_MELEM+1+(number+1)*2, CR_GOLD, x + 48.0, y + 5.0, 1);

    // Handle the button clicking
    if ((mouse_x >= x>>16 && mouse_x <= (x+32.0)>>16) && (mouse_y >= y>>16 && mouse_y <= (y+32.0)>>16)) // If the mouse is within the button's bounds
        if (!oldbutton & (BT_ATTACK|BT_USE) && button & (BT_ATTACK|BT_USE)) // If the player has pressed the button
        {
            // toggle the command
            SetUserCVar(plynum, command, !GetUserCVar(plynum, command));

            // Play a sound
            if (GetUserCVar(plynum, "doomware_hudsounds"))
                AmbientSound("DoomWare/MenuSwitch", 127);
        }
}

function void Handle_Menu_Achievement(int achieve_data, int number, str name, str desc, str sprite, int plynum, int mouse_x, int mouse_y, int w, int h)
{
    int x = w/2-312.0 + (number%9)*70.0 + 0.1;
    int y = h/2+98.0 + (number/9)*70.0 + 0.1;
    int oldbutton = GetPlayerInput(plynum, INPUT_OLDBUTTONS);
    int button = GetPlayerInput(plynum, INPUT_BUTTONS);
    int unlocked = achieve_data & (1<<(number));

    // Show the achievement sprite if unlocked
    if (unlocked)
        SetFont(sprite);
    else
        SetFont("ACH_NONE");
    HUDMessage(s:"A"; HUDMSG_PLAIN, MSGID_MELEM+2+number*2, CR_WHITE, x, y, 1);
    SetFont("DW_FONT3");

    // Handle the button clicking
    if ((mouse_x >= x>>16 && mouse_x <= (x+64.0)>>16) && (mouse_y >= y>>16 && mouse_y <= (y+64.0)>>16)) // If the mouse is within the button's bounds
    {
        if (unlocked)
            HUDMessage(s:name, s:"\n", s:desc; HUDMSG_PLAIN, MSGID_MELEM+2+number*2+1, CR_GOLD, w/2 + 0.4, h/2+72.0, 1);
        else
            HUDMessage(s:"???", s:"\n", s:"This achievement is locked"; HUDMSG_PLAIN, MSGID_MELEM+2+number*2+1, CR_RED, w/2 + 0.4, h/2+72.0, 1);
    }
    else
    {
        HUDMessage(s:""; HUDMSG_PLAIN, MSGID_MELEM+2+number*2+1, CR_WHITE, w/2 + 0.0, h/2+64.0, 1);
    }
}

function void Give_Achievement(int plynum, int achievement) // Gives the player an achievement
{
	int active = ActivatorTID();
	str name = "";
	
	if (!PlayerInGame(plynum))
		return;
	
    if ((PlayerIsLoggedIn(plynum) || GetCVar("doomware_unsafedb")) && game_status != STATUS_NOTSTARTED && !game_solo && (data_achieve[plynum] & (1<<achievement)) == 0)
    {
        data_achieve[plynum] = data_achieve[plynum] | (1<<achievement);
        switch(achievement)
        {
            case ACHIEVE_ID_1WIN:       name = ACHIEVE_NAME_1WIN; Break;
            case ACHIEVE_ID_10WIN:      name = ACHIEVE_NAME_10WIN; Break;
            case ACHIEVE_ID_50WIN:      name = ACHIEVE_NAME_50WIN; Break;
            case ACHIEVE_ID_25POINTS:   name = ACHIEVE_NAME_25POINTS; Break;
            case ACHIEVE_ID_1V1WIN:     name = ACHIEVE_NAME_1V1WIN; Break;
            case ACHIEVE_ID_MVMWIN:     name = ACHIEVE_NAME_MVMWIN; Break;
            case ACHIEVE_ID_501UPS:     name = ACHIEVE_NAME_501UPS; Break;
            case ACHIEVE_ID_100DEATH:   name = ACHIEVE_NAME_100DEATH; Break;
            case ACHIEVE_ID_300POINTS:  name = ACHIEVE_NAME_300POINTS; Break;
            case ACHIEVE_ID_JUMP:       name = ACHIEVE_NAME_JUMP; Break;
            case ACHIEVE_ID_LONGJUMP:   name = ACHIEVE_NAME_LONGJUMP; Break;
            case ACHIEVE_ID_3FRAGS:     name = ACHIEVE_NAME_3FRAGS; Break;
            case ACHIEVE_ID_BULLETHELL: name = ACHIEVE_NAME_BULLETHELL; Break;
            case ACHIEVE_ID_KARTWIN:    name = ACHIEVE_NAME_KARTWIN; Break;
            case ACHIEVE_ID_ATST:       name = ACHIEVE_NAME_ATST; Break;
            case ACHIEVE_ID_WAIFU:      name = ACHIEVE_NAME_WAIFU; Break;
            case ACHIEVE_ID_BOSS:       name = ACHIEVE_NAME_BOSS; Break;
            case ACHIEVE_ID_FULLSERVER: name = ACHIEVE_NAME_FULLSERVER; Break;
            default: break;
        }
        ACS_NamedExecuteAlways("DoomWare_AchievementLog", 0, plynum, name); // We can't do Log() serverside, so this is a workaround

        // Notify the achievement got received
        SetActivatorToPlayer(plynum);
        SpawnSpotForced("ConfettiEffect", TID_PLAYER+plynum, 0, 0);
        SetFont("DW_FONT1");
        if (game_status != STATUS_NOTSTARTED && name != "")
        {
            int w = GetScreenWidth();
            int h = GetScreenHeight();
            str hudsprite;
            if (GetUserCVar(PlayerNumber(), "doomware_hudscale"))
            {
                w = 800;
                h = 600;
            }
            SetHudSize(w, h, true);
            w = w << 16;
            h = h << 16;
            HUDMessage(s:"Achievement Unlocked!\n", s:name; HUDMSG_FADEOUT, MSGID_ACHIEVEM, CR_CYAN, w/2 + 0.4, FixedMul(h, 0.8) + 0.2, 1.0, 1.0);
            if (GetUserCvar(PlayerNumber(), "doomware_hudsounds"))
                LocalAmbientSound("DoomWare/Achievement", 127);
        }
		
		// Reset the activator to prevent problems
		if (active < TID_PLAYER)
			SetActivator(0, AAPTR_NULL);
		else
			SetActivatorToPlayer(active-TID_PLAYER);
        
        // Give the achiever role if this person unlocked all the achievements
        if (data_achieve[plynum] == 0x3FFFF && data_role[plynum] != ROLE_BETA && data_role[plynum] != ROLE_BUU342)
            data_role[plynum] = ROLE_ACHIEVER;
    }
}

/*===================================================================================================
                                            Hats
===================================================================================================*/

#define BETATESTERSIZE 17
str BetaTesterList[BETATESTERSIZE];
function bool IsBetaTester(int plynum) // Returns true/false if the player is a beta tester
{
    BetaTesterList[0] = "asriel";
    BetaTesterList[1] = "margsabl";
    BetaTesterList[2] = "marcaek";
    BetaTesterList[3] = "doomer9000";
    BetaTesterList[4] = "deanyktru";
    BetaTesterList[5] = "dsparil";
    BetaTesterList[6] = "flambeau";
    BetaTesterList[7] = "dastan";
    BetaTesterList[8] = "combinebobnt";
	BetaTesterList[9] = "kaapeli47";
	BetaTesterList[10] = "metaldanny";
	BetaTesterList[11] = "oremex";
	BetaTesterList[12] = "danielcs";
	BetaTesterList[13] = "haispawner";
	BetaTesterList[14] = "daddykrabs";
	BetaTesterList[15] = "obspogon";
    BetaTesterList[16] = "bridgeburner";

    for (int i=0; i<BETATESTERSIZE; i++)
        if (!StrIcmp(BetaTesterList[i], GetPlayerAccountName(plynum)))
            return true;
    return false;
}

Script "DoomWare_Server_Hats" (void)
{
    int z;

    // Special Hats
    for (int i=0; i<MAXPLAYERS; i++)
    {
        // If the player left the game (or is dead), kill the hat
        if ((ThingCount(0, TID_HATROLE+i) > 0 && data_role[i] <= ROLE_NONE) || (GetActorProperty(TID_PLAYER+i, APROP_Health) <= 0) || (!PlayerInGame(i)))
            Thing_Remove(TID_HATROLE+i);

		// Check if the player logged in recently
        if (data_role[i] == ROLE_UNLOGGED && (PlayerIsLoggedIn(i) || GetCVar("doomware_unsafedb")))
		{
            Load_PlayerDB(i);
			
			// Give a beta tester a role if they don't have one
			if (data_role[i] != ROLE_BETA && IsBetaTester(i))
				data_role[i] = ROLE_BETA;
		}

        // If they don't have a worthy role (or are dead), ignore them
        if (data_role[i] <= ROLE_NONE || (GetActorProperty(TID_PLAYER+i, APROP_Health) <= 0))
            continue;

		// Spawn the hat if it doesn't exist yet
		if (ThingCount(0, TID_HATROLE+i) == 0)
		{
			switch (data_role[i])
			{
				case ROLE_BETA:
					SpawnSpotForced("BetaHat", 1, TID_HATROLE+i, 0);
					break;
				case ROLE_REGULAR:
					SpawnSpotForced("RegularHat", 1, TID_HATROLE+i, 0);
					break;
				case ROLE_ACHIEVER:
					SpawnSpotForced("AchieverHat", 1, TID_HATROLE+i, 0);
					break;
			}
		}
			
		// Position the hat if it exists
		if (ThingCount(0, TID_HATROLE+i) != 0)
			SetActorPosition(TID_HATROLE+i, GetActorX(TID_PLAYER+i), GetActorY(TID_PLAYER+i), GetActorZ(TID_PLAYER+i)+64.0, 0);
    }
    
    // Handle Buu342's hat
    if (game_status <= STATUS_PHASE1 && ThingCount(0, TID_BUU342) == 1)
    {
        if (ThingCount(0, TID_HATROLE+MAXPLAYERS) == 0)
            SpawnSpotForced("Buu342Hat", 1, TID_HATROLE+MAXPLAYERS, 0);
        SetActorPosition(TID_HATROLE+MAXPLAYERS, GetActorX(TID_BUU342), GetActorY(TID_BUU342), GetActorZ(TID_BUU342)+64.0, 0);
    }
    else
    {
        if (ThingCount(0, TID_HATROLE+MAXPLAYERS) == 1)
            Thing_Remove(TID_HATROLE+MAXPLAYERS);
    }

    // Restart the script
    delay(1);
    restart;
}


/*===================================================================================================
                                        Console Commands
===================================================================================================*/

Script "DoomWare_Console_ListPlayers" (void)
{
    for (int i=0; i<MAXPLAYERS; i++)
        if (playerInGame(i))
            HUDMessage(d:i, s:" - ", n:i+1; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
}

Script "DoomWare_Console_AssignRole" (int ply, int role)
{
    data_role[ply] = role;
    HUDMessage(s:"Player ", n:ply+1, s:" was given role ", d:role; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
}

Script "DoomWare_Console_ForceEnd" (void)
{
    game_over = OVER_FORCED;
}


/*===================================================================================================
                                          Miscellaneous
===================================================================================================*/

int linealpha[4];
Script 255 (int lineid, int angle) // Arena wall bumping
{
    int linealpha_max = 75;
    int linealpha_speed = 5;
    int lineslot = 255-lineid;
    
    // Push the player
    ThrustThing(angle, 8);
    
    // If there's no other script running
    if (linealpha[lineslot] == 0)
    {
        // Change the line to FIREBLU
        linealpha[lineslot] = linealpha_max;
        setlinetexture(lineid, SIDE_FRONT, TEXTURE_MIDDLE, "FIREBLU1");
        setlinetexture(lineid, SIDE_BACK, TEXTURE_MIDDLE, "FIREBLU1");
        
        // Decrease the line alpha over time
        while (linealpha[lineslot] > 0)
        {
            linealpha[lineslot] = linealpha[lineslot]-linealpha_speed;
            TranslucentLine(lineid, linealpha[lineslot], 0);
            delay(1);
        }
        
        // Remove the texture entirely
        setlinetexture(lineid, SIDE_FRONT, TEXTURE_MIDDLE, "-");
        setlinetexture(lineid, SIDE_BACK, TEXTURE_MIDDLE, "-");    
        linealpha[lineslot] = 0;
    }
    else
        linealpha[lineslot] = linealpha_max;
}

Script 666 (void) // Create a death laser on a random player
{
    int i;
    
    // Grab the array of alive player
    for (i=0; i<MAXPLAYERS; i++)
        player_answer1[i] = (PlayerInGame(i) && PlayerIsSpectator(i) == 0);
        
    // Shuffle it
    for (i=MAXPLAYERS-1; i>0; i--)
    {
        int j = random(i, MAXPLAYERS-1);
        int k = player_answer1[i];
        player_answer1[i] = player_answer1[j];
        player_answer1[j] = k;
    }
    
    // Iterate until we found someone alive
    for (i=0; i<MAXPLAYERS; i++)
        if (player_answer1[i])
            break;
    
    // Spawn a death laser
    SpawnSpotForced("Buu342Laser", TID_PLAYER+i, 0, 0);
}

int curbosspos1 = 28;
int curbosspos2 = 37;
Script 667 (void) // Make the boss change position
{
    int direction = random(0, 1); // 0 is clockwise, 1 is anti
    int target = 0;
    
    // Pick which path to take
    if (direction == 0)
    {
        target = curbosspos1;
        switch (curbosspos1)
        {
            case 28: 
                curbosspos1 = 30;
                curbosspos2 = 39;
                break;
            case 30:
                curbosspos1 = 33;
                curbosspos2 = 41;
                break;
            case 33:
                curbosspos1 = 35;
                curbosspos2 = 43;
                break;
            case 35:
                curbosspos1 = 28;
                curbosspos2 = 37;
                break;
        }
    }
    else
    {
        target = curbosspos2;
        switch (curbosspos2)
        {
            case 37: 
                curbosspos1 = 35;
                curbosspos2 = 43;
                break;
            case 43:
                curbosspos1 = 33;
                curbosspos2 = 41;
                break;
            case 41:
                curbosspos1 = 30;
                curbosspos2 = 39;
                break;
            case 39:
                curbosspos1 = 28;
                curbosspos2 = 37;
                break;
            
        }
    }
    
    // Spawn the actor mover and active it
    SpawnSpotForced("ActorMover", TID_BUU3422, 27, 0);
    SetThingSpecial(27, 0, target, 0, 3, TID_BUU3422);
    delay(1);
    Thing_activate(27);
    
    // Kill the actor mover after a bit
    delay(SECOND);
    Thing_deactivate(27);
    Thing_Remove(27);
}

bool mappillars_raised = false;
Script 668 (void) // Raise the platforms due to archvile attack
{
    // Ensure the pillars aren't already raised, and if they are then try a different attack
    if (mappillars_raised)
    {
        SetActorState(TID_BUU3422, "Missile", true);
        terminate;
    }
    mappillars_raised = true;
    
    // Raise the floor
    floor_raisebyvalue(20, 16, 64);
    floor_raisebyvalue(21, 16, 64);
    floor_raisebyvalue(22, 16, 64);
    
    // Wait a bit
    delay(SECOND*2);
    
    // Lower the floor back
    floor_lowerbyvalue(20, 16, 64);
    floor_lowerbyvalue(21, 16, 64);
    floor_lowerbyvalue(22, 16, 64);
    
    // Allow the pillars to be raised again
    delay(SECOND*1);
    mappillars_raised = false;
}

Script "DoomWare_Entity_MarkCleanup" (void) // ACS so that I can use it in DECORATE
{
    Thing_ChangeTID (0, TID_REMOVE);
}

Script "DoomWare_Entity_Cleanup" (void)
{
    // Remove entities marked for deletion
    While (ThingCount(0, TID_REMOVE) > 0)
    {
        thing_remove(TID_REMOVE);
        delay(1);
    }
}

Script "DoomWare_Entity_CheckCleanup" (void) // In case it missed the first cleanup
{

}

script "DoomWare_DoLightning" (void) // Halloween lightning
{
    delay(random(SECOND*5, SECOND*15));
    ChangeSky("STSKY22", "");
    AmbientSound("world/thunder", 127);
    Light_ChangeToValue(256, 255);
    Light_ChangeToValue(23, 255);
    Light_ChangeToValue(24, 255);
    Light_ChangeToValue(44, 255);
    Light_ChangeToValue(2, 255);
    Light_ChangeToValue(19, 255);
    Light_ChangeToValue(17, 255);
    Light_ChangeToValue(256, 255);
    Light_ChangeToValue(20, 255);
    Light_ChangeToValue(20, 255);
    Light_ChangeToValue(21, 255);
    Light_ChangeToValue(22, 255);
    delay(5);
    ChangeSky("STSKY21", "");
    Light_ChangeToValue(256, 192);
    Light_ChangeToValue(23, 192);
    Light_ChangeToValue(24, 192);
    Light_ChangeToValue(44, 192);
    Light_ChangeToValue(2, 192);
    Light_ChangeToValue(19, 192);
    Light_ChangeToValue(17, 192);
    Light_ChangeToValue(256, 192);
    Light_ChangeToValue(20, 192);
    Light_ChangeToValue(20, 192);
    Light_ChangeToValue(21, 192);
    Light_ChangeToValue(22, 192);
    restart;
}

script "DoomWare_AchievementLog" (int plynum, int achievement) CLIENTSIDE // Log() doesn't work unless it's clientsided, thus this script...
{
    Log(n:plynum+1, s:" obtained the achievement \cv", s:achievement);
}

function void Player_FreezeTotally(int who)
{
    SetPlayerProperty(who, 1, PROP_TOTALLYFROZEN);

    if (who == 0)
        player_frozen[PlayerNumber()] = true;
    else
        for (int i=0; i<MAXPLAYERS; i++)
            player_frozen[i] = true;
}

function void Player_UnFreezeTotally(int who)
{
    int i;
    if (who == 0 && !player_viewingmenu[PlayerNumber()])
        SetPlayerProperty(who, 0, PROP_TOTALLYFROZEN);
    else if (who == 1)
         for (i=0; i<MAXPLAYERS; i++)
            if (!player_viewingmenu[i])
                SetPlayerProperty(who, 0, PROP_TOTALLYFROZEN);

    if (who == 0)
        player_frozen[PlayerNumber()] = false;
    else
        for (i=0; i<MAXPLAYERS; i++)
            player_frozen[i] = false;
}

function int Distance(int tid1, int tid2)
{
    int x, y, z, d;
    x = GetActorX(tid1) - GetActorX(tid2) >> 16;
    y = GetActorY(tid1) - GetActorY(tid2) >> 16;
    z = GetActorZ(tid1) - GetActorZ(tid2) >> 16;
    d = sqrt( x*x + y*y + z*z );
    return d;
}

function void Load_PlayerDB(int plynum) // Loads a player's database data
{
    str plyname = getPlayerAccountName(plynum);
    if (GetCVar("doomware_unsafedb"))
        plyname = StrParam(n:plynum+1);
    BeginDBTransaction();
    data_points[plynum] = GetDBEntry("Points", plyname);
    data_wins[plynum] = GetDBEntry("Wins", plyname);
    data_deaths[plynum] = GetDBEntry("Deaths", plyname);
    data_1ups[plynum] = GetDBEntry("1Ups", plyname);
    data_role[plynum] = GetDBEntry("Role", plyname);
    data_achieve[plynum] = GetDBEntry("Achievements", plyname);
    data_bosskills[plynum] = GetDBEntry("BossKills", plyname);
    EndDBTransaction();
}

function int AToI(str s)
{
    int start = 0;
    bool negative = false;
    int n = 0;
    int len = StrLen(s);
    
    // Check if we start with a negative sign
    if (GetChar(s, 0) == '-')
    {
        negative = true;
        start++;
    }

    // Go through every character in the string
    for (int i=start; i<len; i++)
    {
        int char = GetChar(s, i);

        // Check that we are actually converting a number
        if (char < '0' || char > '9')
        {
            print(s:"ERROR, attempting to convert ", c:char, s:" to number!");
            continue;
        }

        // Add the number to our total
        n = n*10 + (char-'0');
    }

    if (negative)
        n = -n;

    return n;
}