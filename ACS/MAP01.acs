/*===========================================================================================================================================
    Welcome to DoomWare's MAP01 ACS Code!
	
	This map contains all the "official" 100 minigames. The actual DoomWare core gamemode code is stored inside the DOOMWARE lump, and it is
	#include'd in here to make this code easier to follow + reduce code repetition.

	Hopefully you'll see plenty of cool goodies in this ACS file. As always, I recommend you read the Wiki on GitHub to have an easier 
	understanding of what's going on here!
    https://github.com/buu342/ACS-DoomWare/wiki

    Have fun!

    - Buu342
===========================================================================================================================================*/

#include "zcommon.acs"


/*===================================================================================================
                                           Definitions
===================================================================================================*/


// Game selection

#define NUMBEROFGAMES        100 // Number Of minigames
#define NUMBEROFTIEBREAKERS  5   // Number Of 1v1 Tie Breakers
#define NUMBEROFTIEBREAKERSM 5   // Number Of Non-1v1 Tie Breakers


// Debugging single minigames (-1 to not debug, provide a different number to force that minigame number to play)
// Setting DEBUG_GAME to -2 will jump straight to tiebreakers on game start

#define DEBUG_GAME  -1
#define DEBUG_TIEB  -1
#define DEBUG_TIEBM -1
#define DEBUG_WACKY -1


// Game settings

#define BANNEDSOLOGAMES "11 26 40 42 69 83 85 87 88 90 93 95 96" // List of games banned during solo play


// Include DoomWare's core gamemode code

#include "DOOMWARE"


/*===================================================================================================
                                DoomWare Server Logic Initialization
===================================================================================================*/

Script "DoomWare_Server_InitMap" (void) // Initializes the map
{
	int i;	
    Sector_SetCurrent(160, 300, 192, false);

    CreateTranslation(1, 168:191=112:127, 32:47=120:127, 16:31=112:119, 160:167=112:120);
    CreateTranslation(2, 168:191=96:111, 32:47=107:111, 16:31=102:106, 160:167=107:107);
    CreateTranslation(3, 168:191=192:207, 32:47=202:207, 16:31=198:203, 160:167=201:203);
    CreateTranslation(4, 168:191=80:95, 32:47=90:95, 16:31=86:92, 160:167=90:90);
    CreateTranslation(5, 168:191=208:223, 32:47=64:79, 16:31=48:63, 160:167=67:69);
    CreateTranslation(6, 96:111=112:127);
    CreateTranslation(10, 96:111=112:127);

    CreateTranslation(11, 112:127=80:95);
    CreateTranslation(12, 112:127=64:79);
    CreateTranslation(13, 112:127=199:207);
    CreateTranslation(14, 112:127=5:8);
    CreateTranslation(15, 112:127=176:191);
	CreateTranslation(16, 64:79=[50,50,50]:[0,0,0]); // Black Imp (Void)
	CreateTranslation(17, 64:79=80:95); // White Imp (Void)
	
	// Match the Demon Translations
	CreateTranslation(18, 0:255=0:255);   // None
	CreateTranslation(19, 64:79=182:191); // Red Imp
	CreateTranslation(20, 64:79=112:127); // Green Imp
	CreateTranslation(21, 64:79=197:207); // Blue Imp
	CreateTranslation(22, 64:79=80:95);   // White Imp

    // Rotating spikes arena fog
    Sector_SetFade(150, 255, 106, 0);
    Sector_SetFade(151, 255, 106, 0);
    Sector_SetFade(152, 255, 106, 0);
    Sector_SetFade(153, 255, 106, 0);
    Sector_SetFade(154, 255, 106, 0);
    Sector_SetFade(155, 255, 106, 0);
    Sector_SetFade(156, 255, 106, 0);
    Sector_SetFade(157, 255, 106, 0);
    Sector_SetFade(158, 255, 106, 0);

    // Air is lava fog
    Sector_SetFade(148, 255, 128, 0);
    Sector_SetFade(149, 255, 128, 0);
    Sector_SetFade(253, 255, 128, 0);

    Thing_SetTranslation(326, 1);
    Thing_SetTranslation(327, 2);
    Thing_SetTranslation(329, 3);
    Thing_SetTranslation(330, 4);
    Thing_SetTranslation(331, 5);
    Thing_SetTranslation (108, 10);
    
	// VOID Map
	Scroll_Ceiling(956, 0, 64, 0); // A for loop doesn't work???
	Scroll_Ceiling(957, 0, 64, 0);
	Scroll_Ceiling(958, 0, 64, 0);
	Scroll_Ceiling(959, 0, 64, 0);
	Scroll_Ceiling(960, 0, 64, 0);
	Scroll_Ceiling(961, 0, 64, 0);
	Scroll_Ceiling(967, 32, -32, 0);
	Scroll_Ceiling(968, -32, -32, 0);
	Scroll_Ceiling(969, -32, 32, 0);
	Scroll_Ceiling(970, 32, 32, 0);
	Floor_Waggle(965, 32, 64, 32, 0);
	Ceiling_Waggle(937, 32, 64, 64, 0);
	Floor_Waggle(977, 32, 64, 32, 0);
	delay(10);
	Ceiling_Waggle(938, 32, 64, 64, 0);
	delay(10);
	Ceiling_Waggle(939, 32, 64, 64, 0);
	delay(10);
	Ceiling_Waggle(962, 32, 64, 64, 0);
	
	// FEAR Map Glass special
	for (i=29; i<=37; i++)
		SetLineSpecial(i, 226, 240, 0, i);

    Ceiling_Waggle(109, 32, 64, 0, 0);
    Floor_Waggle(133, 32, 64, 0, 0);
    Floor_Waggle(254, 256, 24, 0, 0);

    Scroll_Floor(3, 300, 2, 240);
    Scroll_Ceiling(3, 300, 2, 90);
    Scroll_Ceiling(202, 100, 2, 90);
    Sector_SetColor(4, 255, 105, 0, 0);
    Sector_SetColor(5, 0, 0, 255, 0);
    Sector_SetColor(29, 0, 255, 0, 0);
    Sector_SetColor(43, 36, 146, 219, 0);
    Sector_SetDamage(29, 99999, MOD_SLIME);
    Sector_SetDamage(4, 99999, mod_lava);
    Sector_SetDamage(41, 99999, MOD_FALLING);
    Sector_SetFriction(11, 30);
    Sector_SetGravity(18, 0, 50);
    Sector_SetGravity(206, 0, 75);
    Ceiling_CrushAndRaise(179, 64, 100, 1);

    // Pyoro level gravity
    for (i=0; i<15; i++)
        Sector_SetGravity(222+i, 10, 0);

    Scroll_Floor(140, -64, 0, 2);
    Scroll_Floor(141, -55, -32, 2);
    Scroll_Floor(142, -32, -55, 2);
    Scroll_Floor(143, 0, -64, 2);
    Scroll_Floor(144, 32, -55, 2);
    Scroll_Floor(145, 55, -32, 2);
    Scroll_Floor(187, 64, 0, 2);
    Scroll_Floor(188, 55, 32, 2);
    Scroll_Floor(189, 32, 55, 2);
    Scroll_Floor(190, 0, 64, 2);
    Scroll_Floor(191, -32, 55, 2);
    Scroll_Floor(192, -55, 32, 2);
	
	// Sky Battle 1v1 wall scrolling
	Scroll_Wall(48, 32.0, 0, 0, 2);

	// Activate Actor Movers
    thing_activate(22);
    thing_activate(37);
    thing_activate(67);
    thing_activate(71);
    SetActorState(577, "Deactivated");

    // Delay for the rotating spikes in event 119
    delay(SECOND/2);
    thing_activate(69);

    // Delay for the crushers in event 116
    Ceiling_CrushAndRaise(180, 64, 100, 1);
    delay(4);
    Ceiling_CrushAndRaise(181, 64, 100, 1);
    delay(4);
    Ceiling_CrushAndRaise(182, 64, 100, 1);
	
	// Reach the End (Traps) pillar waggles
	for (i=0; i<6; i++)
		Floor_Waggle(1116+i, 800, 48, (i*17)%64, 0);
    
    // Bouncy arena walls
    if (GetCVar("doomware_bouncywalls"))
    {
        SetLineSpecial(255, 226, 255, 0, 255, 64);
        SetLineSpecial(254, 226, 255, 0, 254, 128);
        SetLineSpecial(253, 226, 255, 0, 253, 192);
        SetLineSpecial(252, 226, 255, 0, 252, 0);
    }
    
    // Red OpenGL lights
    SpawnSpotForced("RedPoint", 88, TID_REMOVE, 0.0);
    Thing_remove(88);
    Thing_ChangeTID(TID_REMOVE, 88);
        
    // Apply arena seasonal themes
    if (game_skin == MAPSKIN_HALLOWEEN)
    {
        SpawnSpotForced("OrangeTorch", 838, 0, 0);
        Thing_remove(838);
        SpawnSpotForced("OrangePoint", 147, TID_REMOVE, 0.0);
        Thing_remove(147);
        Thing_ChangeTID(TID_REMOVE, 147);
        ChangeSky("STSKY21", "");
        ChangeFloor(253, "WFLAVA1");
        ChangeFloor(256, "WFLAVA1");
        ChangeFloor(839, "FLATHLWN");
        ChangeFloor(856, "FLATHLWN");
        ChangeFloor(22, "TLITE6_8");
        ChangeFloor(693, "TLITE6_8");
        SetLineTexture(89, SIDE_BACK, TEXTURE_BOTTOM , "N_BRGR16");
        ACS_NamedExecute("DoomWare_DoLightning", 0);
    }
    else if (game_skin == MAPSKIN_CHRISTMAS)
    {
        SpawnSpotForced("WhiteTorch", 838, 0, 0);
        Thing_remove(838);
        SpawnSpotForced("WhitePoint", 147, TID_REMOVE, 0.0);
        Thing_remove(147);
        Thing_ChangeTID(TID_REMOVE, 147);
        ChangeSky("STSKY23", "");
        ChangeFloor(253, "SNOW");
        ChangeFloor(256, "SNOW");
        ChangeFloor(839, "FLATCHRS");
        ChangeFloor(856, "FLATCHRS");
        ChangeFloor(22, "TLITE6_9");
        ChangeFloor(693, "TLITE6_9");
        SetLineTexture(89, SIDE_BACK, TEXTURE_BOTTOM , "N_BRGR17");
        Light_ChangeToValue(256, 255);
        for (i=3; i<=10; i++)
        {
            SpawnSpotForced("SnowDropper", i, TID_REMOVE, 0);
            SetActorPosition(TID_REMOVE, GetActorX(TID_REMOVE), GetActorY(TID_REMOVE), GetActorZ(TID_REMOVE)+100.0, false);
            Thing_ChangeTID(TID_REMOVE, 0);
        }
    }
    else
    {
        SpawnSpotForced("BluePoint", 147, TID_REMOVE, 0.0);
        Thing_remove(147);
        Thing_ChangeTID(TID_REMOVE, 147);
    }
}


/*===================================================================================================
                                DoomWare Client Logic Initialization
===================================================================================================*/

Script "DoomWare_Client_InitializeMap" ENTER CLIENTSIDE // Initializes some map things CLIENTSIDE
{
	// Make the glass in the F.E.A.R. minigame translucent
	for (int i=29; i<=37; i++)
		TranslucentLine(i, 128, 0);	
}

function void DoomWare_Client_HUDStatusBars(int CurrentRound, int hud_time, int hud_spindex, int status_w, int status_h, bool diedinround) // Draw the STATUSBAR for throwback minigames
{
	switch(CurrentRound)
	{
		case 6: // Corridor 7
			SetFont("C7BAR1");
			if (diedinround)
				SetFont("C7BAR2");
			hudmessage(s:"a"; HUDMSG_PLAIN, MSGID_STBAR, cR_ORANGE, status_w, status_h, 1);
			break;
		case 7: // Simpsons Doom
			SetFont("SMBAR");
			hudmessage(s:"a"; HUDMSG_PLAIN, MSGID_STBAR, cR_ORANGE, status_w, status_h, 1);

			if (hud_spindex < 3)
			{
				SetFont(StrParam(s:"SMFACE", d:hud_spindex));
				hudmessage(s:"A"; HUDMSG_PLAIN, MSGID_STFACE, cR_ORANGE, status_w, status_h, 1);
			}
			else
				hudmessage(s:""; HUDMSG_PLAIN, MSGID_STFACE, cR_ORANGE, status_w, status_h, 1);
			break;
		case 14: // Massmouth
			if (hud_spindex < 3)
				SetFont("MMBAR1");
			else
				SetFont("MMBAR2");
			hudmessage(s:"a"; HUDMSG_PLAIN, MSGID_STBAR, cR_ORANGE, status_w, status_h, 1);
			break;
		case 43: // Chex Quest
			SetFont("CHEXHUD");
			hudmessage(s:"a"; HUDMSG_PLAIN, MSGID_STBAR, cR_ORANGE, status_w, status_h, 1);

			if (hud_spindex < 3)
			{
				SetFont(StrParam(s:"CHEXFAC", d:hud_spindex));
				hudmessage(s:"A"; HUDMSG_PLAIN, MSGID_STFACE, cR_ORANGE, status_w, status_h, 1);
			}
			else
				hudmessage(s:""; HUDMSG_PLAIN, MSGID_STFACE, cR_ORANGE, status_w, status_h, 1);
			break;
		case 97: // Sonic Doom
			SetFont("SONCBAR1");
			if (GetActorProperty(TID_PLAYER+ConsolePlayerNumber(), APROP_Health) <= 0)
				SetFont("SONCBAR2");
			hudmessage(s:"a"; HUDMSG_PLAIN, MSGID_STBAR, cR_ORANGE, status_w, status_h, 1);
			break;
		case 98: // Batman Doom
			SetFont("BATMBAR1");
			if (GetActorProperty(TID_PLAYER+ConsolePlayerNumber(), APROP_Health) <= 0)
				SetFont("BATMBAR2");
			hudmessage(s:"a"; HUDMSG_PLAIN, MSGID_STBAR, cR_ORANGE, status_w, status_h, 1);

			if (hud_spindex < 3 && !diedinround)
			{
				SetFont(StrParam(s:"BATFACE", d:hud_spindex));
				hudmessage(s:"A"; HUDMSG_PLAIN, MSGID_STFACE, cR_ORANGE, status_w, status_h, 1);
			}
			else
				hudmessage(s:""; HUDMSG_PLAIN, MSGID_STFACE, cR_ORANGE, status_w, status_h, 1);
			break;
	}	
}


/*===================================================================================================
                                       Minigames (Clientside)
===================================================================================================*/

Script "DoomWare_Client_Minigame1" (void) // The Floor/Air Is Lava
{
    // Pick the minigame based on the selected win condition
    if (minigame_wincondition1 == 0)
        minigame_instruction1[PlayerNumber()] = "The Floor is Lava";
    else
        minigame_instruction1[PlayerNumber()] = "The Air is Lava";
        
    // Wait until the minigame is over
    while (game_status == STATUS_MINIGAME)
    {
        // If the air is lava and the player isn't underwater, kill 'em
        if (minigame_wincondition1 == 2 && GetActorZ(0) > -44.0 && !Check_Player_Lost(PlayerNumber()))
            Thing_damage(0, 10000, MOD_LAVA);
        delay(1);
    }
}

Script "DoomWare_Client_Minigame2" (void) // Survive (Cyberdemon)
{
    minigame_instruction1[PlayerNumber()] = "Survive";

    // Wait until the minigame is over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame3" (void) // Survive (Ghouls)
{
    minigame_instruction1[PlayerNumber()] = "Survive";

    // Wait until the minigame is over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame4" (void) // Survive (Archviles)
{
    minigame_instruction1[PlayerNumber()] = "Survive";

    // Give the player a push staff so he can be a dick
    GiveInventory("PushStaff", 1);
    SetWeapon("PushStaff");

    // Wait until the minigame is over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame5" (void) // Stop/Don't Stop Moving
{
    if (minigame_wincondition1 == 0)
    {
        if (game_speed != 4)
            minigame_instruction1[PlayerNumber()] = "Stop Moving";
        else
            minigame_instruction1[PlayerNumber()] = "Don't Not Stop Moving";
    }
    else
    {
        if (game_speed != 4)
            minigame_instruction1[PlayerNumber()] = "Don't Stop Moving";
        else
            minigame_instruction1[PlayerNumber()] = "Don't Not Keep Moving";    
    }
    // Wait until the minigame is over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame6" (void) // Reach the End (Corridor 7)
{
    minigame_instruction1[PlayerNumber()] = "Reach the End";

    // Morph the player into the Corridor 7 soldier
    str class = "C7Player";
    while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
    {
        Player_Morph(PlayerNumber(), class);
        GiveInventory("C7Gun", 1);
        SetWeapon("C7Gun");
        delay(1);
    }
    
    // Make sure he can't be harmed
    setplayerproperty(1, 2, prop_invulnerability);

    // Wait until the minigame is over
    while (game_status == STATUS_MINIGAME)
        delay(1);

    // Set him back to normal
    setplayerproperty(1, 0, prop_invulnerability); // Must be first or you can't unmorph
    UnMorphActor(TID_PLAYER+PlayerNumber(), true);
}

Script "DoomWare_Client_Minigame7" (void) // Kill Ned Flanders
{
    minigame_instruction1[PlayerNumber()] = "Kill Ned Flanders";

    // Prevent a bug where some player's won't teleport after morphing
    delay(1);

    // Morph the player into Homer and give him a shotgun
    str class = "SimpsonsPlayer";
    while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
    {
        Player_Morph(PlayerNumber(), class);
        GiveInventory("SimpsonsShotgun", 1);
        SetWeapon("SimpsonsShotgun");
        delay(1);
    }

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);

    // Set him back to normal
    UnMorphActor(TID_PLAYER+PlayerNumber(), true);
}

Script "DoomWare_Client_Minigame8" (void) // Destroy a Barrel
{
    minigame_instruction1[PlayerNumber()] = "Destroy a Barrel";

    // Make the player invincible and give him a Mace
    setplayerproperty(1, 2, prop_invulnerability);
    GiveInventory("MaceWeapon", 1);
    SetWeapon("MaceWeapon");

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame9" (void) // Shoot a Target
{
    minigame_instruction1[PlayerNumber()] = "Shoot one of the targets";

    // Give the player a Railgun
    GiveInventory("Railgun", 1);
    SetWeapon("Railgun");

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame10" (void) // Evade the Kamikazi
{
    minigame_instruction1[PlayerNumber()] = "Evade the Kamikazi";

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame11" (void) // Survive (super Shotgun)
{
    minigame_instruction1[PlayerNumber()] = "Survive";
    minigame_instruction2[PlayerNumber()] = "1 Point Per Frag";

    // Give the player a super shotgun
    GiveInventory("SuperShotgun", 1);
    SetWeapon("SuperShotgun");

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame12" (void) // Blow/Don't Blow Your Brains Out
{
	if (minigame_wincondition1 == 0)
		minigame_instruction1[PlayerNumber()] = "Blow Your Brains Out";
	else
		minigame_instruction1[PlayerNumber()] = "Don't Blow Your Brains Out";

    // Give the player a suicide pistol
    GiveInventory("Suicide", 1);
    SetWeapon("Suicide");

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame13" (void) // Enter the Door
{
    // Display the correct text based on which minigame we're playing
    if (minigame_wincondition1 == 0)
        minigame_instruction1[PlayerNumber()] = "Enter the \cjNo Key\ci Door";
    else if (minigame_wincondition1 == 1)
        minigame_instruction1[PlayerNumber()] = "Enter the \chBlue Key\ci Door";
    else if (minigame_wincondition1 == 2)
        minigame_instruction1[PlayerNumber()] = "Enter the \cgRed Key\ci Door";
    else if (minigame_wincondition1 == 3)
        minigame_instruction1[PlayerNumber()] = "Enter the \ckYellow Key\ci Door";

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame14" (void) // Meet the Worm
{
    minigame_instruction1[PlayerNumber()] = "Meet the Worm";

    // Prevent a bug where some player's won't teleport after morphing
    delay(1);

    // Morph the player into massmouth and give him the Ray Gun
    str class = "MassMouthPlayer";
    while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
    {
        Player_Morph(PlayerNumber(), class);
        GiveInventory("Raygun", 1);
        SetWeapon("Raygun");
        delay(1);
    }

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);

    // Set him back to normal
    UnMorphActor(TID_PLAYER+PlayerNumber(), true);
}

Script "DoomWare_Client_Minigame15" (void) // Reach the End (Swapping Boxes)
{
    minigame_instruction1[PlayerNumber()] = "Reach the End";
    minigame_instruction2[PlayerNumber()] = "Boxes swap to the music";

    // Give the player a push staff so he can be a dick
    GiveInventory("PushStaff", 1);
    SetWeapon("PushStaff");

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame16" (void) // Touch the sky
{
    minigame_instruction1[PlayerNumber()] = "Touch the sky";
    minigame_instruction2[PlayerNumber()] = "Spam your \chjump\cg button";

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
    {
        // Let players jump more
        if( (GetPlayerInput(-1, MODINPUT_BUTTONS) & BT_JUMP) && !(GetPlayerInput(-1, INPUT_OLDBUTTONS) & BT_JUMP) )
            ThrustThingZ(0, 20, 0, 0);

        // Make them win if they hit the sky
        if (GetActorZ(0) > 195.0)
            Player_Win(PlayerNumber());

        // Continue the loop
        delay(1);
    }
}

Script "DoomWare_Client_Minigame17" (void) // Finish A Lap (Karts)
{
    minigame_instruction1[PlayerNumber()] = "Finish a lap";
    minigame_instruction2[PlayerNumber()] = "Hold \cdShoot\cg To Accelerate";

    // Prevent a bug where some player's won't teleport after morphing
    delay(1);

    // Morph the player into a kart and freeze him
    str class = "KartPlayer";
    if (game_wackymod == WACKYMOD_SPEED)
        class = "KartPlayerSpeed";
    while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
    {
        Player_Morph(PlayerNumber(), class);
        setplayerproperty(0, 1, PROP_TOTALLYFROZEN);
        delay(1);
    }

    // Wait for the countdown
    LocalAmbientSound("DoomWare/KartStart", 127);
    while (minigame_canmove == false)
        delay(1);

    // GO!
    setplayerproperty(1, 0, PROP_TOTALLYFROZEN);

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);

    // Set him back to normal
    StopSound(TID_PLAYER+PlayerNumber(), 6);
    UnMorphActor(TID_PLAYER+PlayerNumber(), true);
    StopSound(TID_PLAYER+PlayerNumber(), 6);
}

Script "DoomWare_Client_Minigame18" (void) // Equip/Don't Equip Weapon
{
    str wep;
    int ticcount = 0; // Needed to fix a bug where players would auto win for some reason

    // Give the player everything
    setplayerproperty(1, 2, prop_invulnerability);
    GiveInventory("ChainsawFake", 1); // Fake weapons that have no ammo (because some people can't switch weapons without ammo)
    GiveInventory("PistolFake", 1);
    GiveInventory("SuperShotgunFake", 1);
    GiveInventory("ChaingunFake", 1);
    GiveInventory("RocketLauncherFake", 1);
    GiveInventory("PlasmaRifleFake", 1);
    GiveInventory("BFG9000Fake", 1);
    GiveInventory("Fist", 1);
    SetWeapon("Fist");
    delaY(1);
    SetWeapon("Fist");

    Switch(minigame_wincondition1%10)
    {
        case 1:
            minigame_instruction1[PlayerNumber()] = "Equip your Chainsaw";
            wep = "ChainsawFake";
            break;
        case 2:
            minigame_instruction1[PlayerNumber()] = "Equip your Pistol";
            wep = "PistolFake";
            break;
        case 3:
            minigame_instruction1[PlayerNumber()] = "Equip your Super Shotgun";
            wep = "SuperShotgunFake";
            break;
        case 4:
            minigame_instruction1[PlayerNumber()] = "Equip your Chaingun";
            wep = "ChaingunFake";
            break;
        case 5:
            minigame_instruction1[PlayerNumber()] = "Equip your Rocket Launcher";
            wep = "RocketLauncherFake";
            break;
        case 6:
            minigame_instruction1[PlayerNumber()] = "Equip your Plasma Gun";
            wep = "PlasmaRifleFake";
            break;
        case 7:
            minigame_instruction1[PlayerNumber()] = "Equip your BFG9000";
            wep = "BFG9000Fake";
            break;
    }
	if (minigame_wincondition1 >= 10)
		minigame_instruction1[PlayerNumber()] = StrParam(s:"Don't ", s:minigame_instruction1[PlayerNumber()]);
    Delay(SECOND);

    // Award (or fail) players if they got the right weapon
    while (game_status == STATUS_MINIGAME)
    {
        if (!StrIcmp(GetWeapon(), wep))
            ticcount++;
        if (ticcount == 5) // If they held the weapon for 5 ticks
		{
			if (minigame_wincondition1 < 10)
				Player_Win(PlayerNumber());
			else
				Player_Lose(PlayerNumber(), false);
		}
        delay(1);
    }
}

Script "DoomWare_Client_Minigame19" (void) // Reach Surface
{
    minigame_instruction1[PlayerNumber()] = "Swim to the surface";

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
    {
        if (GetActorZ(0) > 332.0)
            Player_Win(PlayerNumber());
        delay(1);
    }
}

Script "DoomWare_Client_Minigame20" (void) // Reach the End (Factory)
{
    minigame_instruction1[PlayerNumber()] = "Reach the end";

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame21" (void) // Survive (Grenades)
{
    minigame_instruction1[PlayerNumber()] = "Survive";

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame22" (void) // Collect 10 Rings
{
    // Prevent a bug where some player's won't teleport after morphing
    delay(1);

    // Morph the player into Sonic
    str class = "SonicPlayer";
    while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
    {
        Player_Morph(PlayerNumber(), class);
        delay(1);
    }

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
    {
        TeleportInSector(43, 436, 396, false);
        int num = CheckInventory("WonRoundItem");
        if (num < 10)
            minigame_instruction1[PlayerNumber()] = StrParam(s:"Collect ", d:(10-num), s:" Rings");
        else
            minigame_instruction1[PlayerNumber()] = "Finished!";
        delay(1);
    }

    // Set him back to normal
    UnMorphActor(TID_PLAYER+PlayerNumber(), true);
}

Script "DoomWare_Client_Minigame23" (void) // Stay Off/On The Ground
{
	if (minigame_wincondition1 == 0)
		minigame_instruction1[PlayerNumber()] = "Stay Off The Ground";
	else
		minigame_instruction1[PlayerNumber()] = "Stay On The Ground";

    // Make the players invincible and give them a rocket launcher
    GiveInventory("RocketLauncher2", 2);
    SetWeapon("RocketLauncher2");
    setplayerproperty(1, 2, prop_invulnerability);

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame24" (void) // Grab a Balloon
{
    minigame_instruction1[PlayerNumber()] = "Grab a balloon";
	
    // Prevent a bug where some player's won't teleport after morphing
    delay(1);

    // Morph the player into Spider-Man
    str class = "SpiderManPlayer";
    while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
    {
        Player_Morph(PlayerNumber(), class);
        delay(1);
    }

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame25" (void) // Shoot the Target (Popup)
{
    minigame_instruction1[PlayerNumber()] = "Shoot the target";

    // Give the player a Railgun
    GiveInventory("Railgun", 1);
    SetWeapon("Railgun");


    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame26" (void) // Survive (Boxing)
{
    minigame_instruction1[PlayerNumber()] = "Survive";
    minigame_instruction2[PlayerNumber()] = "1 Point Per Frag";

    // Give the player a boxing glove
    GiveInventory("BoxingGlove", 1);
    SetWeapon("BoxingGlove");

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame27" (void) // Survive (Terry)
{
    minigame_instruction1[PlayerNumber()] = "Survive";

    // Wait until the minigame is over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame28" (void) // Finish a Lap (E1M1)
{
    minigame_instruction1[PlayerNumber()] = "Finish a lap";
    minigame_instruction2[PlayerNumber()] = "Hold \cdShoot\cg To Accelerate";

    // Prevent a bug where some player's won't teleport after morphing
    delay(1);

    // Morph the player into a kart and freeze him
    str class = "KartPlayer";
    if (game_wackymod == WACKYMOD_SPEED)
        class = "KartPlayerSpeed";
    while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
    {
        Player_Morph(PlayerNumber(), class);
        setplayerproperty(0, 1, PROP_TOTALLYFROZEN);
        delay(1);
    }

    // Wait for the countdown
    LocalAmbientSound("DoomWare/KartStart", 127);
    while (minigame_canmove == false)
        delay(1);

    // GO!
    setplayerproperty(1, 0, PROP_TOTALLYFROZEN);

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);

    // Set him back to normal
    StopSound(TID_PLAYER+PlayerNumber(), 6);
    UnMorphActor(TID_PLAYER+PlayerNumber(), true);
    StopSound(TID_PLAYER+PlayerNumber(), 6);
}

Script "DoomWare_Client_Minigame29" (void) // Shoot a Duck
{
    minigame_instruction1[PlayerNumber()] = "Shoot A Duck";

    GiveInventory("NESZapper", 1);
    setplayerproperty(1, 2, prop_invulnerability);

    // Wait until the minigame is over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame30" (void) // Dive Into the Water
{
    minigame_instruction1[PlayerNumber()] = "Dive Into The Water";

    // Prevent winning during teleportation
    delay(2);

    // Give the player a push staff so he can be a dick
    GiveInventory("PushStaff", 1);
    SetWeapon("PushStaff");

    // Check if the player managed to get in the water
    while (game_status == STATUS_MINIGAME)
    {
        if (GetActorZ(0) < 50.0 && ClassifyActor(0) & ACTOR_ALIVE)
            Player_Win(PlayerNumber());
        delay(1);
    }
}

Script "DoomWare_Client_Minigame31" (void) // Reach the End (Boulders)
{
    minigame_instruction1[PlayerNumber()] = "Reach The End";

    // Wait until the minigame is over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame32" (void) // Reach the End (Ice)
{
    minigame_instruction1[PlayerNumber()] = "Reach The End";

    // Give the player a push staff so he can be a dick
    GiveInventory("PushStaff", 1);
    SetWeapon("PushStaff");

    // Wait until the minigame is over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame33" (void) // Survive (Romero)
{
    minigame_instruction1[PlayerNumber()] = "Survive";

    // Give the player a push staff so he can be a dick
    GiveInventory("PushStaff", 1);
    SetWeapon("PushStaff");

    // Wait until the minigame is over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame34" (void) // Survive (Hoth)
{
    minigame_instruction1[PlayerNumber()] = "Survive";
    minigame_instruction2[PlayerNumber()] = "1 Point Per Frag";

    // Prevent a bug where some player's won't teleport after morphing
    delay(1);

    // Morph the player into a snow speeder and make him fly
    str class = "SnowSpeederPlayer";
    if (game_wackymod == WACKYMOD_SPEED)
        class = "SnowSpeederPlayerSpeed";
    while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
    {
        Player_Morph(PlayerNumber(), class);
        setplayerproperty(1, 1, PROP_FLY );
        delay(1);
    }

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
    {
        if (!player_lostround[PlayerNumber()])
        {
            // Allow for air controls
            if (GetUserCVar(PlayerNumber(), "doomware_invertfly"))
                ThrustThingZ(0, ((GetActorPitch(0) >> 8))*2 , 0, 0);
            else
                ThrustThingZ(0, ((GetActorPitch(0) >> 8))*-2 , 0, 0);
        }
        delay(1);
    }

    // Set him back to normal
    StopSound(TID_PLAYER+PlayerNumber(), 6);
    UnMorphActor(TID_PLAYER+PlayerNumber(), true);
    StopSound(TID_PLAYER+PlayerNumber(), 6);
    setplayerproperty(1, 0, PROP_FLY );
}

Script "DoomWare_Client_Minigame35" (void) // Climb the Colossus
{
    minigame_instruction1[PlayerNumber()] = "Climb the Colossus";

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame36" (void) // Get On the Colored Circle
{
    minigame_instruction1[PlayerNumber()] = "Get On The Colored Circle";

    // Give the player a push staff so he can be a dick
    GiveInventory("PushStaff", 1);
    SetWeapon("PushStaff");

    // Force the player to look at the screen
    SetActorAngle(TID_PLAYER+PlayerNumber(), 0.25);

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame37" (void) // Dive Down
{
    minigame_instruction1[PlayerNumber()] = "Swim";
    minigame_instruction2[PlayerNumber()] = "Spam your \ccUse key\cg to dive deeper";

    // Prevent a bug where some player's won't teleport after morphing
    delay(1);

    // Turn the player into a submarine
    str class = "SubmarinePlayer";
    while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
    {
        Player_Morph(PlayerNumber(), class);
        delay(1);
    }
    delay(1);

    // Give players control
    while (game_status == STATUS_MINIGAME)
    {
        // Allow players to dive with their Use key
        if( (GetPlayerInput(-1, MODINPUT_BUTTONS) & BT_USE) && !(GetPlayerInput(-1, INPUT_OLDBUTTONS) & BT_USE) )
            ThrustThingZ(0, 8, 1, 1);
        delay(1);
    }

    StopSound(TID_PLAYER+PlayerNumber(), 6);
    UnMorphActor(TID_PLAYER+PlayerNumber(), true);
    StopSound(TID_PLAYER+PlayerNumber(), 6);
}

Script "DoomWare_Client_Minigame38" (void) // Repeat the Pattern
{
    minigame_instruction1[PlayerNumber()] = "Watch";

    // Freeze the player
    setplayerproperty(1, 1, PROP_FROZEN );
	
	// Disable the spread wackymod
	if (game_wackymod == WACKYMOD_SPREAD)
		TakeInventory("PowerSpread", 999);

    // Wait until the pattern is done showing
    while (minigame_canmove == false)
        delay(1);

    // Give the player a Railgun
    GiveInventory("Railgun", 1);
    SetWeapon("Railgun");

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
    {
        str ans = "Your Answer = ";
        for (int i=0; i<4; i++)
            if (player_answer2[PlayerNumber()][i] != -1)
            {
                str color;
                switch (player_answer2[PlayerNumber()][i])
                {
                    case 0:
                        color = "\cd";
                        break;
                    case 1:
                        color = "\cm";
                        break;
                    case 2:
                        color = "\cg";
                        break;
                    case 3:
                        color = "\ch";
                        break;
                    case 4:
                        color = "\cj";
                        break;
                    case 5:
                        color = "\ci";
                        break;
                }
                ans = StrParam(s:ans, s:color, d:(i+1), s:"\c-");
            }
        minigame_instruction2[PlayerNumber()] = ans;
        delay(1);
    }
}

Script "DoomWare_Client_Minigame39" (void) // Storm the Beach
{
    minigame_instruction1[PlayerNumber()] = "Storm the beach";

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame40" (void) // Survive (Dark Corridors)
{
    minigame_instruction1[PlayerNumber()] = "Survive";
    minigame_instruction2[PlayerNumber()] = "1 Point Per Frag";

    // Give the player a shotgun
    GiveInventory("Shotgun", 1);
    SetWeapon("Shotgun");

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame41" (void) // Go to the Light
{
    minigame_instruction1[PlayerNumber()] = "Go to the Light";

    // Give the player a push staff so he can be a dick
    GiveInventory("PushStaff", 1);
    SetWeapon("PushStaff");

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame42" (void) // Survive (Rockets)
{
    minigame_instruction1[PlayerNumber()] = "Survive";

    // Give the player a rocket launcher and make him invulnerable
    GiveInventory("RocketLauncher2", 2);
    GiveInventory("RocketBox", 20);
    SetWeapon("RocketLauncher2");
    delay(10); // To prevent losing invulnerability during teleportation
    setplayerproperty(1, 2, prop_invulnerability);

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame43" (void) // Zorch a Flemoid
{
    minigame_instruction1[PlayerNumber()] = "Zorch a Flemoid";

    // Prevent a bug where some player's won't teleport after morphing
    delay(1);

    // Morph the player into Fred Chexter and make them invulnerable
    str class = "FredPlayer";
    while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
    {
        Player_Morph(PlayerNumber(), class);
        delay(1);
    }
    setplayerproperty(1, 2, prop_invulnerability);

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);

    // Set him back to normal
    UnMorphActor(TID_PLAYER+PlayerNumber(), true);
}

Script "DoomWare_Client_Minigame44" (void) // Reach the End (Void)
{
    minigame_instruction1[PlayerNumber()] = "Reach the End";

    // Give the player a push staff so he can be a dick
    GiveInventory("PushStaff", 1);
    SetWeapon("PushStaff");

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame45" (void) // Finish a Lap (Rainbow Road)
{
    minigame_instruction1[PlayerNumber()] = "\crF\cgi\cin\cki\cfs\cdh \cna \cvl\cha\ctp";
    minigame_instruction2[PlayerNumber()] = "Hold \cdShoot\cg To Accelerate";

    // Prevent a bug where some player's won't teleport after morphing
    delay(1);

    // Morph the player into a kart and freeze him
    str class = "KartPlayer";
    if (game_wackymod == WACKYMOD_SPEED)
        class = "KartPlayerSpeed";
    while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
    {
        Player_Morph(PlayerNumber(), class);
        setplayerproperty(0, 1, PROP_TOTALLYFROZEN);
        delay(1);
    }

    // Wait for the countdown
    LocalAmbientSound("DoomWare/KartStart", 127);
    while (minigame_canmove == false)
        delay(1);

    // GO!
    setplayerproperty(1, 0, PROP_TOTALLYFROZEN);

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);

    // Set him back to normal
    StopSound(TID_PLAYER+PlayerNumber(), 6);
    UnMorphActor(TID_PLAYER+PlayerNumber(), true);
    StopSound(TID_PLAYER+PlayerNumber(), 6);
}

Script "DoomWare_Client_Minigame46" (void) // Reach The End (Bigger Swapping Boxes)
{
    minigame_instruction1[PlayerNumber()] = "Reach the End";
    minigame_instruction2[PlayerNumber()] = "Boxes swap to the music";

    // Give the player a push staff so he can be a dick
    GiveInventory("PushStaff", 1);
    SetWeapon("PushStaff");

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame47" (void) // Survive (Banana)
{
    minigame_instruction1[PlayerNumber()] = "Survive";

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame48" (void) // Survive (Spikes)
{
    minigame_instruction1[PlayerNumber()] = "Survive";

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame49" (void) // Math Problem
{
    // Choose the game instructions based on wincondition3
    switch (minigame_wincondition3)
    {
        case 0:
            minigame_instruction1[PlayerNumber()] = StrParam(i:minigame_wincondition1, s:" + ", i:minigame_wincondition2);
            break;
        case 1:
            minigame_instruction1[PlayerNumber()] = StrParam(i:minigame_wincondition1, s:" - ", i:minigame_wincondition2);
            break;
        case 2:
            minigame_instruction1[PlayerNumber()] = StrParam(i:minigame_wincondition1, s:" x ", i:minigame_wincondition2);
            break;
    }	
	
	// Disable the spread wackymod
	if (game_wackymod == WACKYMOD_SPREAD)
		TakeInventory("PowerSpread", 999);

    // Make the player frozen and give him a railgun
    setplayerproperty(1, 1, PROP_FROZEN );
    GiveInventory("Railgun", 1);
    SetWeapon("Railgun");

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
    {
        str ans = "Your Answer = ";
        for (int i=0; i<2; i++)
            if (player_answer2[PlayerNumber()][i] != -1)
                ans = StrParam(s:ans, d:player_answer2[PlayerNumber()][i]);
        minigame_instruction2[PlayerNumber()] = ans;
        delay(1);
    }
}

Script "DoomWare_Client_Minigame50" (void) // Survive (Bullet Hell)
{
    minigame_instruction1[PlayerNumber()] = "Survive";
    delay(1);
    SetActorAngle(TID_PLAYER+PlayerNumber(), 0.25);

    // Wait until the minigame is over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame51" (void) // Clean Your Weapon
{
    minigame_instruction1[PlayerNumber()] = "Clean your weapon";
    minigame_instruction2[PlayerNumber()] = "Spam \cdShoot\cg";
    player_viewsprite[PlayerNumber()] = "PPISA0";

    // Wait until the minigame is over
    while (game_status == STATUS_MINIGAME)
    {
        if( (GetPlayerInput(-1, MODINPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerInput(-1, INPUT_OLDBUTTONS) & BT_ATTACK) )
        {
            str sprite = "AFKLMNOPFFGHHJJJHHJJJHHFFFFQRSRSRSRSRSRSRSRSRSQFFFFFFHHJJJQRSRSRSQFFFKLMMNOPPFA";
            if (player_answer1[PlayerNumber()] < 78)
                player_answer1[PlayerNumber()]++;
            player_viewsprite[PlayerNumber()] = StrParam(s:"PPIS", c:GetChar(sprite, player_answer1[PlayerNumber()]), s:"0");
            Switch (player_answer1[PlayerNumber()])
            {
                case 4:
                case 71: LocalAmbientSound("DoomWare/CleanCock1", 127); break;
                case 5:
                case 73: LocalAmbientSound("DoomWare/CleanCock2", 127); break;
                case 6:
                case 74: LocalAmbientSound("DoomWare/CleanCock3", 127); break;
                case 7:
                case 75: LocalAmbientSound("DoomWare/CleanCock4", 127); break;
                case 13:
                case 18:
                case 55: LocalAmbientSound("DoomWare/CleanSpray", 127); break;
                case 28:
                case 30:
                case 32:
                case 34:
                case 36:
                case 38:
                case 40:
                case 42:
                case 44:
                case 59:
                case 61:
                case 63: LocalAmbientSound("DoomWare/CleanRub1", 127); break;
                case 29:
                case 31:
                case 33:
                case 35:
                case 37:
                case 39:
                case 41:
                case 43:
                case 45:
                case 60:
                case 62:
                case 64: LocalAmbientSound("DoomWare/CleanRub2", 127); break;
                case 78: Player_Win(PlayerNumber()); break;
            }
        }

        delay(1);
    }
}

Script "DoomWare_Client_Minigame52" (void) // Gib a Turkey
{
    minigame_instruction1[PlayerNumber()] = "Gib a Turkey";

    // Make the player invincible and give him a fast fist
    setplayerproperty(1, 2, prop_invulnerability);
    GiveInventory("FastFist", 1);
    SetWeapon("FastFist");

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame53" (void) // Drink
{
    minigame_instruction1[PlayerNumber()] = "Drink";
    minigame_instruction2[PlayerNumber()] = "Spam \cdshoot\cg";
    player_viewsprite[PlayerNumber()] = "TNT2A0";

    // Wait until the minigame is over
    while (game_status == STATUS_MINIGAME)
    {
        if( (GetPlayerInput(-1, MODINPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerInput(-1, INPUT_OLDBUTTONS) & BT_ATTACK) )
        {
            str sprite = "ABCDEFGHIJKLMNOOONMMMNOOONMMMNOOONMLKJIHGF";
            if (player_answer1[PlayerNumber()] < 41)
            {
                player_answer1[PlayerNumber()]++;
                Switch (player_answer1[PlayerNumber()])
                {
                    case 16:
                    case 24: LocalAmbientSound("DoomWare/Gulp", 127); break;
                    case 32: LocalAmbientSound("DoomWare/Gulp", 127); Player_Win(PlayerNumber()); break;
                    case 41: LocalAmbientSound("DoomWare/DrinkAh", 127); break;
                }
            }
            player_viewsprite[PlayerNumber()] = StrParam(s:"DRNK", c:GetChar(sprite, player_answer1[PlayerNumber()]), s:"0");
        }

        delay(1);
    }
}

Script "DoomWare_Client_Minigame54" (void) // Survive (Chilli)
{
    minigame_instruction1[PlayerNumber()] = "Survive";

    // Give the player a push staff so he can be a dick
    GiveInventory("PushStaff", 1);
    SetWeapon("PushStaff");

    // Wait until the minigame is over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame55" (void) // Hit the Real Barrel
{
    minigame_instruction1[PlayerNumber()] = "Hit the Real Barrel";

    // Make the player invincible and give him a Mace
    setplayerproperty(1, 2, prop_invulnerability);
    GiveInventory("MaceWeapon", 1);
    SetWeapon("MaceWeapon");

    // Wait until the minigame is over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame56" (void) // Survive (Spike Circle)
{
    minigame_instruction1[PlayerNumber()] = "Survive";

    // Wait until the minigame is over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame57" (void) // Eat The Chocolate
{
    minigame_instruction1[PlayerNumber()] = "Eat The Chocolate";
    minigame_instruction2[PlayerNumber()] = "Spam \cdShoot\cg";
    player_viewsprite[PlayerNumber()] = "TNT2A0";

    // Wait until the minigame is over
    while (game_status == STATUS_MINIGAME)
    {
        if( (GetPlayerInput(-1, MODINPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerInput(-1, INPUT_OLDBUTTONS) & BT_ATTACK) )
        {
            str sprite = "ABCDEFGHIJKLMNOPQRSTUV";
            if (player_answer1[PlayerNumber()] < 21)
                player_answer1[PlayerNumber()]++;
            player_viewsprite[PlayerNumber()] = StrParam(s:"CHOC", c:GetChar(sprite, player_answer1[PlayerNumber()]), s:"0");
            if (player_answer1[PlayerNumber()] == 14)
                Player_Win(PlayerNumber());
        }

        delay(1);
    }
}

Script "DoomWare_Client_Minigame58" (void) // Survive (Wind)
{
    int jumpz = GetActorProperty(0 ,APROP_JumpZ);
    minigame_instruction1[PlayerNumber()] = "Survive";

    // Make the player unable to jump
    SetActorProperty(0 ,APROP_JumpZ, 0<<16);
    SetActorAngle(TID_PLAYER+PlayerNumber(), 0.25);

    // Give the player a push staff so he can be a dick
    GiveInventory("PushStaff", 1);
    SetWeapon("PushStaff");

    // Wait until the minigame is over
    while (game_status == STATUS_MINIGAME)
        delay(1);

    // Let the player jump again
    SetActorProperty(0 ,APROP_JumpZ, jumpz);
}

Script "DoomWare_Client_Minigame59" (void) // Get to Hissy
{
    minigame_instruction1[PlayerNumber()] = "Get to Hissy";

    // Wait until the minigame is over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame60" (void) // Count the Lost Souls
{
    minigame_instruction1[PlayerNumber()] = "Count The Lost Souls";
	
    // Freeze the player
    setplayerproperty(1, 1, PROP_FROZEN );
	
	// Disable the spread wackymod
	if (game_wackymod == WACKYMOD_SPREAD)
		TakeInventory("PowerSpread", 999);

    // Wait until the Lost Souls have stopped appearing
    while (minigame_wincondition1 == 0)
        delay(1);

    // Give the player a Railgun
    GiveInventory("Railgun", 1);
    SetWeapon("Railgun");

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
    {
        str ans = "Your Answer = ";
        for (int i=0; i<2; i++)
            if (player_answer2[PlayerNumber()][i] != -1)
                ans = StrParam(s:ans, d:player_answer2[PlayerNumber()][i]);
        minigame_instruction2[PlayerNumber()] = ans;
        delay(1);
    }

    // Morph the player back
    UnMorphActor(TID_PLAYER+PlayerNumber(), true);
}

Script "DoomWare_Client_Minigame61" (void) // Reach the End (Hurdles)
{
    minigame_instruction1[PlayerNumber()] = "Reach the End";

    // Freeze the player for a min
    setplayerproperty(1, 1, PROP_TOTALLYFROZEN);

    // Wait for the countdown
    while (minigame_canmove == false)
        delay(1);

    // GO!
    setplayerproperty(1, 0, PROP_TOTALLYFROZEN);

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame62" (void) // Cross the Road
{
    minigame_instruction1[PlayerNumber()] = "Cross the Road";

    // Prevent a bug where some player's won't teleport after morphing
    delay(1);

    // Turn the player into a chicken
    str class = "ChickenPlayer2";
	if (game_wackymod == WACKYMOD_SPEED)
		class = "ChickenPlayer2Speed";
    while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
    {
        Player_Morph(PlayerNumber(), class);
        delay(1);
    }

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);

    // Morph the player back
    UnMorphActor(TID_PLAYER+PlayerNumber(), true);
}

Script "DoomWare_Client_Minigame63" (void) // Collect a Potion
{
    minigame_instruction1[PlayerNumber()] = "Collect a Potion";
    minigame_instruction2[PlayerNumber()] = "Attack a thief";

    // Make the player invulnerable and give him a sexy leg
    setplayerproperty(1, 2, prop_invulnerability);
    GiveInventory("Boot", 1);
    SetWeapon("Boot");

    // Make the player win if he got a potion
    while (game_status == STATUS_MINIGAME)
    {
        if (GetActorProperty(0, APROP_Health) > 100 || (game_wackymod == WACKYMOD_1HP && GetActorProperty(0, APROP_Health) > 1))
            Player_Win(PlayerNumber());
        delay(1);
    }

    // Morph the player back
    UnMorphActor(TID_PLAYER+PlayerNumber(), true);
}

Script "DoomWare_Client_Minigame64" (void) // Reach the End (Skyhook)
{
    minigame_instruction1[PlayerNumber()] = "Reach the end";

    // Prevent a bug where some player's won't teleport after morphing
    delay(1);

    // Morph the player into the Outrider and make him fly
    str class = "OutriderPlayer";
    if (game_wackymod == WACKYMOD_SPEED)
        class = "OutriderPlayerSpeed";
    while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
    {
        Player_Morph(PlayerNumber(), class);
        setplayerproperty(1, 1, PROP_FLY );
        SetActorAngle(0, 0.25);
        delay(1);
    }

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
    {
        if (!player_lostround[PlayerNumber()])
        {
            // Allow for air controls
            if (GetUserCVar(PlayerNumber(), "doomware_invertfly"))
                ThrustThingZ(0, ((GetActorPitch(0) >> 8))*2 , 0, 0);
            else
                ThrustThingZ(0, ((GetActorPitch(0) >> 8))*-2 , 0, 0);
        }
        delay(1);
    }

    // Set him back to normal
    StopSound(TID_PLAYER+PlayerNumber(), 6);
    UnMorphActor(TID_PLAYER+PlayerNumber(), true);
    StopSound(TID_PLAYER+PlayerNumber(), 6);
    setplayerproperty(1, 0, PROP_FLY );
}

Script "DoomWare_Client_Minigame65" (void) // Spam the Indicated Button
{
    int errbuff=0;
    int lastbutton = minigame_wincondition2;
    while (game_status == STATUS_MINIGAME)
    {
        int curinput = GetPlayerInput(-1, INPUT_BUTTONS);
        int oldinput = GetPlayerInput(-1, INPUT_OLDBUTTONS);
        
        // Reset the error buffer if the button changed
        if (lastbutton != minigame_wincondition2)
        {
            errbuff = 2;
            lastbutton = minigame_wincondition2;
        }

        // Check the keys the player is pressing
        switch (minigame_wincondition2)
        {
            case 0:
                minigame_instruction1[PlayerNumber()] = "Spam \cdShoot";
                if( (curinput & BT_ATTACK) && !(oldinput & BT_ATTACK) )
                    player_answer1[PlayerNumber()]++;
                else if (((curinput & BT_JUMP) && !(oldinput & BT_JUMP)) || ((curinput & BT_USE) && !(oldinput & BT_USE)))
                    if (player_answer1[PlayerNumber()] != 29)
                        if (errbuff <= 0)
                            player_answer1[PlayerNumber()]--;
                        else
                            errbuff--;
                break;
            case 1:
                minigame_instruction1[PlayerNumber()] = "Spam \ccUse";
                if( (curinput & BT_USE) && !(GetPlayerInput(-1, INPUT_OLDBUTTONS) & BT_USE) )
                    player_answer1[PlayerNumber()]++;
                else if (((curinput & BT_JUMP) && !(oldinput & BT_JUMP)) || ((curinput & BT_ATTACK) && !(oldinput & BT_ATTACK)))
                    if (player_answer1[PlayerNumber()] != 29)
                        if (errbuff <= 0)
                            player_answer1[PlayerNumber()]--;
                        else
                            errbuff--;
                break;
            case 2:
                minigame_instruction1[PlayerNumber()] = "Spam \chJump";
                if( (curinput & BT_JUMP) && !(oldinput & BT_JUMP) )
                {
                    ThrustThingZ(0, 20, 0, 0);
                    player_answer1[PlayerNumber()]++;
                }
                else if (((curinput & BT_USE) && !(oldinput & BT_USE)) || ((curinput & BT_ATTACK) && !(oldinput & BT_ATTACK)))
                    if (player_answer1[PlayerNumber()] != 29)
                        if (errbuff <= 0)
                            player_answer1[PlayerNumber()]--;
                        else
                            errbuff--;
                break;
        }

        // Check if the player won
        if (player_answer1[PlayerNumber()] >= 29)
        {
            player_answer1[PlayerNumber()] = 29;
            Player_Win(PlayerNumber());
        }

        if (player_answer1[PlayerNumber()] < 0)
            player_answer1[PlayerNumber()] = 0;

        // Set the view sprite
        if (player_answer1[PlayerNumber()] < 10)
            player_viewsprite[PlayerNumber()] = StrParam(s:"MASHOM0", d:player_answer1[PlayerNumber()]);
        else
            player_viewsprite[PlayerNumber()] = StrParam(s:"MASHOM", d:player_answer1[PlayerNumber()]);

        delay(1);
    }
}

Script "DoomWare_Client_Minigame66" (void) // Don't Get Wet
{
    minigame_instruction1[PlayerNumber()] = "Don't Get Wet!";

    // Give the player a push staff so he can be a dick
    GiveInventory("PushStaff", 1);
    SetWeapon("PushStaff");

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame67" (void) // Reach the End (Factory Line)
{
    minigame_instruction1[PlayerNumber()] = "Reach the End";
    SetActorAngle(TID_PLAYER+PlayerNumber(), 0.25);

    // Give the player a push staff so he can be a dick
    GiveInventory("PushStaff", 1);
    SetWeapon("PushStaff");

    // Wait until the minigame is over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame68" (void) // Pickup the Key
{
    minigame_instruction1[PlayerNumber()] = "Pick up the assigned key";
    SetActorAngle(TID_PLAYER+PlayerNumber(), 0.25);

    // Check if the player has the right key
    while (game_status == STATUS_MINIGAME)
    {
        if ((minigame_wincondition1 == 0 && CheckInventory("BlueCard") > 0) || (minigame_wincondition1 == 1  && CheckInventory("RedCard") > 0) || (minigame_wincondition1 == 2  && CheckInventory("YellowCard") > 0))
            Player_Win(PlayerNumber());
        delay(1);
    }
}

Script "DoomWare_Client_Minigame69" (void) // Survive (Hell Deathmatch)
{
    minigame_instruction1[PlayerNumber()] = "Survive";
    minigame_instruction2[PlayerNumber()] = "1 Point Per Frag";

    // Stop the player from moving to prevent falling in the lava at the start
    SetActorVelocity(TID_PLAYER+PlayerNumber(), 0.0, 0.0, 0.0, false, false);

    // Give the player a super shotgun
    GiveInventory("Shotgun", 1);
    SetWeapon("Shotgun");

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame70" (void) // Eat Food
{
    if (minigame_wincondition1 == 0)
        minigame_instruction1[PlayerNumber()] = "Eat anything but Sushi";
    else
        minigame_instruction1[PlayerNumber()] = "Eat anything but Tea";

    // Check if the right food has been consumed
    while (game_status == STATUS_MINIGAME)
    {
        int food_count = CheckInventory("Food_EggRoll")+CheckInventory("Food_SalmonRoll1")+CheckInventory("Food_SalmonRoll2")+CheckInventory("Food_Shrimp")+CheckInventory("Food_Toro")+CheckInventory("Food_Tea")+CheckInventory("Food_Sushi1")+CheckInventory("Food_Sushi2");
        
        // Win if the player ate the correct item
        if ((CheckInventory("Food_EggRoll") > 0) || (CheckInventory("Food_SalmonRoll1") > 0) ||
             (CheckInventory("Food_SalmonRoll2") > 0) || (CheckInventory("Food_Shrimp") > 0) ||
             (CheckInventory("Food_Toro") > 0) || (CheckInventory("Food_Tea") > 0 && minigame_wincondition1 == 0 ) ||
            (CheckInventory("Food_Sushi1") > 0 && minigame_wincondition1 == 1) || (CheckInventory("Food_Sushi2") > 0 && minigame_wincondition1 == 1))
            Player_Win(PlayerNumber());

        // Lose if the player ate the wrong item (Even if they won already)
        if ((CheckInventory("Food_Tea") > 0 && minigame_wincondition1 == 1 ) ||
            (CheckInventory("Food_Sushi1") > 0 && minigame_wincondition1 == 0) || (CheckInventory("Food_Sushi2") > 0 && minigame_wincondition1 == 0))
        {
            if (player_wonround[PlayerNumber()] == true)
            {
                player_wonround[PlayerNumber()] = false;
                player_midround[PlayerNumber()] = true;
            }
            Player_Lose(PlayerNumber(), false);
        }
        
        // Kill the player if he's a fatty
        if (food_count > 3)
            Thing_Destroy(TID_PLAYER+PlayerNumber(), 1, 0);

        delay(1);
    }
}

Script "DoomWare_Client_Minigame71" (void) // Find a Pokemon
{
    int pkmn_num=0;
    minigame_instruction1[PlayerNumber()] = "Find a Pokemon";
    minigame_instruction2[PlayerNumber()] = "Search the Grass";

    // Prevent a bug where some player's won't teleport after morphing
    delay(1);

    // Morph the player into Ash
    str class = "AshPlayer";
    
    while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
    {
        Player_Morph(PlayerNumber(), class);
        delay(1);
    }

    // Check if a Pokemon has been caught
    while (game_status == STATUS_MINIGAME)
    {
        if (CheckInventory("PokemonTrigger"))
        {
            switch (pkmn_num)
            {
                case 0:
                    Player_Win(PlayerNumber());
                    SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
                    SetActorVelocity(0, 0, 0, 0, false, false);
                    LocalSetMusic("d_pkmnen");
                    break;
                case 27:
                case 15:
                case 3:
                    fadeto(0, 0, 0, 1.0, 0.0857);
                    break;
                case 30:
                case 18:
                case 6:
                    fadeto(0, 0, 0, 0.0, 0.0857);
                    break;
                case 33:
                case 21:
                case 9:
                    fadeto(255, 255, 255, 1.0, 0.0857);
                    break;
                case 36:
                case 24:
                case 12:
                    fadeto(255, 255, 255, 0.0, 0.0857);
                    break;
                default:
                    if (pkmn_num >= 39)
                    {
                        int spr_num = pkmn_num - 38;
                        if (spr_num > 17)
                        {
                            spr_num = 17;
                            fadeto(0, 0, 0, 1.0, 0.001);
                        }
                        if (spr_num < 10)
                            player_viewsprite[PlayerNumber()] = StrParam(s:"PKMNBT0", d:spr_num);
                        else
                            player_viewsprite[PlayerNumber()] = StrParam(s:"PKMNBT", d:spr_num);
                    }
                    break;
            }
            pkmn_num++;
        }
        delay(1);
    }
    fadeto(0, 0, 0, 0.0, 0.0);
    LocalSetMusic("");
    SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
    UnMorphActor(TID_PLAYER+PlayerNumber(), true);
    delay(1);
    fadeto(0, 0, 0, 0.0, 0.0);
}

Script "DoomWare_Client_Minigame72" (void) // Survive (Disappearing Floor)
{
    minigame_instruction1[PlayerNumber()] = "Survive";
    SetActorAngle(TID_PLAYER+PlayerNumber(), 0.25);

    // Give the player a push staff so he can be a dick
    GiveInventory("PushStaff", 1);
    SetWeapon("PushStaff");

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame73" (void) // Mine an Ore
{
    // Tell the player what to do
    delay(1);
    switch(minigame_wincondition1)
    {
        case 0:
            minigame_instruction1[PlayerNumber()] = "Mine \ccTin";
            break;
        case 1:
            minigame_instruction1[PlayerNumber()] = "Mine \cfGold";
            break;
        case 2:
            minigame_instruction1[PlayerNumber()] = "Mine \chMithril";
            break;
    }

    // Prevent a bug where some player's won't teleport after morphing
    delay(1);

    // Morph the player into Bob and give him a Rune Pick
    str class = "RunescapePlayer";
    while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
    {
        Player_Morph(PlayerNumber(), class);
        GiveInventory("PickaxeWeapon",1);
        SetWeapon("PickaxeWeapon");
        delay(1);
    }

    // Check if the player mined the right element
    while (game_status == STATUS_MINIGAME)
    {
        if (minigame_wincondition1 == 0 && CheckInventory("TinOreItem"))
            Player_Win(PlayerNumber());
        else if (minigame_wincondition1 == 1 && CheckInventory("GoldOreItem"))
            Player_Win(PlayerNumber());
        else if (minigame_wincondition1 == 2 && CheckInventory("MithrilOreItem"))
            Player_Win(PlayerNumber());
        delay(1);
    }

    UnMorphActor(TID_PLAYER+PlayerNumber(), true);
}

Script "DoomWare_Client_Minigame74" (void) // Reach the End (Eclipse)
{
    minigame_instruction1[PlayerNumber()] = "Reach the End";

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame75" (void) // Reach the end (Automap)
{
    minigame_instruction1[PlayerNumber()] = "Reach the end";
    minigame_instruction2[PlayerNumber()] = "Check the automap";

    // Fade the player's screen and randomly rotate them
    FadeTo(0, 0, 0, 1.0, 0.0);
    delay(1);
    FadeTo(0, 0, 0, 1.0, 0.0);
    SetActorAngle(TID_PLAYER+PlayerNumber(), FixedDiv(random(0, 360)<<16, 360.0));

    // Wait for the minigame to end
    while (game_status == STATUS_MINIGAME)
        delay(1);
    
    // Let the player see again
    FadeTo(0, 0, 0, 0.0, 0.0);
    delay(1);
    FadeTo(0, 0, 0, 0.0, 0.0);
}

Script "DoomWare_Client_Minigame76" (void) // Score a Basketball
{
    minigame_instruction1[PlayerNumber()] = "Score a Basketball";

    // Give the player a basketball
    GiveInventory("BBallLauncher",1);
    GiveInventory("RocketAmmo",100);

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame77" (void) // Reach the End (Jumping Scroller)
{
    minigame_instruction1[PlayerNumber()] = "Reach the End";

    // Prevent a bug where some player's won't teleport after morphing
    delay(1);

    // Make the player only able to jump
    str class = "JumpPlayer";
    while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
    {
        Player_Morph(PlayerNumber(), class);
        setplayerproperty(1, 1, PROP_FROZEN );
        SetActorAngle(0, 0.25);
        SetActorVelocity(0, 0.0, 0.0, 0.0, false, true);
        Force_Observe(709);
        delay(1);
    }

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);

    UnMorphActor(TID_PLAYER+PlayerNumber(), true);
}

Script "DoomWare_Client_Minigame78" (void) // Shoot the Apple Off the Imp's Head
{
    minigame_instruction1[PlayerNumber()] = "Shoot the Apple Off The Imp's Head";

    // Give the player a bow and arrow and make him invulnerable+frozen
    SetActorVelocity(0, 0.0, 0.0, 0.0, false, true);
    setplayerproperty(1, 1, PROP_FROZEN );
    GiveInventory("BowArrow",1);
    SetWeapon("BowArrow");
    setplayerproperty(1, 2, prop_invulnerability);

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame79" (void) // Shoot an Imp
{
    minigame_instruction1[PlayerNumber()] = "Shoot an Imp";

    // Give the player a Railgun
    GiveInventory("Railgun", 1);
    SetWeapon("Railgun");

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame80" (void) // Survive (Pyoro)
{
    int jumpz = GetActorProperty(0 ,APROP_JumpZ);
    int speed = GetActorProperty(0, APROP_Speed);

    // Make the player unable to jump
    minigame_instruction1[PlayerNumber()] = "Survive";
    Force_Observe(813);

    // Invert the player's controls and make him unable to jump
    SetActorProperty(0, APROP_Speed, -GetActorProperty(0, APROP_Speed));
    SetActorProperty(0, APROP_JumpZ, 0<<16);

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
    {
        // Make the player always look towards the camera
        SetActorAngle(0, 0.75);
        delay(1);
    }

    // Re-invert the player's controls and let him jump again
    SetActorProperty(0, APROP_Speed, speed);
    SetActorProperty(0, APROP_JumpZ, jumpz);
}

Script "DoomWare_Client_Minigame81" (void) // Dodge the Car
{
    int jumpz = GetActorProperty(0 ,APROP_JumpZ);
    int speed = GetActorProperty(0, APROP_Speed);

    // Make the player unable to jump
    minigame_instruction1[PlayerNumber()] = "Dodge the Car";
    Force_Observe(815);

    // Make the player unable to move and make him jump much higher
    SetActorProperty(0, APROP_Speed, 0);
    SetActorProperty(0, APROP_JumpZ, FixedMul(jumpz, 1.5));

    SetActorVelocity(0, 0.0, 0.0, 0.0, false, false);

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
    {
        // Make the player always look right
        SetActorAngle(0, 1.0);
        delay(1);
    }

    // Put the player back to normal
    SetActorProperty(0, APROP_Speed, speed);
    SetActorProperty(0, APROP_JumpZ, jumpz);
}

Script "DoomWare_Client_Minigame82" (void) // Whack a Diglett
{
    minigame_instruction1[PlayerNumber()] = "Whack a Diglett";

    // Make the player invincible and give him a Mace
    setplayerproperty(1, 2, prop_invulnerability);
    GiveInventory("MaceWeapon", 1);
    SetWeapon("MaceWeapon");

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame83" (void) // Charge ur Laz0r
{
    minigame_instruction1[PlayerNumber()] = "Charge ur Laz0r";
    minigame_instruction2[PlayerNumber()] = "Spam \cdshoot\cg. 1 Point Per Frag";
    player_viewsprite[PlayerNumber()] = "TNT2A0";

    // Wait until the minigame is over
    while (game_status == STATUS_MINIGAME)
    {
        // If the player lost, don't let him be able to win
        if (player_lostround[PlayerNumber()])
        {
            player_viewsprite[PlayerNumber()] = "TNT2A0";
            delay(1);
            continue;
        }

        // If he reached a certain score, increment the animation automatically
        if (player_answer1[PlayerNumber()] >= 22 && player_answer1[PlayerNumber()] < 31)
            player_answer1[PlayerNumber()]++;

        // On pressing attack
        if( (GetPlayerInput(-1, MODINPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerInput(-1, INPUT_OLDBUTTONS) & BT_ATTACK) )
        {
            // Spawn the aura if it's the first click
            if (player_answer1[PlayerNumber()] == 0)
            {
                SpawnSpotForced("Aura", TID_PLAYER+PlayerNumber(), TID_EXTRA+PlayerNumber(), 0);
                Thing_Projectile(TID_PLAYER+PlayerNumber(), 252, (GetActorAngle(TID_PLAYER+PlayerNumber())>>8)+64, 24, 0);
                Thing_Projectile(TID_PLAYER+PlayerNumber(), 252, (GetActorAngle(TID_PLAYER+PlayerNumber())>>8)-64, 24, 0);
            }

            // Increment the view sprite
            if (player_answer1[PlayerNumber()] < 22)
                player_answer1[PlayerNumber()]++;

            // Fire the Laz0r when ready
            if (player_answer1[PlayerNumber()] == 22)
            {
                GiveInventory("Laz0r", 1);
                SetWeapon("Laz0r");

                Player_Win(PlayerNumber());
            }
        }

        // Select the viewsprite
        if (player_answer1[PlayerNumber()] == 31 || player_answer1[PlayerNumber()] == 0)
            player_viewsprite[PlayerNumber()] = "TNT2A0";
        else
            player_viewsprite[PlayerNumber()] = StrParam(s:"LAZR", d:player_answer1[PlayerNumber()]-1);

        delay(1);
    }
}

Script "DoomWare_Client_Minigame84" (void) // Stay on the Road
{
    minigame_instruction1[PlayerNumber()] = "Stay on the Road";
    minigame_instruction2[PlayerNumber()] = "\ckStrafe\cg to steer";

    // Prevent a bug where some player's won't teleport after morphing
    delay(1);

    // Morph the player into a kart and freeze him
    str class = "BusPlayer";
    while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
    {
        Player_Morph(PlayerNumber(), class);
        delay(1);
    }

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
    {
        if (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) == 0)
        {
            SetActorPitch(TID_PLAYER+PlayerNumber(), 0.0);
            SetActorAngle(TID_PLAYER+PlayerNumber(), 0.25);
        }
        delay(1);
    }

    // Set him back to normal
    StopSound(TID_PLAYER+PlayerNumber(), 6);
    UnMorphActor(TID_PLAYER+PlayerNumber(), true);
    StopSound(TID_PLAYER+PlayerNumber(), 6);
}

Script "DoomWare_Client_Minigame85" (void) // Survive (Time Freeze)
{
    int time = 0;
    minigame_instruction1[PlayerNumber()] = "Survive";
    minigame_instruction2[PlayerNumber()] = "1 Point Per Frag";

    // Give players a grenade launcher
    GiveInventory("GrenadeLauncher", 1);
    SetWeapon("GrenadeLauncher");
	TakeInventory("RocketAmmo", 999);
	GiveInventory("RocketAmmo", 5);

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
    {
        time++;

        // If time's unfreezing, remove the grenade launcher so we don't get cheeky players
        if (time > SECOND*6)
            TakeInventory("GrenadeLauncher", 1);
        delay(1);
    }
}

Script "DoomWare_Client_Minigame86" (void) // Reach the End (Chasm)
{
    minigame_instruction1[PlayerNumber()] = "Reach the end";

    // Give the player a push staff so he can be a dick
    GiveInventory("PushStaff", 1);
    SetWeapon("PushStaff");
    
    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame87" (void) // Be the Highest Player
{
    minigame_instruction1[PlayerNumber()] = "Be the highest player";

    // Give the player a push staff so he can be a dick
    GiveInventory("PushStaff", 1);
    SetWeapon("PushStaff");
    
    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame88" (void) // Choose a Side
{
    int jumpz = GetActorProperty(0 ,APROP_JumpZ);
    int speed = GetActorProperty(0, APROP_Speed);
    minigame_instruction1[PlayerNumber()] = "Choose a side";
    minigame_instruction2[PlayerNumber()] = "The heaviest side will fall";
    Force_Observe(898);

    // Invert the player's controls and make him unable to jump
	SetActorProperty(0, APROP_Speed, -GetActorProperty(0, APROP_Speed));
    SetActorProperty(0 ,APROP_JumpZ, 0<<16);

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
    {
        // Make the player always look towards the camera
        SetActorAngle(0, 0.75);
        delay(1);
    }

    // Re-invert the player's controls and let him jump again
    SetActorProperty(0, APROP_Speed, speed);
    SetActorProperty(0, APROP_JumpZ, jumpz);
}

Script "DoomWare_Client_Minigame89" (void) // Abandon Ship
{
    minigame_instruction1[PlayerNumber()] = "Abandon Ship";

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame90" (void) // Survive (Captain Falcon)
{
    minigame_instruction1[PlayerNumber()] = "Survive";
    minigame_instruction2[PlayerNumber()] = "1 Point Per Frag";
    
    // Morph the player into Captain Falcon
    str class = "CFalconPlayer";
	if (game_wackymod == WACKYMOD_RAGE)
		class = "CFalconPlayerRage";
    while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
    {
        Player_Morph(PlayerNumber(), class);
        delay(1);
    }

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
        
    // Unmorph the player and unfreeze them if they were
    UnMorphActor(TID_PLAYER+PlayerNumber(), true);
    SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
}

Script "DoomWare_Client_Minigame91" (void) // Reach the End (Golden Idol)
{
    minigame_instruction1[PlayerNumber()] = "Reach the End";
    minigame_instruction2[PlayerNumber()] = "Grab the \ckGolden Key";
    
    // Give the player a push staff so he can be a dick
    GiveInventory("PushStaff", 1);
    SetWeapon("PushStaff");

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame92" (void) // Pet Daisy :)
{
    minigame_instruction1[PlayerNumber()] = "Pet Daisy :)";
    minigame_instruction2[PlayerNumber()] = "Click \cdShoot\cg to pet";
    
    // Make the player invulnerable and give them hands to pet with
    SetPlayerProperty(1, 2, prop_invulnerability);
    GiveInventory("PetWeapon", 1);
    SetWeapon("PetWeapon");

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame93" (void) // Choose a Source Port
{
    minigame_instruction1[PlayerNumber()] = "Pick a source port";

    // While the game is running
    while (game_status == STATUS_MINIGAME)
    {
        // If the win condition changed
        if (minigame_wincondition1 != 0)
        {
            // Give the player a push staff so he can be a dick
            if (CheckInventory("PushStaff") == 0)
            {
                GiveInventory("PushStaff", 1);
                SetWeapon("PushStaff");
            }
            
            // Show the correct win condition
            if (minigame_wincondition1 == 1)
                minigame_instruction1[PlayerNumber()] = "Pick the \cdmost popular\ci source port";
            else if (minigame_wincondition1 == 2)
                minigame_instruction1[PlayerNumber()] = "Pick the \cgleast popular\ci source port";
        }
        delay(1);
    }
}

Script "DoomWare_Client_Minigame94" (void) // Survive (Meteors)
{
    minigame_instruction1[PlayerNumber()] = "Survive";

    // Wait until the minigame is over
    while (game_status == STATUS_MINIGAME)
        delay(1);
}

Script "DoomWare_Client_Minigame95" (void) // Survive (F.E.A.R. Deathmatch)
{
    minigame_instruction1[PlayerNumber()] = "Survive";
    minigame_instruction2[PlayerNumber()] = "1 Point Per Frag";
	
	// Morph the player into a Replica Soldier
    str class = "ReplicaPlayer";
    while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
    {
        Player_Morph(PlayerNumber(), class);
        delay(1);
    }
	
	// Play a slow mo sound
	LocalAmbientSound("DoomWare/SlowMo", 127);

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
        delay(1);
        
    // Unmorph the player
    UnMorphActor(TID_PLAYER+PlayerNumber(), true);
}

Script "DoomWare_Client_Minigame96" (void) // Survive (Mr. Shifty Deathmatch)
{
    minigame_instruction1[PlayerNumber()] = "Survive";
    minigame_instruction2[PlayerNumber()] = "1 Point Per Frag";
    minigame_instruction3[PlayerNumber()] = "Press your \ccUse key\cg to Shift";
	
	// Morph the player into a Replica Soldier
    str class = "ShiftyPlayer";
    while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
    {
        Player_Morph(PlayerNumber(), class);
        delay(1);
    }
	
    // Wait until the game's over
	int nextammo = 0;
    while (game_status == STATUS_MINIGAME)
	{
        // Allow players to shifty with their Use key
        if (!Check_Player_Lost(PlayerNumber()) && (GetPlayerInput(-1, MODINPUT_BUTTONS) & BT_USE) && !(GetPlayerInput(-1, INPUT_OLDBUTTONS) & BT_USE) && CheckInventory("ShiftyAmmo") > 0)
		{
			int aim = GetActorAngle(0);
			int dist = 160.0;
			int x = GetActorX(0), y = GetActorY(0), z = GetActorZ(0);
			str sound = "DoomWare/Shift";
			SpawnForced("MapSpot", x+FixedMul(Cos(aim), dist), y+FixedMul(Sin(aim), dist), z, TID_REMOVE+PlayerNumber());
			
			// If the player successfully teleported
			if (Thing_move(TID_PLAYER+PlayerNumber(), TID_REMOVE+PlayerNumber(), true))
			{
				// Spawn a shifty effect where they were before
				SpawnForced("ShiftyEffect", x, y, z+16.0, 0, 0);
				SpawnSpotForced("ShiftyEffect2", TID_PLAYER+PlayerNumber(), 0, 0);
				
				// Take away some ammo and reset the ammo timer
				TakeInventory("ShiftyAmmo", 1);
				if (CheckInventory("ShiftyAmmo") == 0)
				{
					sound = "DoomWare/ShiftLast";
					nextammo = SECOND*3;
				}
				else
					nextammo = 20;
			}
			else
				sound = "DoomWare/ShiftFail";
			
			// Play a sound and remove the map spot
			ThingSound(TID_PLAYER+PlayerNumber(), sound, 127);
			LocalAmbientSound(sound, 127);
			Thing_Remove(TID_REMOVE+PlayerNumber());
		}
		
		// Give more shift ammo over time
		if (CheckInventory("ShiftyAmmo") < 5 && nextammo > 0)
		{
			nextammo--;
			if (nextammo == 0)
			{
				if (CheckInventory("ShiftyAmmo") == 0)
				{
					GiveInventory("ShiftyAmmo", 5);
					LocalAmbientSound("DoomWare/ShiftRestore", 127);
				}
				else
				{
					GiveInventory("ShiftyAmmo", 1);
					nextammo = 20;
				}
			}
		}
		
		// Restart the while loop
        delay(1);
	}
        
    // Unmorph the player
    UnMorphActor(TID_PLAYER+PlayerNumber(), true);
}

Script "DoomWare_Client_Minigame97" (void) // Survive (Rocket Pattern)
{
    minigame_instruction1[PlayerNumber()] = "Survive";
	
	// Allow the player to fly
	SetPlayerProperty(1, 1, PROP_FLY);
	
    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
		delay(1);
}

Script "DoomWare_Client_Minigame98" (void) // Reach the End (Batman)
{
    minigame_instruction1[PlayerNumber()] = "Reach the end";
	
	// Morph the player into the Dark Knight
    str class = "BatmanPlayer";
    while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
    {
        Player_Morph(PlayerNumber(), class);
        delay(1);
    }
	
    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
		delay(1);
        
    // Unmorph the player
    UnMorphActor(TID_PLAYER+PlayerNumber(), true);
}

Script "DoomWare_Client_Minigame99" (void) // Put Yourself Out
{
    minigame_instruction1[PlayerNumber()] = "Put Yourself Out";
	
    // Wait for the sick beat to drop
    while (minigame_Wincondition1 == 0)
		delay(1);
	
	// Set the player on fire
    str class = "FirePlayer";
    while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
    {
		MorphActor(TID_PLAYER+PlayerNumber(), class, 1, minigame_timer+SECOND, MRF_NEWTIDBEHAVIOUR, "Nothing", "Nothing");
		FadeTo(255, 105, 0, 0.2, 0.0);
        delay(1);
    }
	
    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
	{
		bool onfire = !StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class);
		if (minigame_wincondition1 == 2)
		{
			// If the player touches water, extinguish them
			if (onfire)
			{
				int insector = 0;
				if (minigame_wincondition2 == 0 || minigame_wincondition2 == 1)
					insector +=	ThingCountSector(T_NONE, TID_PLAYER+PlayerNumber(), 20) +
								ThingCountSector(T_NONE, TID_PLAYER+PlayerNumber(), 21) + 
								ThingCountSector(T_NONE, TID_PLAYER+PlayerNumber(), 22);
				if (minigame_wincondition2 == 0 || minigame_wincondition2 == 2)
					insector +=	ThingCountSector(T_NONE, TID_PLAYER+PlayerNumber(), 691) +
								ThingCountSector(T_NONE, TID_PLAYER+PlayerNumber(), 692) + 
								ThingCountSector(T_NONE, TID_PLAYER+PlayerNumber(), 693);
				if (insector != 0)
				{
					UnMorphActor(TID_PLAYER+PlayerNumber(), true);
					PlaySound(TID_PLAYER+PlayerNumber(), "DoomWare/Extinguish", CHAN_VOICE);
					SpawnSpotForced("ExtinguishEffect", TID_PLAYER+PlayerNumber(), 0, 0);
					FadeTo(255, 155, 255, 0.0, 0.0);
				}
			}
			
			// If we're not on fire, and we bump into someone else on fire, set ourselves on fire
			if (!onfire)
			{
				for (int i=0; i<MAXPLAYERS; i++)
				{
					if (!PlayerInGame(i) || i == PlayerNumber())
						continue;
					if (!StrCmp(GetActorClass(TID_PLAYER+i), class) && Distance(TID_PLAYER+i, TID_PLAYER+PlayerNumber()) < 32)
					{
						MorphActor(TID_PLAYER+PlayerNumber(), class, 1, minigame_timer+SECOND, MRF_NEWTIDBEHAVIOUR, "Nothing", "Nothing");
						FadeTo(255, 105, 0, 0.2, 0.0);
					}
				}
			}
		}
		delay(3); // Don't do this every frame, be nice to the server
	}
	FadeTo(255, 155, 255, 0.0, 0.0);
}

Script "DoomWare_Client_Minigame100" (void) // Match the Demon
{
	minigame_instruction1[PlayerNumber()] = "Watch";
		
    // Freeze the player
    setplayerproperty(1, 1, PROP_FROZEN );

    // Wait for the next part of the minigame
    while (minigame_wincondition1 == 0)
		delay(1);

	// Give the new instructions
	minigame_instruction1[PlayerNumber()] = "Match the Demon";

    // Wait until the game's over
    while (game_status == STATUS_MINIGAME)
		delay(1);
}


/*===================================================================================================
                                    1v1 TieBreakers (Clientside)
===================================================================================================*/

Script "DoomWare_Client_TieBreaker1" (void) // Gun Duel
{
    minigame_instruction1[PlayerNumber()] = "Wait for the signal";
    minigame_instruction2[PlayerNumber()] = "Shoot the other player";

    // Give the player a weapon if they're in the game, or force them to observe
    delay(1);
    if (PlayerNumber() == game_highnames[0] || PlayerNumber() == game_highnames[1])
    {
        SetActorVelocity(0, 0.0, 0.0, 0.0, false, true);
        setplayerproperty(1, 1, PROP_FROZEN);
        SetActorProperty(0, APROP_HEALTH, 1);
        GiveInventory("Pistol", 1);
        SetWeapon("Pistol");
    }
    else
        Force_Observe(PlayerNumber());

    // Kill the player if they shoot too soon (to prevent holding the shoot button)
    while (minigame_canmove == false)
    {
        if ((PlayerNumber() == game_highnames[0] || PlayerNumber() == game_highnames[1]) && (GetPlayerInput(-1, MODINPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerInput(-1, INPUT_OLDBUTTONS) & BT_ATTACK))
            Thing_Destroy(TID_PLAYER+PlayerNumber(), 0);
        delay(1);
    }

    // It's showtime!
    minigame_instruction1[PlayerNumber()] = "Go!";
    LocalAmbientSound("DoomWare/TieStart", 127);

    // Wait until the game's over
    while (game_status == STATUS_TIEBREAK)
        delay(1);

    // Unfreeze frozen players
    SetPlayerProperty(1, 0, PROP_FROZEN);
}

Script "DoomWare_Client_TieBreaker2" (void) // Tug O War
{
    int plyx, plyy, plyz;

    minigame_instruction1[PlayerNumber()] = "Wait for the signal";
    minigame_instruction2[PlayerNumber()] = "Press your \cdShoot\cg key to repeatedly tug the rope";
    minigame_wincondition1 = 0;

    // Move the players
    if (PlayerNumber() == game_highnames[0] || PlayerNumber() == game_highnames[1])
    {
        SetActorVelocity(0, 0.0, 0.0, 0.0, false, true);
        setplayerproperty(1, 1, PROP_FROZEN);
    }
    else
        Force_Observe(PlayerNumber());
		
	// Start a clientside script to handle the rope texture
	ACS_NamedExecuteAlways("DoomWare_RopeScroll", 0, TID_PLAYER+game_highnames[0], TID_PLAYER+game_highnames[1]);

    // Kill the player if they press shoot too soon
    while (minigame_canmove == false)
    {
        if ((PlayerNumber() == game_highnames[0] || PlayerNumber() == game_highnames[1]) && (GetPlayerInput(-1, MODINPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerInput(-1, INPUT_OLDBUTTONS) & BT_ATTACK))
            Thing_Destroy(TID_PLAYER+PlayerNumber(), 0);
        delay(1);
    }

    // Showtime!
    LocalAmbientSound("DoomWare/TieStart", 127);
    minigame_instruction1[PlayerNumber()] = "Go!";

    while (game_status == STATUS_TIEBREAK)
    {
        int ply1 = game_highnames[0];
        int ply2 = game_highnames[1];
        minigame_wincondition1 = 0;
        if ((PlayerNumber() == ply1 || PlayerNumber() == ply2) && (GetPlayerInput(-1, MODINPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerInput(-1, INPUT_OLDBUTTONS) & BT_ATTACK))
        {
            if (PlayerNumber() == ply1 && !player_lostround[ply1] && GetActorY(TID_PLAYER+ply1) < 1848.0)
            {
                minigame_wincondition1++;
                SetActorPosition(TID_PLAYER+ply2, GetActorX(TID_PLAYER+ply2), GetActorY(TID_PLAYER+ply2)-3.0, GetActorZ(TID_PLAYER+ply2), false);
                SetActorPosition(TID_PLAYER+ply1, GetActorX(TID_PLAYER+ply1), GetActorY(TID_PLAYER+ply1)-3.0, GetActorZ(TID_PLAYER+ply1), false);
            }
            if (PlayerNumber() == ply2 && !player_lostround[ply2] && GetActorY(TID_PLAYER+ply2) > 1992.0)
            {
                minigame_wincondition1--;
                SetActorPosition(TID_PLAYER+ply1, GetActorX(TID_PLAYER+ply1), GetActorY(TID_PLAYER+ply1)+3.0, GetActorZ(TID_PLAYER+ply1), false);
                SetActorPosition(TID_PLAYER+ply2, GetActorX(TID_PLAYER+ply2), GetActorY(TID_PLAYER+ply2)+3.0, GetActorZ(TID_PLAYER+ply2), false);
            }
        }
        delay(1);
    }
    setplayerproperty(1, 0, PROP_FROZEN);
    SetActorPosition(TID_PLAYER+PlayerNumber(), plyx, plyy, plyz, 0);
    SpawnSpotForced("TeleportFog", TID_PLAYER+PlayerNumber(), 0, 0);
}

Script "DoomWare_Client_TieBreaker3" (void) // Barrel Duel
{
    minigame_instruction1[PlayerNumber()] = "Wait for the signal";
    minigame_instruction2[PlayerNumber()] = "Kill the other player";

    // Give the player a weapon if they're in the game, or force them to observe
    if (PlayerNumber() == game_highnames[0] || PlayerNumber() == game_highnames[1])
    {
        SetActorVelocity(0, 0.0, 0.0, 0.0, false, true);
        setplayerproperty(1, 1, PROP_FROZEN);
        SetActorProperty(0, APROP_HEALTH, 1);
        GiveInventory("Pistol", 1);
        SetWeapon("Pistol");
    }
    else
        Force_Observe(PlayerNumber());

    // Kill the player if they shoot too soon (to prevent holding the shoot button)
    while (minigame_canmove == false)
    {
        if ((PlayerNumber() == game_highnames[0] || PlayerNumber() == game_highnames[1]) && (GetPlayerInput(-1, MODINPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerInput(-1, INPUT_OLDBUTTONS) & BT_ATTACK))
            Thing_Destroy(TID_PLAYER+PlayerNumber(), 0);
        delay(1);
    }

    // It's showtime!
    minigame_instruction1[PlayerNumber()] = "Go!";
    LocalAmbientSound("DoomWare/TieStart", 127);

    // Wait until the game's over
    while (game_status == STATUS_TIEBREAK)
        delay(1);

    // Unfreeze frozen players
    SetPlayerProperty(1, 0, PROP_FROZEN);
}

Script "DoomWare_Client_TieBreaker4" (void) // Score (Pong)
{
    minigame_instruction1[PlayerNumber()] = "Wait for the signal";
    minigame_instruction2[PlayerNumber()] = "Score";

    // Freeze the player if they're in the game, or force them to observe
    if (PlayerNumber() == game_highnames[0] || PlayerNumber() == game_highnames[1])
    {
        SetActorVelocity(0, 0.0, 0.0, 0.0, false, true);
        setplayerproperty(1, 1, PROP_FROZEN);
    }
    else
        Force_Observe(PlayerNumber());

    // Wait for the signal
    while (minigame_canmove == false)
        delay(1);

    // It's showtime!
    minigame_instruction1[PlayerNumber()] = "Go!";
    LocalAmbientSound("DoomWare/TieStart", 127);
    SetPlayerProperty(1, 0, PROP_FROZEN);

    // Wait until the game's over
    while (game_status == STATUS_TIEBREAK)
        delay(1);
}

Script "DoomWare_Client_TieBreaker5" (void) // Hit the Keys in Order
{
	int curkey = 0;
	str answerstring;
    minigame_instruction1[PlayerNumber()] = "Wait for the signal";
    minigame_instruction2[PlayerNumber()] = "Hit the Keys in Order";

    // Freeze the player if they're in the game, and force everyone to observe
    if (PlayerNumber() == game_highnames[0] || PlayerNumber() == game_highnames[1])
    {
		str class;
		
		// Initialize the player
		SetPlayerProperty(1, 1, PROP_FLY);
        SetActorVelocity(0, 0.0, 0.0, 0.0, false, true);
        Player_FreezeTotally(PlayerNumber());
		
		// Morph the player into a Z-Fighter
		class = "ZFighterPlayer";
		while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
		{
			Player_Morph(PlayerNumber(), class);
			delay(1);
		}
    }
	Force_Observe(PlayerNumber());

    // Wait for the signal
    while (minigame_canmove == false)
        delay(1);

    // It's showtime!
    minigame_instruction1[PlayerNumber()] = "Go!";
    LocalAmbientSound("DoomWare/TieStart", 127);

    // Handle key pressing
	answerstring = StrParam(d:minigame_wincondition1);
    while (game_status == STATUS_TIEBREAK)
    {
		if (PlayerNumber() == game_highnames[0] || PlayerNumber() == game_highnames[1])
		{
			int oldkey = curkey;
			int curinput = GetPlayerInput(-1, INPUT_BUTTONS);
			int oldinput = GetPlayerInput(-1, INPUT_OLDBUTTONS);
			
			// Check which key the player pressed
			if (curkey < 4 && ClassifyActor(TID_PLAYER+PlayerNumber()) & ACTOR_ALIVE)
			{
				// Check for key presses
				switch (GetChar(answerstring, curkey))
				{
					case '1':
						if ((curinput & BT_ATTACK) && !(oldinput & BT_ATTACK))
							player_answer2[PlayerNumber()][curkey++] = 1;
						else if (((curinput & BT_JUMP) && !(oldinput & BT_JUMP)) || ((curinput & BT_USE) && !(oldinput & BT_USE)))
							Thing_Damage(TID_PLAYER+PlayerNumber(), 1337, MOD_HIT);
						break;
					case '2':
						if ((curinput & BT_USE) && !(GetPlayerInput(-1, INPUT_OLDBUTTONS) & BT_USE))
							player_answer2[PlayerNumber()][curkey++] = 2;
						else if (((curinput & BT_JUMP) && !(oldinput & BT_JUMP)) || ((curinput & BT_ATTACK) && !(oldinput & BT_ATTACK)))
							Thing_Damage(TID_PLAYER+PlayerNumber(), 1337, MOD_HIT);
						break;
					case '3':
						if ((curinput & BT_JUMP) && !(oldinput & BT_JUMP))
							player_answer2[PlayerNumber()][curkey++] = 3;
						else if (((curinput & BT_USE) && !(oldinput & BT_USE)) || ((curinput & BT_ATTACK) && !(oldinput & BT_ATTACK)))
							Thing_Damage(TID_PLAYER+PlayerNumber(), 1337, MOD_HIT);
						break;
				}
				
				// If we sucessfully pressed the correct key, lower the arrow
				if (oldkey != curkey)
				{
					int loweramount = 24;
					if (curkey == 4)
						loweramount = 256;

					if (PlayerNumber() == game_highnames[0])
						Floor_LowerByValue(1096, 512, loweramount);
					else
						Floor_LowerByValue(1097, 512, loweramount);
				}
			}
		}
        delay(1);
	}
		
	// Put the player back to normal
	if (PlayerNumber() == game_highnames[0] || PlayerNumber() == game_highnames[1])
    {
		Player_UnFreezeTotally(PlayerNumber());
		UnMorphActor(TID_PLAYER+PlayerNumber(), true);
	}
}


/*===================================================================================================
                                  Non 1v1 TieBreakers (Clientside)
===================================================================================================*/

Script "DoomWare_Client_TieBreakerM1" (void) // Grenade Launcher Duel
{
    minigame_instruction1[PlayerNumber()] = "Wait for the signal";
    minigame_instruction2[PlayerNumber()] = "Survive. Kills give you a 1Up";

    // Give the player a weapon if they're in the game, or force them to observe
    delay(1);
    if (game_score[PlayerNumber()] == game_highscores[0])
    {
        SetActorVelocity(0, 0.0, 0.0, 0.0, false, true);
        GiveInventory("GrenadeLauncher", 1);
        GiveInventory("RocketBox", 20);
        SetWeapon("GrenadeLauncher");
        SetPlayerProperty(1, 1, PROP_FROZEN);
    }
    else
        Force_Observe(PlayerNumber());

    // Don't allow the player to shoot while he waits for the round to begin
    while (minigame_canmove == false)
    {
        if ((GetPlayerInput(-1, MODINPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerInput(-1, INPUT_OLDBUTTONS) & BT_ATTACK))
            Thing_Destroy(TID_PLAYER+PlayerNumber(), 0);
        delay(1);
    }

    // It's showtime!
    minigame_instruction1[PlayerNumber()] = "Go!";
    LocalAmbientSound("DoomWare/TieStart", 127);
    SetPlayerProperty(1, 0, PROP_FROZEN);

    // Wait until the game's over
    while (game_status == STATUS_TIEBREAKM)
        delay(1);
}

Script "DoomWare_Client_TieBreakerM2" (void) // Survive (Decreasing Ring)
{
    minigame_instruction1[PlayerNumber()] = "Wait for the signal";
    minigame_instruction2[PlayerNumber()] = "Survive.";

    // Give the player a weapon if they're in the game, or force them to observe
    delay(1);
    if (game_score[PlayerNumber()] == game_highscores[0])
    {
        SetActorVelocity(0, 0.0, 0.0, 0.0, false, true);
        GiveInventory("PushStaff", 1);
        SetWeapon("PushStaff");
        SetPlayerProperty(1, 1, PROP_FROZEN);
    }
    else
        Force_Observe(PlayerNumber());

    // Don't allow the player to attack while he waits for the round to begin
    while (minigame_canmove == false)
    {
        if ((GetPlayerInput(-1, MODINPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerInput(-1, INPUT_OLDBUTTONS) & BT_ATTACK))
            Thing_Destroy(TID_PLAYER+PlayerNumber(), 0);
        delay(1);
    }

    // It's showtime!
    minigame_instruction1[PlayerNumber()] = "Go!";
    LocalAmbientSound("DoomWare/TieStart", 127);
    SetPlayerProperty(1, 0, PROP_FROZEN);

    // Wait until the game's over
    while (game_status == STATUS_TIEBREAKM)
    {
        if (GetActorZ(TID_PLAYER+PlayerNumber()) < -128.0)
                Thing_Destroy(TID_PLAYER+PlayerNumber(), 0);
        delay(1);
    }
}

Script "DoomWare_Client_TieBreakerM3" (void) // Hit the Target (One Shot)
{
    minigame_instruction1[PlayerNumber()] = "Wait for the signal";
    minigame_instruction2[PlayerNumber()] = "Shoot the target.";

    // Give the player a weapon if they're in the game, or force them to observe
    delay(1);
    if (game_score[PlayerNumber()] == game_highscores[0])
    {
        SetActorVelocity(0, 0.0, 0.0, 0.0, false, true);
        GiveInventory("Railgun", 1);
        SetWeapon("Railgun");
        SetPlayerProperty(1, 1, PROP_FROZEN);
    }
    else
        Force_Observe(PlayerNumber());

    // Wait for the minigame to start
    while (minigame_canmove == false)
        delay(1);

    // It's showtime!
    minigame_instruction1[PlayerNumber()] = "Go!";
    LocalAmbientSound("DoomWare/TieStart", 127);
    SetPlayerProperty(1, 0, PROP_FROZEN);

    // Wait until the game's over
    while (game_status == STATUS_TIEBREAKM)
        delay(1);
}

Script "DoomWare_Client_TieBreakerM4" (void) // Survive (Brawler)
{
	int lastangle;
	str class;
    int speed = GetActorProperty(0, APROP_Speed);
    minigame_instruction1[PlayerNumber()] = "Wait for the signal";
    minigame_instruction2[PlayerNumber()] = "Survive. Kills give you a 1Up.";

    // Initialize the player, then force them to observe
    delay(1);
    if (game_score[PlayerNumber()] == game_highscores[0])
    {
        SetActorVelocity(0, 0.0, 0.0, 0.0, false, true);
        SetPlayerProperty(1, 1, PROP_FROZEN);
		
		// Morph the player into a Brawler
		class = "BrawlerPlayer";
		while (StrCmp(GetActorClass(TID_PLAYER+PlayerNumber()), class) != 0)
		{
			Player_Morph(PlayerNumber(), class);
			delay(1);
		}
		
		// Correct the player direction	
		SetActorProperty(0, APROP_Speed, -GetActorProperty(0, APROP_Speed));
		if (GetActorAngle(TID_PLAYER+PlayerNumber()) != 0)
			GiveInventory("BrawlerLeft", 1);
    }
	Force_Observe(PlayerNumber());

    // Wait for the game to start
	lastangle = GetActorAngle(0);
    while (minigame_canmove == false)
		delay(1);

    // It's showtime!
    minigame_instruction1[PlayerNumber()] = "Go!";
    LocalAmbientSound("DoomWare/TieStart", 127);
    SetPlayerProperty(1, 0, PROP_FROZEN);

    // Wait until the game's over
    while (game_status == STATUS_TIEBREAKM)
	{
		if ((GetPlayerInput(-1, MODINPUT_BUTTONS) & BT_MOVELEFT) && CheckInventory("BrawlerLeft") == 0)
			GiveInventory("BrawlerLeft", 1);
		else if ((GetPlayerInput(-1, MODINPUT_BUTTONS) & BT_MOVERIGHT) && CheckInventory("BrawlerLeft") != 0)
			TakeInventory("BrawlerLeft", 99999);
		SetActorAngle(TID_PLAYER+PlayerNumber(), 0.75);
        delay(1);
	}
	
    // Re-invert the player's controls and unmorph them
    SetActorProperty(0, APROP_Speed, speed);
	UnMorphActor(TID_PLAYER+PlayerNumber(), true);
}

Script "DoomWare_Client_TieBreakerM5" (void) // Reach the End (Traps)
{
    minigame_instruction1[PlayerNumber()] = "Wait for the signal";
    minigame_instruction2[PlayerNumber()] = "Reach the End";

    // Give the player a staff if they're in the game, or force them to observe
    delay(1);
    if (game_score[PlayerNumber()] == game_highscores[0])
    {
        SetActorVelocity(0, 0.0, 0.0, 0.0, false, true);
		GiveInventory("PushStaff", 1);
		SetWeapon("PushStaff");
        SetPlayerProperty(1, 1, PROP_FROZEN);
    }
    else
        Force_Observe(PlayerNumber());

    // Don't allow the player to attack while he waits for the round to begin
    while (minigame_canmove == false)
    {
        if ((GetPlayerInput(-1, MODINPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerInput(-1, INPUT_OLDBUTTONS) & BT_ATTACK))
            Thing_Destroy(TID_PLAYER+PlayerNumber(), 0);
        delay(1);
    }

    // It's showtime!
    minigame_instruction1[PlayerNumber()] = "Go!";
    LocalAmbientSound("DoomWare/TieStart", 127);
    SetPlayerProperty(1, 0, PROP_FROZEN);

    // Wait until the game's over
    while (game_status == STATUS_TIEBREAKM)
        delay(1);
}


/*===================================================================================================
                                       Minigames (Serverside)
===================================================================================================*/

Script "DoomWare_Server_Minigame1" (void) // The Floor/Air Is Lava
{
    HUDMessage(s:"The Floor/Air Is Lava"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_LAVA");
    round_winifmid = true;
    
    // Lower the lights
    int lowerspeed = 8;
    switch (game_speed)
    {
        case 2:
        case 3: lowerspeed = 9; break;
        case 4: lowerspeed = 10; break;
    }
    floor_lowerbyvalue(20, lowerspeed, 10);
    floor_lowerbyvalue(21, 8, 8);
    floor_lowerbyvalue(22, 8, 8);
    floor_lowerbyvalue(691, lowerspeed, 10);
    floor_lowerbyvalue(692, 8, 8);
    floor_lowerbyvalue(693, 8, 8);
    SetActorState(88, "Off", true);
    SetActorState(147, "Off", true);
    
    // Choose which minigame to play (0 is floor, 1 is air)
    minigame_wincondition1 = random(0, 1);
    if (minigame_wincondition1 == 0) 
    {
        delay(SECOND-(2*game_speed));

        // Make the floor lava
        Sector_setDamage(2, 200000, MOD_LAVA);
        Sector_setDamage(20, 200000, MOD_LAVA);
        Sector_setDamage(21, 200000, MOD_LAVA);
        Sector_setDamage(22, 200000, MOD_LAVA);
        Sector_setDamage(691, 200000, MOD_LAVA);
        Sector_setDamage(692, 200000, MOD_LAVA);
        Sector_setDamage(693, 200000, MOD_LAVA);
        ChangeFloor(2, "WFLAVA1");
        ChangeFloor(20, "WFLAVA1");
        ChangeFloor(21, "WFLAVA1");
        ChangeFloor(22, "WFLAVA1");
        ChangeFloor(691, "WFLAVA1");
        ChangeFloor(692, "WFLAVA1");
        ChangeFloor(693, "WFLAVA1");
        delay(SECOND-(2*game_speed));
    }
    else
    {
        delay(30);

        // Silently teleport everyone to a copy of the main arena
        ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 357, true, false);
        Light_Fade(148, 0, SECOND-(2*game_speed));
        Light_Fade(149, 0, SECOND-(2*game_speed));
        Light_Fade(253, 0, SECOND-(2*game_speed));
        Light_Fade(856, 0, SECOND-(2*game_speed));
        delay(SECOND-(2*game_speed));

        // Kill people not underwater with no remorse
        minigame_wincondition1 = 2;
        delay(SECOND+32-(7*game_speed));

        // Silently bring everyone back
        ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, false);
    }
    
    // Make everything safe again
    Sector_setDamage(2, 0, MOD_UNKNOWN);
    Sector_setDamage(20, 0, MOD_UNKNOWN);
    Sector_setDamage(21, 0, MOD_UNKNOWN);
    Sector_setDamage(22, 0, MOD_UNKNOWN);
    Sector_setDamage(691, 0, MOD_UNKNOWN);
    Sector_setDamage(692, 0, MOD_UNKNOWN);
    Sector_setDamage(693, 0, MOD_UNKNOWN);
    ChangeFloor(2, "SLIME15");
    ChangeFloor(20, "N_BRGR13");
    ChangeFloor(691, "N_BRGR13");
    ChangeFloor(21, "TLITE6_5");
    ChangeFloor(692, "TLITE6_5");
    switch (game_skin)
    {
        case MAPSKIN_HALLOWEEN:
            ChangeFloor(22, "TLITE6_8");
            ChangeFloor(693, "TLITE6_8");
            break;
        case MAPSKIN_CHRISTMAS:
            ChangeFloor(22, "TLITE6_9");
            ChangeFloor(693, "TLITE6_9");
            break;
        default:
            ChangeFloor(22, "TLITE6_7");
            ChangeFloor(693, "TLITE6_7");
            break;
    }
    SetActorState(88, "Spawn", true);
    SetActorState(147, "Spawn", true);
    
    floor_raisebyvalue(20, 8, 10);
    floor_raisebyvalue(21, 8, 8);
    floor_raisebyvalue(22, 8, 8);
    floor_raisebyvalue(691, 8, 10);
    floor_raisebyvalue(692, 8, 8);
    floor_raisebyvalue(693, 8, 8);
}

Script "DoomWare_Server_Minigame2" (void) // Survive (Cyberdemon)
{
    HUDMessage(s:"Survive (Cyberdemon)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_CYBRDM");
    round_winifmid = true;

    // Spawn the cyberdemons (more if the game is faster)
    SpawnSpotForced("TeleportFog", 1, TID_REMOVE, 0);
    SpawnSpotForcedEx("Cyberdemon", 1, TID_REMOVE, random(0, 359));
    if (game_speed > 1)
        SpawnSpotForcedEx("Cyberdemon", 7+random(0, 3), TID_REMOVE, random(0, 359));
    if (game_speed == MAXSPEEDUPS)
        SpawnSpotForcedEx("Cyberdemon", 3+random(0, 3), TID_REMOVE, random(0, 359));
    NoiseAlert(TID_PLAYER+random(0, PlayerCount()-1), TID_PLAYER+random(0, PlayerCount()-1));

    // Let the players survive
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*10 - (SECOND*game_speed));
}

Script "DoomWare_Server_Minigame3" (void) // Survive (Ghouls)
{
    HUDMessage(s:"Survive (Ghouls)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    setMusic("D_GHOUL");
    Add_Observer(537);
    round_winifmid = true;

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 440, false, true);

    // Spawn a bunch of Jitterskulls
    SpawnSpotForced("Jitterskull", 25, TID_REMOVE, random(0, 359));
    SpawnSpotForced("Jitterskull", 27, TID_REMOVE, random(0, 359));
    SpawnSpotForced("Jitterskull", 29, TID_REMOVE, random(0, 359));
    SpawnSpotForced("Jitterskull", 31, TID_REMOVE, random(0, 359));
    SpawnSpotForced("Jitterskull", 33, TID_REMOVE, random(0, 359));
    SpawnSpotForced("Jitterskull", 35, TID_REMOVE, random(0, 359));

    // Spawn more depending on the game speed
    switch (game_speed)
    {
        case 4:
            SpawnSpotForced("Jitterskull", 32, TID_REMOVE, random(0, 359));
            SpawnSpotForced("Jitterskull", 34, TID_REMOVE, random(0, 359));
        case 3:
            SpawnSpotForced("Jitterskull", 28, TID_REMOVE, random(0, 359));
            SpawnSpotForced("Jitterskull", 30, TID_REMOVE, random(0, 359));
        case 2:
            SpawnSpotForced("Jitterskull", 26, TID_REMOVE, random(0, 359));
            break;
    }

    // Let the players survive
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*10-(SECOND*game_speed));

    // Move the players back if they didn't die
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame4" (void) // Survive (Archviles)
{
    int dropped = 0;
    hudmessage(s:"Survive (Archviles)";HUDMSG_LOG, MSGID_CONSOLE, cr_black, 2.0, 2.0, 0);
    SetMusic("D_ARCHV");
    round_winifmid = true;

    // Hide the dynamic lights
    SetActorState(88, "Off", true);
    SetActorState(147, "Off", true);

    // Spawn everyone's favorite Doom 2 monster
    SpawnSpotForcedEx("Archvile", 1, TID_REMOVE, random(0, 359));
    SpawnSpotForcedEx("Archvile", 57, TID_REMOVE, random(0, 359));
    SpawnSpotForcedEx("Archvile", 58, TID_REMOVE, random(0, 359));
    SpawnSpotForcedEx("Archvile", 59, TID_REMOVE, random(0, 359));
    SpawnSpotForcedEx("Archvile", 60, TID_REMOVE, random(0, 359));

    // Spawn more depending on the difficulty
    switch (game_speed)
    {
        case 4:
            SpawnSpotForcedEx("Archvile", 6, TID_REMOVE, random(0, 359));
        case 3:
            SpawnSpotForcedEx("Archvile", 5, TID_REMOVE, random(0, 359));
        case 2:
            SpawnSpotForcedEx("Archvile", 4, TID_REMOVE, random(0, 359));
        case 1:
            SpawnSpotForcedEx("Archvile", 3, TID_REMOVE, random(0, 359));
            break;
    }
    SpawnSpotForcedEx("TeleportFog", 1, TID_REMOVE, 0);
    NoiseAlert(TID_PLAYER+random(0, PlayerCount()-1), TID_PLAYER+random(0, PlayerCount()-1));

    // Raise the floor
    floor_raisebyvalue(20, 8, 64);
    floor_raisebyvalue(21, 8, 64);
    floor_raisebyvalue(22, 8, 64);
    floor_raisebyvalue(691, 8, 64);
    floor_raisebyvalue(692, 8, 64);
    floor_raisebyvalue(693, 8, 64);

    // Let the players survive
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*10-(SECOND*game_speed));
    delay(1);
    do
    {
        // Randomly drop a pillar if the game speed is high enough
        if (game_speed > 2 && minigame_timer < SECOND*3 && dropped == 0)
        {
            dropped = random(1, 2);
            if (dropped == 1)
            {
                floor_lowerbyvalue(20, 32, 64);
                floor_lowerbyvalue(21, 32, 64);
                floor_lowerbyvalue(22, 32, 64);
            }
            else
            {
                floor_lowerbyvalue(691, 32, 64);
                floor_lowerbyvalue(692, 32, 64);
                floor_lowerbyvalue(693, 32, 64);
            }
        }
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Move things back
    if (dropped != 1)
    {
        floor_lowerbyvalue(20, 8, 64);
        floor_lowerbyvalue(21, 8, 64);
        floor_lowerbyvalue(22, 8, 64);
    }
    if (dropped != 2)
    {
        floor_lowerbyvalue(691, 8, 64);
        floor_lowerbyvalue(692, 8, 64);
        floor_lowerbyvalue(693, 8, 64);
    }
    SetActorState(88, "Spawn", true);
    SetActorState(147, "Spawn", true);
}

Script "DoomWare_Server_Minigame5" (void) // Stop/Don't Stop moving
{
    int time;
    hudmessage(s:"Stop/Don't Stop Moving";HUDMSG_LOG, MSGID_CONSOLE, cr_black, 2.0, 2.0, 0);
    setMusic("D_MOVEIT");
    round_winifmid = true;
    minigame_wincondition1 = random(0, 1); // 0 is stop moving, 1 is don't

    // If stop moving, set the floor friction to help slow down players
    if (minigame_wincondition1 == 0)
    {
        Sector_SetFriction(2, 95);
        Sector_SetFriction(19, 95);
        Sector_SetFriction(20, 95);
        Sector_SetFriction(21, 95);
        Sector_SetFriction(22, 95);
        Sector_SetFriction(23, 95);
        Sector_SetFriction(24, 95);
        Sector_SetFriction(691, 95);
        Sector_SetFriction(692, 95);
        Sector_SetFriction(693, 95);
    }    
    
    // Give players time to react
    if (minigame_wincondition1 == 0)
        delay(SECOND*2-(game_speed*2));
    else
        delay(SECOND-(game_speed));

    // Horribly maim anyone who didn't pay attention
    time = SECOND;
    while (time > 0)
    {
        time--;
        for (int i=0; i<MAXPLAYERS; i++)
            if ((minigame_wincondition1 == 0 && Calc_Speed(GetActorVelX(TID_PLAYER+i), GetActorVely(TID_PLAYER+i)) > 20) || (minigame_wincondition1 == 1 && Calc_Speed(GetActorVelX(TID_PLAYER+i), GetActorVely(TID_PLAYER+i)) < 20))
                thing_damage(TID_PLAYER+i, 1337, MOD_BARREL);
        delay(1);
    }

    // Set the friction back to normal
    if (minigame_wincondition1 == 0)
    {
        Sector_SetFriction(2, 100);
        Sector_SetFriction(19, 100);
        Sector_SetFriction(20, 100);
        Sector_SetFriction(21, 100);
        Sector_SetFriction(22, 100);
        Sector_SetFriction(23, 100);
        Sector_SetFriction(24, 100);
        Sector_SetFriction(691, 100);
        Sector_SetFriction(692, 100);
        Sector_SetFriction(693, 100);
    }
}

Script "DoomWare_Server_Minigame6" (void) // Reach the End (Corridor 7)
{
    hudmessage(s:"Reach the End (Corridor 7)";HUDMSG_LOG, MSGID_CONSOLE, cr_black, 2.0, 2.0, 0);
    setMusic("D_CORRI7");
    Add_Observer(936);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 940, false, true);

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*20-(SECOND*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame7" (void) // Kill Ned Flanders
{
	round_noforceend = true;
    hudmessage(s:"Kill Ned Flanders";HUDMSG_LOG, MSGID_CONSOLE, cr_black, 2.0, 2.0, 0);
    SetMusic("D_SIMPSN");

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 1180, false, true);

    // Spawn Ned Flanders
    SpawnSpotFacingForcedEx("NedFlanders", 728, TID_REMOVE);
    NoiseAlert(TID_PLAYER+random(0, PlayerCount()-1), TID_PLAYER+random(0, PlayerCount()-1));

    // Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*4-(10*game_speed));

    // Check for winners
    do
    {
        Check_WonRoundItem();
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame8" (void) // Destroy a Barrel
{
    HUDMessage(s:"Destroy a Barrel"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_barrl");

    // Spawn some barrels to whack
    SpawnSpot("WoodBarrel", 3, TID_REMOVE);
    SpawnSpot("WoodBarrel", 4, TID_REMOVE);
    SpawnSpot("WoodBarrel", 5, TID_REMOVE);
    SpawnSpot("WoodBarrel", 6, TID_REMOVE);
    SpawnSpot("WoodBarrel", 7, TID_REMOVE);
    SpawnSpot("WoodBarrel", 8, TID_REMOVE);
    SpawnSpot("WoodBarrel", 9, TID_REMOVE);
    SpawnSpot("WoodBarrel", 10, TID_REMOVE);
    SpawnSpot("WoodBarrel1UP", 1, TID_REMOVE);

    // Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*4-(10*game_speed));

    // Check for winners
    do
    {
        Check_WonRoundItem();
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);
}

Script "DoomWare_Server_Minigame9" (void) // Shoot A Target
{
    HUDMessage(s:"Shoot A Target"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_fire");

    // Teleport players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 90, false, true);

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*2-(2*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame10" (void) // Evade the Kamikazi
{
    int time=0;
    HUDMessage(s:"Evade the Kamikazi"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_Jihad");
    round_winifmid = true;

    // Spawn a Kamikaze
    SpawnSpotForced("TeleportFog", 1, TID_REMOVE, 0);
    SpawnSpotForcedEx("Jihad", 1, TID_REMOVE , random(0, 359));
    SpawnSpotForced("AvoidDecoration", 1, TID_AVOID, 0);
    NoiseAlert(TID_PLAYER+random(0, PlayerCount()-1), TID_PLAYER+random(0, PlayerCount()-1));

    // Move the AVOID item to follow the Kamikaze
    while (time < (SECOND*2 - 10))
    {
        time++;
        SetActorPosition(TID_AVOID, GetActorX(TID_REMOVE), GetActorY(TID_REMOVE), GetActorZ(TID_REMOVE)+64.0, 0);
        delay(1);
    }

    // Blow up the Kamikaze
    thing_remove(TID_AVOID);
    thing_damage(TID_REMOVE, 50, 0);

    delay(10);
}

Script "DoomWare_Server_Minigame11" (void) // Survive (Super Shotgun)
{
    HUDMessage(s:"Survive (Super Shotgun)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_stelth");
    round_winifmid = true;
    minigame_fragpoints = true;

    // Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*5-(10*game_speed));

    // If there is only one player left, make him win to stop the timer
    do
    {
        Check_LMS();
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);
}

Script "DoomWare_Server_Minigame12" (void) // Blow/Don't Blow Your Brains Out
{
    HUDMessage(s:"Blow/Don't Blow Your Brains Out"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_rave");
	minigame_wincondition1 = random(0, 1);
	if (minigame_wincondition1 == 0)
		round_winifsuicide = true;
	else
		round_winifmid = true;

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*2-(5*game_speed));
}

Script "DoomWare_Server_Minigame13" (void) // Enter the Door
{
    int i;
    hudmessage(s:"Enter the Door"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    minigame_wincondition1 = random(0, 3);
    SetMusic("d_door");

    // Store player positions in case they win
    for (i=0; i<MAXPLAYERS; i++)
        if (PlayerInGame(i))
            Player_SavePosition(i);

    // Raise the doors
    floor_raisebyvalue(24, 32, 128);
    floor_raisebyvalue(25, 32, 128);
    floor_raisebyvalue(39, 32, 128);
    floor_raisebyvalue(44, 32, 128);

    // Give players time to reach the doors
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*3-(5*game_speed));

    // Lower the doors
    floor_lowerbyvalue(24, 32, 128);
    floor_lowerbyvalue(25, 32, 128);
    floor_lowerbyvalue(39, 32, 128);
    floor_lowerbyvalue(44, 32, 128);

    // Invalidate the positions of players who didn't do anything to prevent them from getting teleported.
    for (i=0; i<MAXPLAYERS; i++)
        if (player_midround[i])
            Player_InvalidatePosition(i);

    // Bring players back if they're at the island
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame14" (void) // Meet the Worm
{
    hudmessage(s:"Meet the Worm"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_worm");
    round_noforceend = true; // To give time to catch the 1-Up

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 110, false, true);

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*4-(3*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame15" (void) // Reach the End (Swapping Boxes)
{
    int time = SECOND*20-(35*game_speed);
    int box = 0;
    hudmessage(s:"Reach the End (Swapping Boxes)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_boxes");
    Sector_SetDamage(876, 10000, MOD_FALLING);
    Sector_SetDamage(10, 10000, MOD_FALLING);
    Add_Observer(518);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 150, false, true);

    // Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, time);

    // Make the boxes swap
    time = 0;
    do
    {
        int i;
        time++;
        if (time == 89)
            for (i=0; i<MAXPLAYERS; i++)
                minigame_instruction3[i] = "\cd3";
        else if (time == 89+17)
            for (i=0; i<MAXPLAYERS; i++)
                minigame_instruction3[i] = "\ci2";
        else if (time == 89+34)
            for (i=0; i<MAXPLAYERS; i++)
                minigame_instruction3[i] = "\cg1";
        else if (time == 89+51)
        {
            time = 0;
            for (i=0; i<MAXPLAYERS; i++)
                minigame_instruction3[i] = "";
            if (box == 0)
            {
                Floor_LowerInstant(7, 0, 24);
                Floor_RaiseInstant(876, 0, 26);
                Floor_LowerInstant(859, 0, 28);
                Floor_RaiseInstant(10, 0, 28);
                ChangeFloor(7, "f_sky1");
                ChangeFloor(876, "DEM4_5");
                ChangeFloor(10, "DEM4_5");
                ChangeFloor(859, "f_sky1");
                Sector_SetDamage(9, 10000, MOD_FALLING);
                Sector_SetDamage(859, 10000, MOD_FALLING);
                Sector_SetDamage(876, 0, MOD_FALLING);
                Sector_SetDamage(10, 0, MOD_FALLING);
                box = 1;
            }
            else
            {
                Floor_RaiseInstant(859, 0, 28);
                Floor_LowerInstant(876, 0, 26);
                Floor_RaiseInstant(7, 0, 24);
                Floor_LowerInstant(10, 0, 28);
                ChangeFloor(876, "f_sky1");
                ChangeFloor(10, "f_sky1");
                ChangeFloor(7, "DEM3_5");
                ChangeFloor(859, "DEM3_5");
                Sector_SetDamage(876, 10000, MOD_FALLING);
                Sector_SetDamage(10, 10000, MOD_FALLING);
                Sector_SetDamage(859, 0, MOD_FALLING);
                Sector_SetDamage(7, 0, MOD_FALLING);
                box = 0;
            }
        }
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);

    // Fix the boxes
    if (box == 1)
    {
        Floor_RaiseInstant(859, 0, 28);
        Floor_LowerInstant(876, 0, 26);
        Floor_RaiseInstant(7, 0, 24);
        Floor_LowerInstant(10, 0, 28);
        ChangeFloor(876, "f_sky1");
        ChangeFloor(10, "f_sky1");
        ChangeFloor(7, "DEM3_5");
        ChangeFloor(859, "DEM3_5");
        Sector_SetDamage(876, 10000, MOD_FALLING);
        Sector_SetDamage(10, 10000, MOD_FALLING);
        Sector_SetDamage(859, 0, MOD_FALLING);
        Sector_SetDamage(7, 0, MOD_FALLING);
    }
}

Script "DoomWare_Server_Minigame16" (void) // Touch the Sky
{
    HUDMessage(s:"Touch the Sky"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_JUMP");

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*3-(4*game_speed));
}

Script "DoomWare_Server_Minigame17" (void) // Finish a Lap (Karts)
{
    HUDMessage(s:"Finish A Lap (Karts)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_ddkr");
    Add_Observer(536);
    Add_Observer(818);
    minigame_canmove = false;

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 170, false, true);

    // Countdown until players can move
    SpawnSpotForced("Lakitu", 358, THING_REMOVE, 0);
    delay(SECOND*2);
    minigame_canmove = true;

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*18-(SECOND*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame18" (void) // Equip/Don't Equip Weapon
{
    HUDMessage(s:"Equip/Don't Equip Weapon"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_weapon");
	
	// Pick the weapon (and whether to allow equipping or not)
    minigame_wincondition1 = random(1, 7)+(10*random(0, 1));
	if (minigame_wincondition1 >= 10)
		round_winifmid = true;

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*2-(3*game_speed));
}

Script "DoomWare_Server_Minigame19" (void) // Reach Surface
{
    HUDMessage(s:"Reach Surface"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_water");

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 1039, true, true);

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*4-(7*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame20" (void) // Reach the End (Factory)
{
    HUDMessage(s:"Reach the End (Factory)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_Factry");
    Add_Observer(539);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 190, false, true);

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*7-(7*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame21" (void) // Survive (Grenades)
{
    HUDMessage(s:"Survive (Grenades)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    setMusic("D_GRENAD");
    round_winifmid = true;

    // Raise the floor
    ChangeFloor(17, "SHAWN2");
    switch (game_speed)
    {
        case 4:
            floor_raisebyvalue(17, 32, 64);
            break;
        case 3:
        case 2:
            floor_raisebyvalue(17, 24, 64);
            break;
        case 1:
        case 0:
            floor_raisebyvalue(17, 16, 64);
            break;
    }
    delay(SECOND-(2*game_speed));

    // Shoot grenades
    SpawnProjectile(87, "DWGrenade", 0, 90, 4, 0.25, 0);
    SpawnProjectile(87, "DWGrenade", 32, 90, 4, 0.25, 0);
    SpawnProjectile(87, "DWGrenade", 64, 90, 4, 0.25, 0);
    SpawnProjectile(87, "DWGrenade", 96, 90, 4, 0.25, 0);
    SpawnProjectile(87, "DWGrenade", 128, 90, 4, 0.25, 0);
    SpawnProjectile(87, "DWGrenade", 160, 90, 4, 0.25, 0);
    SpawnProjectile(87, "DWGrenade", 192, 90, 4, 0.25, 0);
    SpawnProjectile(87, "DWGrenade", 224, 90, 4, 0.25, 0);
    delay(SECOND + 10);

    // Lower the floor
    ChangeFloor(17, "NFMBGY01");
    floor_lowerbyvalue(17, 16, 64);
    delay(SECOND*2);
}

Script "DoomWare_Server_Minigame22" (void) // Collect 10 Rings
{
    hudmessage(s:"Collect 10 Rings"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    setMusic("D_Sonic");
    SpawnSpotForced("WonRoundItem", 89, TID_REMOVE, 0);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 107, true, true);

    // Start the timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*10-(10*game_speed));

    // Check for winners
    do
    {
        for (int i=0; i<MAXPLAYERS; i++)
            if (CheckActorInventory(TID_PLAYER+i, "WonRoundItem") >= 10)
                Player_Win(i);
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Move the players back
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame23" (void) // Stay Off/On The Ground
{
    int time;
    hudmessage(s:"Stay Off/On The Ground"; HUDMSG_LOG, MSGID_CONSOLE, cr_black, 2.0, 2.0, 0);
    SetMusic("D_ground");
    round_winifmid = true;
	minigame_wincondition1 = random(0, 1);
    delay(SECOND+20 - (2*game_speed));

    // Horribly maim anyone who is on/off the floor (based on the value of minigame_wincondition1)
    time = 15;
    while (time > 0)
    {
        time--;
        for (int i=0; i<MAXPLAYERS; i++)
            if ((minigame_wincondition1 == 0 && (GetActorZ(TID_PLAYER+i)>>16) < 11) || (minigame_wincondition1 == 1 && (GetActorZ(TID_PLAYER+i)>>16) > 11))
                thing_damage(TID_PLAYER+i, 10000000, MOD_BARREL);
        delay(1);
    }
    delay(20);
}

Script "DoomWare_Server_Minigame24" (void) // Grab a Balloon
{
	int i;
    hudmessage(s:"Grab a Balloon"; HUDMSG_LOG, MSGID_CONSOLE, cr_black, 2.0, 2.0, 0);
    SetMusic("D_SPDRMN");
	
	// Spawn balloons based on the number of players
	switch(PlayerCount())
	{
		default:
			SpawnSpotForced("YellowBalloon", 993, TID_REMOVE, 0.0);
		case 14:
		case 13:
			SpawnSpotForced("RedBalloon", 992, TID_REMOVE, 0.0);
		case 12:
		case 11:
			SpawnSpotForced("GreenBalloon", 991, TID_REMOVE, 0.0);
		case 10:
		case 9:
			SpawnSpotForced("BlueBalloon", 990, TID_REMOVE, 0.0);
		case 8:
		case 7:
			SpawnSpotForced("YellowBalloon", 989, TID_REMOVE, 0.0);
		case 6:
		case 5:
			SpawnSpotForced("RedBalloon", 988, TID_REMOVE, 0.0);
		case 4:
		case 3:
			SpawnSpotForced("GreenBalloon", 987, TID_REMOVE, 0.0);
		case 2:
		case 1:
			SpawnSpotForced("BlueBalloon", 986, TID_REMOVE, 0.0);
			break;
	}

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 703, true, true);

    // Start the timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*8-(20*game_speed));

    // Check for winners
    do
    {
        for (i=0; i<MAXPLAYERS; i++)
		{
			int plytid = TID_PLAYER+i;
			
			// If this player isn't in the game, skip them
			if (!PlayerInGame(i))
				continue;
				
			// If this player hasn't won yet
			if (!Check_Player_Won(i))
			{
				str tocheck = "BlueBalloon";
				
				// Use a for loop to check all the different balloon types
				for (int j=0; j<4; j++)
				{
					// Use a switch since we can't use temporary arrays
					switch (j)
					{
						case 1:
							tocheck = "GreenBalloon";
							break;
						case 2:
							tocheck = "RedBalloon";
							break;
						case 3:
							tocheck = "YellowBalloon";
							break;
					}
					
					// If the player has a balloon, then win and spawn a fake balloon
					if (CheckActorInventory(plytid, tocheck))
					{
						Player_Win(i);
						SetActorProperty(plytid, APROP_Gravity, -0.2);
						SpawnSpotForced(StrParam(s:tocheck, s:"Still"), plytid, TID_REMOVE+(i+1), 0.0);
						break;
					}
				}
			}
			
			// If a fake balloon exists for this player, move it to their position
			if (ThingCount(0, TID_REMOVE+(i+1)) > 0);
				SetActorPosition(TID_REMOVE+(i+1), GetActorX(plytid), GetActorY(plytid), GetActorZ(plytid)+16.0, 0);
		}
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

	// Remove all the balloons and reset player gravities
	for (i=0; i<MAXPLAYERS; i++)
	{
		SetActorProperty(i, APROP_Gravity, 1.0);
		Thing_Remove(TID_REMOVE+(i+1));
	}
	
    // Move the players back
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame25" (void) // Shoot the Target (Popup)
{
    int time=0;
    int SectorTarget = random(30, 36);
    minigame_wincondition1 = SectorTarget;
    HUDMessage(s:"Shoot the Target (Popup)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_fire");

    // Teleport players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 210, false, true);

    // Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*2-(2*game_speed));

    // Check for winners
    do
    {
        time++;
        if (time == SECOND)
            Floor_RaiseInstant(SectorTarget, 0, 16);
        if (time == SECOND*2)
            Floor_LowerInstant(SectorTarget, 0, 16);
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame26" (void) // Survive (Boxing)
{
    HUDMessage(s:"Survive (Boxing)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_boxing");
    round_winifmid = true;
    minigame_fragpoints = true;
    Add_Observer(538);

    // Spawn some spectators
    SpawnSpotForced("ScriptedMarine", 108, TID_REMOVE, 0);
    SpawnSpotForced("ScriptedMarine", 309, TID_REMOVE, 64);
    SpawnSpotForced("ScriptedMarine", 334, TID_REMOVE, 128);
    SpawnSpotForced("ScriptedMarine", 336, TID_REMOVE, 192);
    SpawnSpotForced("ScriptedMarine", 332, TID_REMOVE, 32);
    SpawnSpotForced("ScriptedMarine", 333, TID_REMOVE, 96);
    SpawnSpotForced("ScriptedMarine", 335, TID_REMOVE, 160);
    SpawnSpotForced("ScriptedMarine", 337, TID_REMOVE, 224);
    Thing_Deactivate(TID_REMOVE);
    Thing_SetTranslation(TID_REMOVE, 6);
    SpawnSpotForced("ZombieMan", 267, TID_REMOVE, 32);
    SpawnSpotForced("ChaingunGuy", 268, TID_REMOVE, 64);
    SpawnSpotForced("Archvile", 269, TID_REMOVE, 64);
    SpawnSpotForced("BaronOfHell", 286, TID_REMOVE, 96);
    SpawnSpotForced("CyberDemon", 287, TID_REMOVE, 128);
    SpawnSpotForced("ShotgunGuy", 288, TID_REMOVE, 128);
    SpawnSpotForced("Revenant", 289, TID_REMOVE, 160);
    SpawnSpotForced("HellKnight", 306, TID_REMOVE, 192);
    SpawnSpotForced("DoomImp", 307, TID_REMOVE, 192);
    SpawnSpotForced("WolfensteinSS", 308, TID_REMOVE, 0);
    Thing_Deactivate(TID_REMOVE);

    // Teleport players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 128, true, true);

    // Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*6+17 -(10*game_speed));

    // If there is only one player left, make him win to stop the timer
    do
    {
        Check_LMS();
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame27" (void) // Survive (Terry)
{
    HUDMessage(s:"Survive (Terry)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_Terry");
    round_winifmid = true;

    // Teleport players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 127, true, true);

    // Summon our lord and saviour
    SpawnSpotFacingForcedEx("dickfail", 129, TID_REMOVE);

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*10-(10*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame28" (void) // Finish a Lap (E1M1)
{
    HUDMessage(s:"Finish a Lap (E1M1)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_e1m1");
    Add_Observer(758);
    Add_Observer(757);
    Add_Observer(759);
    Add_Observer(557);
    minigame_canmove = false;

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 230, false, true);

    // Countdown until players can move
    SpawnSpotForced("Lakitu", 358, THING_REMOVE, 0);
    delay(SECOND*2);
    minigame_canmove = true;

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*14-(SECOND*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame29" (void) // Shoot a Duck
{
    hudmessage(s:"Shoot a Duck"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_duck");

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 996, true, true);

    // Spawn some birds to shoot
    SpawnSpotForced("Bird1", 126, TID_REMOVE, random(-180, 180));
    SpawnSpotForced("Bird2", 679, TID_REMOVE, random(-180, 180));
    SpawnSpotForced("Bird3", 149, TID_REMOVE, random(-180, 180));
    NoiseAlert(TID_PLAYER+random(0, PlayerCount()-1), TID_PLAYER+random(0, PlayerCount()-1));

    // Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*2-(2*game_speed));

    // Check for winners
    do
    {
        Check_WonRoundItem();
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame30" (void) // Dive Into the Water
{
    int time = 0;
    int tp = 0;
    hudmessage(s:"Dive Into the Water"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_Lava");

    // Move all players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 250, false, true);

    // Start the timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*6-(10*game_speed));

    time = random(15, SECOND);
    do
    {
        time--;

        // Hop players from water to lava zones
        if (time <= 0)
        {
            time = random(15, 35);
            if (tp == 0)
            {
                TeleportInSector(162, 436, 396, false);
                tp = 1;
            }
            else
            {
                TeleportInSector(161, 396, 436, false);
                tp = 0;
            }
        }
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame31" (void) // Reach the End (Boulders)
{
    int time = 0;
    hudmessage(s:"Reach the End (Boulders)"; HUDMSG_LOG, MSGID_CONSOLE, cr_black, 2.0, 2.0, 0);
    SetMusic("D_SNEAK");
    Add_Observer(558);

    // Move all players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 270, false, true);

    // Start the timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*10-(10*game_speed));

    do
    {
        time++;
        if (time == 17)
        {
            Thing_ProjectileGravity(random(166, 169), 255, 128, 64, 0);
            Thing_ProjectileGravity(random(186, 189), 255, 128, 64, 0);
            time = 0;
        }
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame32" (void) // Reach the End (Ice)
{
    int time = 0;
    int num = 0;
    hudmessage(s:"Reach the End (Ice)"; HUDMSG_LOG, MSGID_CONSOLE, cr_black, 2.0, 2.0, 0);
    SetMusic("D_echobs");
    Add_Observer(559);
    round_noforceend = true; // To give time to catch the 1-Up

    // Move all players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 290, false, true);

    // Start the timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND+(10-game_speed)*31);

    // Start shaking the floor after a bit
    delay(SECOND);
    Radius_Quake2(227, 5, SECOND+(10-game_speed)*31, 0, 256, "DoomWare/IceMove");

    // Open the floor
    do
    {
        time++;
        if (time == (10-game_speed))
        {
            Floor_lowerInstant(45+num, 0, 128);
            Floor_lowerInstant(78+num, 0, 128);
            Ceiling_lowerInstant(78+num, 0, 128);
            Sector_setDamage(45+num, 999, mod_falling);
            time = 0;
            num++;
        }
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);

    // Fix the floor
    for (int i=0;i<31;i++)
    {
        Floor_raiseInstant(45+i, 0, 128);
        Ceiling_raiseInstant(78+i, 0, 128);
        Floor_raiseInstant(78+i, 0, 128);
        Sector_setDamage(45+i, 0, mod_falling);
        if (i%8 == 7)
            delay(1);
    }
}

Script "DoomWare_Server_Minigame33" (void) // Survive (Romero)
{
    hudmessage(s:"Survive (Romero)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_FINBOS");
    round_winifmid = true;

    // Move the dynamic lights up
    SetActorState(88, "Off", true);
    SetActorState(147, "Off", true);

    // Spawn (other) God
    SpawnSpotForcedEx("MechaRomero", 1, TID_REMOVE, random(0, 359));
    SpawnSpotForced("TeleportFog", 1, 42, 0);

    // Spawn more depending on the difficulty
    switch (game_speed)
    {
        case 4:
            SpawnSpotForcedEx("MechaRomero", 3+random(0, 3), TID_REMOVE, random(0, 359));
        case 3:
        case 2:
        case 1:
            SpawnSpotForcedEx("MechaRomero", 7+random(0, 3), TID_REMOVE, random(0, 359));
            break;
    }
    SpawnSpotForced("TeleportFog", 1, TID_REMOVE, 0);
    NoiseAlert(TID_PLAYER+random(0, PlayerCount()-1), TID_PLAYER+random(0, PlayerCount()-1));

    // Raise the floor
    floor_raisebyvalue(20, 8, 64);
    floor_raisebyvalue(21, 8, 64);
    floor_raisebyvalue(22, 8, 64);
    floor_raisebyvalue(691, 8, 64);
    floor_raisebyvalue(692, 8, 64);
    floor_raisebyvalue(693, 8, 64);

    // Let the players survive
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*10-(SECOND*game_speed));

    // Move things back
    floor_lowerbyvalue(20, 8, 64);
    floor_lowerbyvalue(21, 8, 64);
    floor_lowerbyvalue(22, 8, 64);
    floor_lowerbyvalue(691, 8, 64);
    floor_lowerbyvalue(692, 8, 64);
    floor_lowerbyvalue(693, 8, 64);
    SetActorState(88, "Spawn", true);
    SetActorState(147, "Spawn", true);
}

Script "DoomWare_Server_Minigame34" (void) // Survive (Hoth)
{
    HUDMessage(s:"Survive (Hoth)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_hoth");
    round_winifmid = true;
    minigame_fragpoints = true;
    Add_Observer(576);
    Add_Observer(776);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 880, false, true);

    // Spawn a lot of different objects
    SpawnSpotForcedEx("ATST", 246, TID_REMOVE, random(0, 359));
    SetThingSpecial(TID_REMOVE, ACS_ExecuteAlways, 14);
    SpawnSpotForced("HothTurret", 247, TID_REMOVE, random(0, 359));
    NoiseAlert(TID_PLAYER+random(0, PlayerCount()-1), TID_PLAYER+random(0, PlayerCount()-1));

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*14-(SECOND*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame35" (void) // Climb the Colossus
{
    HUDMessage(s:"Climb the Colossus"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_sotc");

    // Start the rain
    SetActorState(577, "Activated");

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 819, true, true);

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*25-(SECOND*game_speed));

    // Return players back to the main lobby and stop the rain
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
    SetActorState(577, "Deactivated");
}

Script "DoomWare_Server_Minigame36" (void) // Get On the Colored Circle
{
    int color = random(0, 3);
    int i;
    HUDMessage(s:"Get On the Colored Circle"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_twistr");
    round_winifmid = true;

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 248, true, true);

    // Display the color after a while
    delay(35);
    switch (color)
    {
        case 0:
            SetLineTexture(1, SIDE_FRONT, TEXTURE_BOTTOM, "TRANBLUE");
            break;
        case 1:
            SetLineTexture(1, SIDE_FRONT, TEXTURE_BOTTOM, "TRANGRN");
            break;
        case 2:
            SetLineTexture(1, SIDE_FRONT, TEXTURE_BOTTOM, "TRANRED");
            break;
        case 3:
            SetLineTexture(1, SIDE_FRONT, TEXTURE_BOTTOM, "TRANYEL");
            break;
    }
    delay(SECOND*2-(10*game_speed));

    // Lower the floors
    for (i=0; i<5; i++)
    {
        if (i == color)
            continue;
        Floor_LowerInstant(111+i, 0, 16);
        Sector_setDamage(111+i, 200000, MOD_LAVA);
        ChangeFloor(111+i, "WFLAVA1");
    }
    delay(70);

    // Return the players
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);

    // Raise the floors back up
    for (i=0; i<5; i++)
    {
        if (i == color)
            continue;
        Floor_RaiseInstant(111+i, 0, 16);
        Sector_setDamage(111+i, 0, MOD_UNKNOWN);
        switch (i)
        {
            case 0:
                ChangeFloor(111, "TRANBLUE");
                break;
            case 1:
                ChangeFloor(112, "TRANGRN");
                break;
            case 2:
                ChangeFloor(113, "TRANRED");
                break;
            case 3:
                ChangeFloor(114, "TRANYEL");
                break;
            case 4:
                ChangeFloor(115, "PURE");
                break;
        }

    }
    SetLineTexture(1, SIDE_FRONT, TEXTURE_BOTTOM, "PURE");
}

Script "DoomWare_Server_Minigame37" (void) // Dive Down
{
    HUDMessage(s:"Dive Down"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_water");

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 1057, true, true);

    // Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*3+17-(10*game_speed));

    do
    {
        delay(1);

        // Make the player win if they're deep enough
        for (int i=0; i<MAXPLAYERS; i++)
            if (GetActorZ(TID_PLAYER+i) < 50.0)
                Player_Win(i);
    }
    while(minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame38" (void) // Repeat the Pattern
{
    int caco1, caco2, caco3, caco4;
    int i, j;
    hudmessage(s:"Repeat the Pattern"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    setMusic("D_STALKS");
    caco1 = random(0, 5);
    caco2 = random(0, 5);
    caco3 = random(0, 5);
    caco4 = random(0, 5);
    minigame_canmove = false;
    minigame_invisiblehats = true;

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 310, false, true);

    // Clear out player solutions
    for (i=0; i<MAXPLAYERS; i++)
        for (j=0; j<4; j++)
            player_answer2[i][j] = -1;

    // Show the cacodemons to shoot
    delay(35);
    thing_damage(326+caco1, 1, 0);
    delay(SECOND-(5*game_speed));
    thing_damage(326+caco2, 1, 0);
    delay(SECOND-(5*game_speed));
    thing_damage(326+caco3, 1, 0);
    delay(SECOND-(5*game_speed));
    thing_damage(326+caco4, 1, 0);
    delay(SECOND-(5*game_speed));

    // Give time for the players to spit their answers
    minigame_canmove = true;
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*5 + 15);

    do
    {
        for (i=0; i<MAXPLAYERS; i++)
        {
            if (!PlayerInGame(i))
                continue;
            if (player_answer1[i] > 0)
                player_answer1[i]--;

            for (j=0; j<4; j++)
            {
                if (player_answer2[i][j] == -1)
                    break;

                switch(j)
                {
                    case 0:
                        if (player_answer2[i][0] != caco1)
                            Player_Lose(i, false);
                        break;
                    case 1:
                        if (player_answer2[i][1] != caco2)
                            Player_Lose(i, false);
                        break;
                    case 2:
                        if (player_answer2[i][2] != caco3)
                            Player_Lose(i, false);
                        break;
                    case 3:
                        if (player_answer2[i][3] != caco4)
                            Player_Lose(i, false);
                        else
                            Player_Win(i);
                        break;
                }
            }
        }
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame39" (void) // Storm the Beach
{
    hudmessage(s:"Storm the Beach"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_OMAHA");
    Add_Observer(777);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 340, false, true);

    // Spawn some horrible hitscanners and spicy disks
    SpawnSpotForced("ChaingunGuy", 1000, TID_REMOVE, 128);
    SpawnSpotForced("LandMine", 705, TID_REMOVE, 128);
    NoiseAlert(TID_PLAYER+random(0, PlayerCount()-1), TID_PLAYER+random(0, PlayerCount()-1));

    // Give time for the players to reach the beach
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*15-(20*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame40" (void) // Survive (Dark Corridors)
{
    hudmessage(s:"Survive (Dark Corridors)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_doom");
    minigame_fragpoints = true;
    minigame_invisiblehats = true;
    round_winifmid = true;
    Add_Observer(778);
    Add_Observer(779);
    Add_Observer(797);
    Add_Observer(796);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 360, false, true);

    // Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*10-(10*game_speed));

    // If there is only one player left, make him win to stop the timer
    do
    {
        Check_LMS();
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame41" (void) // Go to the Light
{
    int i;
    hudmessage(s:"Go to the Light"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_AMPIE");
    round_winifmid = true;

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 206, true, true);

    // Pick a random sector to mark as safe
    int ceil = random(0, 11);
    Light_ChangeToValue(116+ceil, 256);
    delay(SECOND-(5*game_speed));

    // Lower the ceiling
    for (i=0; i<13; i++)
        if (i != ceil)
            Ceiling_LowerAndCrush(116+i, 20+(2*game_speed), 100, 1);
    delay(SECOND*3+17 -(7*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);

    // Raise the ceiling back up
    for (i=0; i<13; i++)
        if (ceil != i)
            Ceiling_RaiseByValue(116+i, 16, 256);
    Light_ChangeToValue(116+ceil, 16);
}

Script "DoomWare_Server_Minigame42" (void) // Survive (Rockets)
{
    hudmessage(s:"Survive (Rockets)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_ROCKET");
    Add_Observer(656);
    round_winifmid = true;

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 226, true, true);

    //Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*13-(SECOND*game_speed));

    // If there is only one player left, make him win to stop the timer
    do
    {
        Check_LMS();
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame43" (void) // Zorch a Flemoid
{
    HUDMessage(s:"Zorch a Flemoid"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_Chex");
	
	// Spawn the Flemoid invaders
	SpawnSpotFacingForcedEx("Flemoid", 995, TID_REMOVE);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 994, true, true);
	
    // Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*11-(10*game_speed));
	
    // Check for winners
    do
    {
        Check_WonRoundItem();
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame44" (void) // Reach the End (Void)
{
	int i;
    HUDMessage(s:"Reach the End (Void)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_void");
	minigame_wincondition1 = 0; // This is a bit field that tells us which platforms are raised
	Add_Observer(965);
	Add_Observer(984);
	Add_Observer(985);
	
	// Spawn some Imps
	SpawnSpotFacingForcedEx("DoomImpVoid", 963, TID_REMOVE);
	SpawnSpotFacingForcedEx("DoomImpVoid", 964, TID_REMOVE+1);
	thing_settranslation(TID_REMOVE, 16);
	thing_settranslation(TID_REMOVE+1, 17);
	Thing_ChangeTID(TID_REMOVE+1, TID_REMOVE);
	
	// Make the map move all fancy
	ACS_NamedExecute("DoomWare_VoidMapBooks", 0);
	ACS_NamedExecute("DoomWare_VoidMapLights", 0);
	ACS_NamedExecute("DoomWare_VoidMapSky", 0);
	ACS_NamedExecute("DoomWare_VoidMapPillars", 0);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 966, true, true);

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*20-(SECOND*game_speed));
	
    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame45" (void) // Finish a Lap (Rainbow Road)
{
    HUDMessage(s:"Finish a Lap (Rainbow Road)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_rainbw");
    Add_Observer(798);
    Add_Observer(579);
    minigame_canmove = false;

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 380, false, true);

    // Countdown until players can move
    SpawnSpotForced("Lakitu", 358, THING_REMOVE, 0);
    delay(SECOND*2);
    minigame_canmove = true;

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*39-(SECOND*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame46" (void) // Reach the End (Bigger Swapping Boxes)
{
    int time = SECOND*28+20-(14*game_speed);
    int box = 0;
    hudmessage(s:"Reach the End (Bigger Swapping Boxes)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_boxes");
    Sector_SetDamage(136, 10000, MOD_FALLING);
    Add_Observer(596);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 420, false, true);

    // Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, time);

    // Make the boxes swap
    time = 0;
    do
    {
        int i;
        time++;
        if (time == 89)
            for (i=0; i<MAXPLAYERS; i++)
                minigame_instruction3[i] = "\cd3";
        else if (time == 89+17)
            for (i=0; i<MAXPLAYERS; i++)
                minigame_instruction3[i] = "\ci2";
        else if (time == 89+34)
            for (i=0; i<MAXPLAYERS; i++)
                minigame_instruction3[i] = "\cg1";
        else if (time == 89+51)
        {
            time = 0;
            for (i=0; i<MAXPLAYERS; i++)
                minigame_instruction3[i] = "";
            if (box == 0)
            {
                Floor_LowerInstant(135, 0, 32);
                Floor_RaiseInstant(136, 0, 32);
                Floor_LowerInstant(137, 0, 36);
                Floor_RaiseInstant(138, 0, 40);
                Floor_LowerInstant(139, 0, 44);
                ChangeFloor(136, "DEM4_5");
                ChangeFloor(138, "DEM4_5");
                ChangeFloor(135, "f_sky1");
                ChangeFloor(137, "f_sky1");
                ChangeFloor(139, "f_sky1");
                Sector_SetDamage(136, 0, MOD_FALLING);
                Sector_SetDamage(138, 0, MOD_FALLING);
                Sector_SetDamage(135, 10000, MOD_FALLING);
                Sector_SetDamage(137, 10000, MOD_FALLING);
                Sector_SetDamage(139, 10000, MOD_FALLING);
                box = 1;
            }
            else
            {
                Floor_RaiseInstant(135, 0, 32);
                Floor_LowerInstant(136, 0, 32);
                Floor_RaiseInstant(137, 0, 36);
                Floor_LowerInstant(138, 0, 40);
                Floor_RaiseInstant(139, 0, 44);
                ChangeFloor(136, "f_sky1");
                ChangeFloor(138, "f_sky1");
                ChangeFloor(135, "DEM3_5");
                ChangeFloor(137, "DEM3_5");
                ChangeFloor(139, "DEM3_5");
                Sector_SetDamage(136, 10000, MOD_FALLING);
                Sector_SetDamage(138, 10000, MOD_FALLING);
                Sector_SetDamage(135, 0, MOD_FALLING);
                Sector_SetDamage(137, 0, MOD_FALLING);
                Sector_SetDamage(139, 0, MOD_FALLING);
                box = 0;
            }
        }
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);

    // Fix the boxes
    if (box == 1)
    {
        Floor_RaiseInstant(135, 0, 32);
        Floor_LowerInstant(136, 0, 32);
        Floor_RaiseInstant(137, 0, 36);
        Floor_LowerInstant(138, 0, 40);
        Floor_RaiseInstant(139, 0, 44);
        ChangeFloor(136, "f_sky1");
        ChangeFloor(138, "f_sky1");
        ChangeFloor(135, "DEM3_5");
        ChangeFloor(137, "DEM3_5");
        ChangeFloor(139, "DEM3_5");
        Sector_SetDamage(136, 10000, MOD_FALLING);
        Sector_SetDamage(138, 10000, MOD_FALLING);
        Sector_SetDamage(135, 0, MOD_FALLING);
        Sector_SetDamage(137, 0, MOD_FALLING);
        Sector_SetDamage(139, 0, MOD_FALLING);
    }
}

Script "DoomWare_Server_Minigame47" (void) // Survive (Banana)
{
    HUDMessage(s:"Survive (Banana)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_banana");
    round_winifmid = true;

    // Spawn some warnings
    SpawnSpotForced("Avoid", 1, TID_REMOVE, random(0, 359));
    if (game_speed > 1)
        SpawnSpotForced("Avoid", 57, TID_REMOVE, random(0, 359));
    if (game_speed == 4)
        SpawnSpotForced("Avoid", 59, TID_REMOVE, random(0, 359));
    NoiseAlert(TID_PLAYER+random(0, PlayerCount()-1), TID_PLAYER+random(0, PlayerCount()-1));
    delay(SECOND*4-(game_speed*17));

    // Spawn the banana
    SpawnSpotForced("Banana", TID_REMOVE, TID_REMOVE+1, random(0, 359));
    thing_destroy(TID_REMOVE, 0);
    delay(SECOND*2);
}

Script "DoomWare_Server_Minigame48" (void) // Survive (Spikes)
{
    HUDMessage(s:"Survive (Spikes)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_spiky");
    round_winifmid = true;

    // Spawn some warnings
    switch (game_speed)
    {
        case 4:
            SpawnSpotForced("Avoid", 5, TID_REMOVE+1, random(0, 359));
        case 3:
            SpawnSpotForced("Avoid", 3, TID_REMOVE+1, random(0, 359));
        case 2:
            SpawnSpotForced("Avoid", 9, TID_REMOVE+1, random(0, 359));
        case 1:
            SpawnSpotForced("Avoid", 7, TID_REMOVE+1, random(0, 359));
        default:
            SpawnSpotForced("Avoid", 1, TID_REMOVE+1, random(0, 359));
            SpawnSpotForced("Avoid", 58, TID_REMOVE+1, random(0, 359));
            SpawnSpotForced("Avoid", 59, TID_REMOVE+1, random(0, 359));
            SpawnSpotForced("Avoid", 60, TID_REMOVE+1, random(0, 359));
            SpawnSpotForced("Avoid", 57, TID_REMOVE+1, random(0, 359));
            break;
    }
    NoiseAlert(TID_PLAYER+random(0, PlayerCount()-1), TID_PLAYER+random(0, PlayerCount()-1));
    delay(SECOND*3-(game_speed*7));

    // Spawn the spikes
    SpawnSpotForced("LilithSpikeSpawner", TID_REMOVE+1, TID_REMOVE, random(0, 359));
    thing_destroy(TID_REMOVE+1, 0);
    delay(SECOND + 17);
}

Script "DoomWare_Server_Minigame49" (void) // Math Problem
{
    int i;
    HUDMessage(s:"Math Problem"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_MATH");

    // Create a problem
    int operation = random(0, 2);
    int result;
    minigame_wincondition3 = operation;
    minigame_invisiblehats = true;
    switch (operation)
    {
        case 0:
            minigame_wincondition1 = random(0, 49);
            minigame_wincondition2 = random(0, 50);
            result = minigame_wincondition1 + minigame_wincondition2;
            break;
        case 1:
            minigame_wincondition1 =  random(50, 99);
            minigame_wincondition2 =  random(0, 50);
            result = minigame_wincondition1 - minigame_wincondition2;
            breaK;
        case 2:
            minigame_wincondition1 =  random(0, 10);
            minigame_wincondition2 =  random(0, 9);
            result = minigame_wincondition1 * minigame_wincondition2;
            break;
    }

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 400, false, true);

    // Clear out player solutions
    for (i=0; i<MAXPLAYERS; i++)
        for (int j=0; j<2; j++)
            player_answer2[i][j] = -1;

    // Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*5 - (game_speed*7));

    // Check if the user spat out the correct answer
    do
    {
        for (i=0; i<MAXPLAYERS; i++)
        {
            if (!PlayerInGame(i))
                continue;

            if (player_answer1[i] > 0)
                player_answer1[i]--;

            if ((result < 10 && player_answer2[i][0] == -1) || (result >= 10 && player_answer2[i][1] == -1))
                continue;

            if (result < 10)
            {
                if (player_answer2[i][0] == result)
                    Player_Win(i);
                else
                    Player_Lose(i, false);
            }
            else
            {
                if (player_answer2[i][0] == result/10 && player_answer2[i][1] == result%10)
                    Player_Win(i);
                else
                    Player_Lose(i, false);
            }
        }
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame50" (void) // Survive (Bullet Hell)
{
    HUDMessage(s:"Survive (Bullet Hell)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_trotle");
    Add_Observer(597);
    round_winifmid = true;

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 338, true, true);

    // Spawn Lilith, from the WAD I never finished making :(
    SpawnSpotForced("Lilith", 339, TID_REMOVE, 192);
    NoiseAlert(TID_PLAYER, TID_PLAYER);

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*4+17 + (SECOND*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);

    // Award survivors with an achievement
    delaY(2);
	if (game_wackymod != WACKYMOD_FLIGHT)
		for (int i=0; i<MAXPLAYERS; i++)
			if (player_midround[i])
				Give_Achievement(i, ACHIEVE_ID_BULLETHELL);
}

Script "DoomWare_Server_Minigame51" (void) // Clean Your Weapon
{
    HUDMessage(s:"Clean Your Weapon"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_CLEAN");
    minigame_wincondition1 = 1337; // To force a 320x240 viewsprite

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*14+10-(12*game_speed));
}

Script "DoomWare_Server_Minigame52" (void) // Gib a Turkey
{
    HUDMessage(s:"Gib a Turkey"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_TURKEY");

    // Spawn some turkeys to gib
    SpawnSpot("Turkey", 919, TID_REMOVE);

    // Teleport everyone to the arena and start a timer
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 918, true, true);
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*9-(20*game_speed));

    // Check for winners
    do
    {
        Check_WonRoundItem();
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);
    
    // Teleport the players back to the main arena
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame53" (void) // Drink
{
    HUDMessage(s:"Drink"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_DRINK");

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*7+5-(12*game_speed));
}

Script "DoomWare_Server_Minigame54" (void) // Survive (Chilli)
{
    HUDMessage(s:"Survive (Chilli)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_wtfbmb");
    round_winifmid = true;

    // Create some warnings
    SpawnSpotForced("Avoid", 1, TID_REMOVE+1, random(0, 359));
    switch (game_speed)
    {
        case 4:
            SpawnSpotForced("Avoid", 59, TID_REMOVE+1, random(0, 359));
        case 3:
        case 2:
            SpawnSpotForced("Avoid", 57, TID_REMOVE+1, random(0, 359));
            break;
    }
    NoiseAlert(TID_PLAYER+random(0, PlayerCount()-1), TID_PLAYER+random(0, PlayerCount()-1));
    delay(SECOND*4-(game_speed*17));

    // Spawn the chilli
    SetMusic("");
    SpawnSpotForced("Chilli", TID_REMOVE+1, TID_REMOVE, random(0, 359));
    thing_destroy(TID_REMOVE+1, 0);
    delay(SECOND + 18);

    // Make the world tremble at the sight of it's spicyness
    Radius_Quake2(1, 5, SECOND*3+21, 0, 512, "DoomWare/IceMove");
    delay(SECOND*3+21);
}

Script "DoomWare_Server_Minigame55" (void) // Hit the Real Barrel
{
    HUDMessage(s:"Hit the Real Barrel"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_BRLCHS");

    // Spawn a bunch of fake and real explosive barrels
    int real = random(1, 9);
    for (int i=1; i<8; i++)
        if (real != i)
            SpawnSpot ("ExplosiveBarrelLegs", 2+i, TID_REMOVE);
    if (real != 9)
        SpawnSpot ("ExplosiveBarrelLegs", 1, TID_REMOVE);
    if (real == 9)
        SpawnSpot ("ExplosiveBarrelReal", 1, TID_REMOVE);
    else
        SpawnSpot ("ExplosiveBarrelReal", 2+real, TID_REMOVE);

    // Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*6+10-(20*game_speed));

    // Check for winners
    do
    {
        Check_WonRoundItem();
        Check_FailRoundItem();
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);
}

Script "DoomWare_Server_Minigame56" (void) // Survive (Spike Circle)
{
    HUDMessage(s:"Survive (Spike Circle)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_Factry");
    round_winifmid = true;
    Add_Observer(598);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 460, false, true);

    // Activate the rotaty dead spikes of doom
    thing_activate(64);
    thing_activate(65);

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*8+20+(20*game_speed));

    // Give the spikes a break
    thing_deactivate(64);
    thing_deactivate(65);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame57" (void) // Eat The Chocolate
{
    HUDMessage(s:"Eat The Chocolate"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_DRINK");

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*4+15-(12*game_speed));
}

Script "DoomWare_Server_Minigame58" (void) // Survive (Wind)
{
    HUDMessage(s:"Survive (Wind)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_MUNCH");
    round_winifmid = true;

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 359, true, true);

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*5+20-(12*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame59" (void) // Get to Hissy
{
    HUDMessage(s:"Get to Hissy"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    setMusic("D_HISSY");
    Add_Observer(616);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 480, false, true);

    // Spawn the Hissy hogger himself
    SpawnSpotFacingForcedEx("Linguica", 376, TID_REMOVE);
    switch(game_speed)
    {
        case 4:
            SpawnSpotFacingForcedEx("Linguica", 379, TID_REMOVE);
        case 3:
        case 2:
            SpawnSpotFacingForcedEx("Linguica", 378, TID_REMOVE);
            break;
    }

    // Let the players survive
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*8+20-(10*game_speed));

    // Move the players back if they didn't die
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame60" (void) // Count the Lost Souls
{
    int i;
    HUDMessage(s:"Count The Lost Souls"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_count");
    minigame_invisiblehats = true;

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 500, false, true);

    // Clear out player solutions
    for (i=0; i<MAXPLAYERS; i++)
        for (int j=0; j<2; j++)
            player_answer2[i][j] = -1;

    // Spawn some Lost Souls, or some rockets if the game speed is high enough
    int fakes = 0;
    int result = random(10, 14+4*game_speed);
    minigame_wincondition1 = 0;
    for (i=0;i<result;i++)
    {
        if (game_speed > 2 && random(1, 10) == 1)
        {
            fakes++;
            SpawnForced("FakeRocket", GetActorX(397)+random(0, +64.0), GetActorY(397)+random(-64.0, +64.0), GetActorz(397)+random(-32.0, +32.0), TID_REMOVE+1, 0);
            SetActorVelocity(TID_REMOVE+1, 10.0, 0, 0, 0, 0);
            Thing_ChangeTID(TID_REMOVE+1, TID_REMOVE);
        }
        else
            SpawnForced("SkullCounter", GetActorX(397)+random(0, +64.0), GetActorY(397)+random(-64.0, +64.0), GetActorz(397)+random(-32.0, +32.0), TID_REMOVE, 0);
        delay(18-random(5-game_speed, 7));
    }
    result -= fakes;
    delay(SECOND*2);

    // Move the players to the numbers
    minigame_wincondition1 = 1;
    for (i=0; i<MAXPLAYERS; i++)
        thing_move(TID_PLAYER+i, 400+i, false);

    // Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*5+15-(game_speed*7));

    // Check if the user spat out the correct answer
    do
    {
        for (i=0; i<MAXPLAYERS; i++)
        {
            if (!PlayerInGame(i))
                continue;

            if (player_answer1[i] > 0)
                player_answer1[i]--;

            if (result >= 10 && player_answer2[i][1] == -1)
                continue;

            if (player_answer2[i][0] == result/10 && player_answer2[i][1] == result%10)
                Player_Win(i);
            else
                Player_Lose(i, false);
        }
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame61" (void) // Reach the End (Hurdles)
{
    HUDMessage(s:"Reach the End (Hurdles)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_HURDLE");
    Add_Observer(617);
    minigame_canmove = false;

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 520, false, true);

    // Spawn a wall to prevent players from going forward
    SpawnSpotForced("InvisibleBridge32", 398, TID_REMOVE, 0);
    delay(4);
    thing_remove(TID_REMOVE);

    // Countdown until players can move
    delay(SECOND*2+26);
    minigame_canmove = true;

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*12+10-(17*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame62" (void) // Cross the Road
{
    int time = 0;
    hudmessage(s:"Cross the Road"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_CHICKN");
    Add_Observer(618);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 540, false, true);

    // Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*8+20-(15*game_speed));

    // Keep the roads busy
    do
    {
        if (time == 0)
        {
            int tran = random(11, 16);
            SpawnProjectile(random(416, 417), "DangerousCar", 0, 256, 0, 0, TID_REMOVE);
            if (tran != 16)
                Thing_SetTranslation(TID_REMOVE, tran);
            Thing_ChangeTID(TID_REMOVE, TID_REMOVE+1);

            tran = random(11, 16);
            SpawnProjectile(random(418, 419), "DangerousCar", 128, 256, 0, 0, TID_REMOVE);
            if (tran != 16)
                Thing_SetTranslation(TID_REMOVE, tran);
            Thing_ChangeTID(TID_REMOVE, TID_REMOVE+1);

            time = random(15, 70);
        }
        time--;
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame63" (void) // Collect a Potion
{
    hudmessage(s:"Collect a Potion"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_THIEF");

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 399, true, true);

    // Spawn some thiefs
    SpawnSpotForcedEx("BlueThief", 437, TID_REMOVE, random(0, 256));
    NoiseAlert(TID_PLAYER+random(0, PlayerCount()-1), TID_PLAYER+random(0, PlayerCount()-1));

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*5+25-(15*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame64" (void) // Reach the End (Skyhook)
{
    int i;
    hudmessage(s:"Reach the End (Skyhook)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_SKYHOK");

    // Place the polyobjects in the correct place.
    for (i=0; i<8; i++)
    {
        switch (random(1, 4))
        {
            case 1:
                SetLineTexture(2+i*3, SIDE_FRONT, TEXTURE_MIDDLE, "SKYHOKB1");
                SetLineTexture(2+i*3, SIDE_BACK, TEXTURE_MIDDLE, "SKYHOKB1");
                SetLineTexture(3+i*3, SIDE_FRONT, TEXTURE_MIDDLE, "SKYHOKB1");
                SetLineTexture(3+i*3, SIDE_BACK, TEXTURE_MIDDLE, "SKYHOKB1");
                SetLineTexture(4+i*3, SIDE_FRONT, TEXTURE_MIDDLE, "SKYHOKB1");
                SetLineTexture(4+i*3, SIDE_BACK, TEXTURE_MIDDLE, "SKYHOKB1");
                Polyobj_MoveTo(0+i*4, 128, 10592, 3584+384*i);
                Polyobj_MoveTo(1+i*4, 128, 10784, 3584+384*i);
                break;
            case 2:
                SetLineTexture(2+i*3, SIDE_FRONT, TEXTURE_MIDDLE, "SKYHOKB2");
                SetLineTexture(2+i*3, SIDE_BACK, TEXTURE_MIDDLE, "SKYHOKB4");
                SetLineTexture(3+i*3, SIDE_FRONT, TEXTURE_MIDDLE, "SKYHOKB4");
                SetLineTexture(3+i*3, SIDE_BACK, TEXTURE_MIDDLE, "SKYHOKB2");
                SetLineTexture(4+i*3, SIDE_FRONT, TEXTURE_MIDDLE, "SKYHOKB4");
                SetLineTexture(4+i*3, SIDE_BACK, TEXTURE_MIDDLE, "SKYHOKB2");
                Polyobj_MoveTo(0+i*4, 128, 10592, 3584+384*i);
                Polyobj_MoveTo(2+i*4, 128, 10592, 3584+384*i);
                break;
            case 3:
                SetLineTexture(2+i*3, SIDE_FRONT, TEXTURE_MIDDLE, "SKYHOKB3");
                SetLineTexture(2+i*3, SIDE_BACK, TEXTURE_MIDDLE, "SKYHOKB3");
                SetLineTexture(3+i*3, SIDE_FRONT, TEXTURE_MIDDLE, "SKYHOKB3");
                SetLineTexture(3+i*3, SIDE_BACK, TEXTURE_MIDDLE, "SKYHOKB3");
                SetLineTexture(4+i*3, SIDE_FRONT, TEXTURE_MIDDLE, "SKYHOKB3");
                SetLineTexture(4+i*3, SIDE_BACK, TEXTURE_MIDDLE, "SKYHOKB3");
                Polyobj_MoveTo(2+i*4, 128, 10592, 3584+384*i);
                Polyobj_MoveTo(3+i*4, 128, 10784, 3584+384*i);
                break;
            case 4:
                SetLineTexture(2+i*3, SIDE_FRONT, TEXTURE_MIDDLE, "SKYHOKB4");
                SetLineTexture(2+i*3, SIDE_BACK, TEXTURE_MIDDLE, "SKYHOKB2");
                SetLineTexture(3+i*3, SIDE_FRONT, TEXTURE_MIDDLE, "SKYHOKB2");
                SetLineTexture(3+i*3, SIDE_BACK, TEXTURE_MIDDLE, "SKYHOKB4");
                SetLineTexture(4+i*3, SIDE_FRONT, TEXTURE_MIDDLE, "SKYHOKB2");
                SetLineTexture(4+i*3, SIDE_BACK, TEXTURE_MIDDLE, "SKYHOKB4");
                Polyobj_MoveTo(1+i*4, 128, 10784, 3584+384*i);
                Polyobj_MoveTo(3+i*4, 128, 10784, 3584+384*i);
                break;
        }
    }

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 560, false, true);

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*8-(7*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);

    // Reset the Skyhook
    for (i=0; i<8; i++)
    {
        Polyobj_MoveTo(0+i*4, 128, 11024, 3584+384*i);
        Polyobj_MoveTo(1+i*4, 128, 11248, 3584+384*i);
        Polyobj_MoveTo(2+i*4, 128, 11472, 3584+384*i);
        Polyobj_MoveTo(3+i*4, 128, 11696, 3584+384*i);
    }
}

Script "DoomWare_Server_Minigame65" (void) // Spam the Indicated Button
{
    int time = random(15, SECOND*2);
    hudmessage(s:"Spam the Indicated Button"; HUDMSG_LOG, MSGID_CONSOLE, cr_black, 2.0, 2.0, 0);
    SetMusic("D_BUTCHG");
    minigame_wincondition1 = 1337; // To force a 320x240 viewsprite
    minigame_wincondition2 = 0;

    // Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*11+20-(5*game_speed));

    // Consantly change the objective
    do
    {
        time--;
        if (time == 0)
        {
            AmbientSound("DoomWare/ButtonChange", 127);
            switch (minigame_wincondition2)
            {
                case 0:
                    minigame_wincondition2 = random(1, 2);
                    time = random(SECOND, SECOND*2);
                    break;
                case 1:
                    minigame_wincondition2 = random(0, 2);
                    if (minigame_wincondition2 == 1)
                        minigame_wincondition2 = 0;
                    time = random(SECOND, SECOND*2);
                    break;
                case 2:
                    minigame_wincondition2 = random(0, 1);
                    time = random(SECOND, SECOND*2);
                    break;
            }
        }
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);
}

Script "DoomWare_Server_Minigame66" (void) // Don't Get Wet
{
    int i;
    hudmessage(s:"Don't Get Wet"; HUDMSG_LOG, MSGID_CONSOLE, cr_black, 2.0, 2.0, 0);
    SetMusic("D_AMPIE");
    round_winifmid = true;

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 439, true, true);

    // Spawn an umbrella
    int ceil2 = random(0, 4);
    if (ceil2 == 4)
        SpawnSpotForced("Umbrella", 476, TID_REMOVE, random(0, 256));
    else
        SpawnSpotForced("Umbrella", 456+ceil2, TID_REMOVE, random(0, 256));
    delay(SECOND-(5*game_speed));

    // Start the downpour
    if (ceil2 == 0)
    {
        Ceiling_LowerByValue(173, 24+(2*game_speed), 232);
        Ceiling_LowerByValue(174, 24+(2*game_speed), 256);
        Ceiling_LowerByValue(175, 24+(2*game_speed), 296);
    }
    else
    {
        Ceiling_LowerAndCrush(173, 24+(2*game_speed), 100, 1);
        Ceiling_LowerAndCrush(174, 24+(2*game_speed), 100, 1);
        Ceiling_LowerAndCrush(175, 24+(2*game_speed), 100, 1);
    }

    if (ceil2 == 1)
    {
        Ceiling_LowerByValue(176, 24+(2*game_speed), 232);
        Ceiling_LowerByValue(177, 24+(2*game_speed), 256);
        Ceiling_LowerByValue(178, 24+(2*game_speed), 296);
    }
    else
    {
        Ceiling_LowerAndCrush(176, 24+(2*game_speed), 100, 1);
        Ceiling_LowerAndCrush(177, 24+(2*game_speed), 100, 1);
        Ceiling_LowerAndCrush(178, 24+(2*game_speed), 100, 1);
    }

    if (ceil2 == 2)
    {
        Ceiling_LowerByValue(163, 24+(2*game_speed), 232);
        Ceiling_LowerByValue(164, 24+(2*game_speed), 256);
        Ceiling_LowerByValue(165, 24+(2*game_speed), 296);
    }
    else
    {
        Ceiling_LowerAndCrush(163, 24+(2*game_speed), 100, 1);
        Ceiling_LowerAndCrush(164, 24+(2*game_speed), 100, 1);
        Ceiling_LowerAndCrush(165, 24+(2*game_speed), 100, 1);
    }

    if (ceil2 == 3)
    {
        Ceiling_LowerByValue(167, 24+(2*game_speed), 232);
        Ceiling_LowerByValue(168, 24+(2*game_speed), 256);
        Ceiling_LowerByValue(169, 24+(2*game_speed), 296);
    }
    else
    {
        Ceiling_LowerAndCrush(167, 24+(2*game_speed), 100, 1);
        Ceiling_LowerAndCrush(168, 24+(2*game_speed), 100, 1);
        Ceiling_LowerAndCrush(169, 24+(2*game_speed), 100, 1);
    }

    if (ceil2 == 4)
    {
        Ceiling_LowerByValue(170, 24+(2*game_speed), 232);
        Ceiling_LowerByValue(171, 24+(2*game_speed), 256);
        Ceiling_LowerByValue(172, 24+(2*game_speed), 296);
    }
    else
    {
        Ceiling_LowerAndCrush(170, 24+(2*game_speed), 100, 1);
        Ceiling_LowerAndCrush(171, 24+(2*game_speed), 100, 1);
        Ceiling_LowerAndCrush(172, 24+(2*game_speed), 100, 1);
    }

    for (i=0; i<16; i++)
        ChangeCeiling(163+i, "WFWater1");

    Ceiling_LowerAndCrush(166, 24+(2*game_speed), 100, 1);
    delay(SECOND*4+15-(7*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);

    // Raise the water back up
    for (i=0; i<16; i++)
        ChangeCeiling(163+i, "F_SKY1");
    Ceiling_RaiseByValue(166, 64, 384);
    if (ceil2 == 0)
    {
        Ceiling_RaiseByValue(173, 64, 232);
        Ceiling_RaiseByValue(174, 64, 256);
        Ceiling_RaiseByValue(175, 64, 296);
    }
    else
    {
        Ceiling_RaiseByValue(173, 64, 384);
        Ceiling_RaiseByValue(174, 64, 384);
        Ceiling_RaiseByValue(175, 64, 384);
    }

    if (ceil2 == 1)
    {
        Ceiling_RaiseByValue(176, 64, 232);
        Ceiling_RaiseByValue(177, 64, 256);
        Ceiling_RaiseByValue(178, 64, 296);
    }
    else
    {
        Ceiling_RaiseByValue(176, 64, 384);
        Ceiling_RaiseByValue(177, 64, 384);
        Ceiling_RaiseByValue(178, 64, 384);
    }

    if (ceil2 == 2)
    {
        Ceiling_RaiseByValue(163, 64, 232);
        Ceiling_RaiseByValue(164, 64, 256);
        Ceiling_RaiseByValue(165, 64, 296);
    }
    else
    {
        Ceiling_RaiseByValue(163, 64, 384);
        Ceiling_RaiseByValue(164, 64, 384);
        Ceiling_RaiseByValue(165, 64, 384);
    }

    if (ceil2 == 3)
    {
        Ceiling_RaiseByValue(167, 64, 232);
        Ceiling_RaiseByValue(168, 64, 256);
        Ceiling_RaiseByValue(169, 64, 296);
    }
    else
    {
        Ceiling_RaiseByValue(167, 64, 384);
        Ceiling_RaiseByValue(168, 64, 384);
        Ceiling_RaiseByValue(169, 64, 384);
    }

    if (ceil2 == 4)
    {
        Ceiling_RaiseByValue(170, 64, 232);
        Ceiling_RaiseByValue(171, 64, 256);
        Ceiling_RaiseByValue(172, 64, 296);
    }
    else
    {
        Ceiling_RaiseByValue(170, 64, 384);
        Ceiling_RaiseByValue(171, 64, 384);
        Ceiling_RaiseByValue(172, 64, 384);
    }

}

Script "DoomWare_Server_Minigame67" (void) // Reach the End (Factory Line)
{
    HUDMessage(s:"Reach The End (Factory Line)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_Factry");
    Add_Observer(799);
    Add_Observer(800);
    Add_Observer(636);
    Add_Observer(801);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 438, true, true);

    // Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*30+5-((SECOND+5)*game_speed));

    // Spawn some Flamethrowers
    SpawnSpotForced("FlameProjectiler", 477, TID_REMOVE, 0);
    SpawnSpotForced("FlameProjectiler", 479, TID_REMOVE, 128);
    delay(SECOND*2);
    SpawnSpotForced("FlameProjectiler", 478, TID_REMOVE, 0);

    while (minigame_timer != TIMER_OFF)
        delay(1);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame68" (void) // Pickup the Key
{
    HUDMessage(s:"Pickup the Key"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_twistr");

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 496, true, true);

    // Spawn the cards
    SpawnSpotForced("YellowCard", 497, TID_REMOVE, 0);
    SpawnSpotForced("BlueCard", 498, TID_REMOVE+1, 0);
    SpawnSpotForced("RedCard", 499, TID_REMOVE+2, 0);
    Thing_SetSpecial(TID_REMOVE, 226, 243, 0, 0);
    Thing_SetSpecial(TID_REMOVE+1, 226, 243, 0, 1);
    Thing_SetSpecial(TID_REMOVE+2, 226, 243, 0, 2);

    // Randomly pick the winning key
    minigame_wincondition1 = random(0, 2);
    delay(SECOND);
    switch (minigame_wincondition1)
    {
        case 0:
            SetLineTexture(1, SIDE_FRONT, TEXTURE_BOTTOM, "TRANBLUE");
            break;
        case 1:
            SetLineTexture(1, SIDE_FRONT, TEXTURE_BOTTOM, "TRANRED");
            break;
        case 2:
            SetLineTexture(1, SIDE_FRONT, TEXTURE_BOTTOM, "TRANYEL");
            break;
    }

    // Give players time to catch the key
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*3-(10*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);

    // Reset the color
    SetLineTexture(1, SIDE_FRONT, TEXTURE_BOTTOM, "PURE");
}

Script "DoomWare_Server_Minigame69" (void) // Survive (Hell Deathmatch)
{
    HUDMessage(s:"Survive (Hell Deathmatch)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_DINO");
    round_winifmid = true;
    Add_Observer(802);
    Add_Observer(803);
    Add_Observer(804);
    Add_Observer(637);
    Add_Observer(805);
    Add_Observer(806);
    Add_Observer(807);
    minigame_fragpoints = true;

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 580, false, true);

    // Start the timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*22+30-(10*game_speed));

    // If there is only one player left, make him win to stop the timer
    do
    {
        Check_LMS();
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame70" (void) // Eat Food
{
    HUDMessage(s:"Eat Food"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_sushi");

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 600, false, true);

    // Spawn the food
    minigame_wincondition1 = random(0, 1);
    SpawnSpotForced("1UP", 704, TID_REMOVE, 0);
    SpawnSpotForced("Food_Toro", 516, TID_REMOVE, 0);
    int thingy = random(0, 1);
    if (thingy == 1)
        SpawnSpotForced("Food_SalmonRoll1", 639, TID_REMOVE, 0);
    else
        SpawnSpotForced("Food_SalmonRoll2", 639, TID_REMOVE, 0);
    SpawnSpotForced("Food_Shrimp", 657, TID_REMOVE, 0);
    SpawnSpotForced("Food_EggRoll", 658, TID_REMOVE, 0);
    thingy = random(0, 1);
    if (thingy == 1)
        SpawnSpotForced("Food_Sushi1", 659, TID_REMOVE, 0);
    else
        SpawnSpotForced("Food_Sushi1", 659, TID_REMOVE, 0);
    SpawnSpotForced("Food_Tea", 675, TID_REMOVE, 0);

    // Start the timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*7-(7*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame71" (void) // Find a Pokemon
{
    HUDMessage(s:"Find a Pokemon"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_pkmn");
    SpawnSpotForced("PokemonTrigger", 517, TID_REMOVE, 0);
    minigame_wincondition1 = 1338; // To force a 20x18 viewsprite

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 620, false, true);

    // Start the timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*4-(7*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame72" (void) // Survive (Disappearing Floor)
{
    int i;
    int dropped = 0;
    int state = 0;
    bool firstdrop = true;
    round_winifmid = true;
    HUDMessage(s:"Survive (Disappearing Floor)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_twistr");
    Add_Observer(638);

    // We'll make use of the player_answer variables to save up on making more globals
    // Start by filling in a list of all numbers from 1 to 9
    for (i=0; i<9; i++)
        player_answer1[i] = i;

    // Shuffle that array
    for (i=0; i<9; i++)
    {
        int j = random(i, 8);
        int k = player_answer1[i];
        player_answer1[i] = player_answer1[j];
        player_answer1[j] = k;
    }

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 519, true, true);

    // Start the timer
    int time = SECOND*2 + ((8-game_speed)*6)*8 + (SECOND-game_speed*2)*8;
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, time);
    time = SECOND*2;

    // Handle the floors
    do
    {
        time--;
        if (time == 0 && dropped != 8)
        {
            switch(state)
            {
                case 4:
                case 2:
                case 0:
                    changefloor(193+player_answer1[dropped], "TRANYEL");
                    SectorSound("doomware/blip", 127);
                    time = (8-game_speed);
                    if (firstdrop)
                    {
                        // Warn newcomers to avoid the color
                        int sector = player_answer1[dropped];
                        SpawnSpotForced("Avoid", 519, TID_REMOVE, 0);
                        SetActorPosition(TID_REMOVE, GetActorX(TID_REMOVE)-213.0+213.0*(sector%3), GetActorY(TID_REMOVE)+213.0-213.0*(sector/3), GetActorZ(TID_REMOVE), false);
                        Thing_Destroy(TID_REMOVE, false, 0);
                        firstdrop = false;
                    }
                    break;
                case 5:
                case 3:
                case 1:
                    changefloor(193+player_answer1[dropped], "PURE");
                    time = (8-game_speed);
                    break;
                case 6:
                    SectorSound("doomware/bloop", 127);
                    Floor_LowerInstant(193+player_answer1[dropped], 0, 16);
                    Sector_setDamage(193+player_answer1[dropped], 200000, MOD_LAVA);
                    ChangeFloor(193+player_answer1[dropped], "WFLAVA1");
                    dropped++;
                    time = (SECOND-game_speed*2);
                    break;
            }
            state = (state+1)%7;
        }
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);

    // Put the floors back to normal
    for (i=0;i<9;i++)
    {
        if (i < dropped)
        {
            Floor_RaiseInstant(193+player_answer1[i], 0, 16);
            Sector_setDamage(193+player_answer1[i], 0, MOD_LAVA);
        }
        ChangeFloor(193+player_answer1[i], "PURE");
    }
}

Script "DoomWare_Server_Minigame73" (void) // Mine an ore
{
    HUDMessage(s:"Mine an ore"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_snight");
    minigame_wincondition1 = random(0, 2);

    // Spawn the ores
    SpawnSpotForced("GoldOre", 676, TID_REMOVE, 0);
    SpawnSpotForced("TinOre", 677, TID_REMOVE, 0);
    SpawnSpotForced("MithrilOre", 678, TID_REMOVE, 0);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 640, false, true);

    // Start the timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*5+25-(10*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame74" (void) // Reach the End (Eclipse)
{
    HUDMessage(s:"Reach the End (Eclipse)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_eclpse");
    Add_Observer(808);
    Add_Observer(809);
    Add_Observer(810);
    Add_Observer(687);
    Add_Observer(811);
    Add_Observer(812);

    // Spawn Apostles
    SpawnSpotFacingForcedEx("BaronOfHell2", 680, TID_REMOVE);
    SpawnSpotFacingForcedEx("Demon3", 681, TID_REMOVE);
    SpawnSpotFacingForcedEx("TentacleWorm", 682, TID_REMOVE);
    SpawnSpotFacingForcedEx("Aguares", 683, TID_REMOVE);
    SpawnSpotFacingForcedEx("ForbiddenOne", 684, TID_REMOVE);
    SpawnSpotFacingForcedEx("SlimyWorm", 685, TID_REMOVE);
    if (game_speed > 2)
        SpawnSpotFacingForced("Cacodemon2", 686, TID_REMOVE);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 660, false, true);

    // Start the timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*25+25-(20*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame75" (void) // Reach the End (Automap)
{
    HUDMessage(s:"Reach the End (Automap)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_countd");

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 897, true, true);

    // Start the timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*5+25-(5*game_speed));

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame76" (void) // Score a Basketball
{
    HUDMessage(s:"Score a Basketball"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_bball");

    // Spawn some Spectators
    SpawnSpotForced("ScriptedMarine", 108, TID_REMOVE, 0);
    SpawnSpotForced("ScriptedMarine", 309, TID_REMOVE, 64);
    SpawnSpotForced("ScriptedMarine", 334, TID_REMOVE, 128);
    SpawnSpotForced("ScriptedMarine", 336, TID_REMOVE, 192);
    SpawnSpotForced("ScriptedMarine", 332, TID_REMOVE, 32);
    SpawnSpotForced("ScriptedMarine", 333, TID_REMOVE, 96);
    SpawnSpotForced("ScriptedMarine", 335, TID_REMOVE, 160);
    SpawnSpotForced("ScriptedMarine", 337, TID_REMOVE, 224);
    Thing_Deactivate(TID_REMOVE);
    Thing_SetTranslation(TID_REMOVE, 6);
    SpawnSpotForced("ZombieMan", 267, TID_REMOVE, 32);
    SpawnSpotForced("ChaingunGuy", 268, TID_REMOVE, 64);
    SpawnSpotForced("Archvile", 269, TID_REMOVE, 64);
    SpawnSpotForced("BaronOfHell", 286, TID_REMOVE, 96);
    SpawnSpotForced("CyberDemon", 287, TID_REMOVE, 128);
    SpawnSpotForced("ShotgunGuy", 288, TID_REMOVE, 128);
    SpawnSpotForced("Revenant", 289, TID_REMOVE, 160);
    SpawnSpotForced("HellKnight", 306, TID_REMOVE, 192);
    SpawnSpotForced("DoomImp", 307, TID_REMOVE, 192);
    SpawnSpotForced("WolfensteinSS", 308, TID_REMOVE, 0);
    Thing_Deactivate(TID_REMOVE);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 689, true, true);

    // Start the timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*6+10-(10*game_speed));

    // Check for winners
    do
    {
        Check_WonRoundItem();
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame77" (void) // Reach the End (Jumping Scroller)
{
    int i;
    int time;
    int action=0;
    HUDMessage(s:"Reach the End (Jumping Scroller)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_runner");
    round_forceobservers = true;
	round_winifmid = true;
    Add_Observer(709);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 710, false, true);
    delay(1);

    // Start the timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*24);
    time = SECOND*3;

    // Constantly move the players
    do
    {
        time--;
        for (i=0; i<MAXPLAYERS; i++)
        {
            if (!player_lostround[i])
            {
                int oldpos, newpos;
                oldpos = GetActorY(TID_PLAYER+i);
                SetActorPosition(TID_PLAYER+i, GetActorX(TID_PLAYER+i), GetActorY(TID_PLAYER+i)+10.0, GetActorZ(TID_PLAYER+i), 0);
                SetActorAngle(TID_PLAYER+i, 0.25);
                newpos = GetActorY(TID_PLAYER+i);

                // Kill the player if he didn't move
                if (newpos == oldpos)
                    thing_destroy(TID_PLAYER+i, 1);
            }
        }

        // Move the camera
        SetActorPosition(709, GetActorX(709), GetActorY(709)+10.0, GetActorZ(709), 0);

        // Manipulate the world
        if (time == 0)
        {
            switch (action)
            {
                case 0:
                    Generic_Door(207,64,0,34,0);
                    time = SECOND*10+20;
                    break;
                case 1:
                    Generic_Door(207,64,0,34,0);
                    time = SECOND*8+20;
                    break;
                case 2:
                    Generic_Door(207,64,0,34,0);
                    time = SECOND*2+5;
                    break;
            }
            action++;
        }

        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
	
	// Award achievements to who survived
	if (game_wackymod != WACKYMOD_FLIGHT)
		for (i=0; i<MAXPLAYERS; i++)
			if (!Check_Player_Lost(i))
				Give_Achievement(i, ACHIEVE_ID_JUMP);

    // Move the camera back
    SetActorPosition(709, GetActorX(709), -5536.0, GetActorZ(709), 0);
}

Script "DoomWare_Server_Minigame78" (void) // Shoot the Apple Off the Imp's Head
{
    HUDMessage(s:"Shoot the Apple Off the Imp's Head"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_apple");

    // Spawn the Imp with an apple on its head
    SpawnSpotForced("ImpTarget", 707, TID_REMOVE, 192);
    SpawnSpotForced("Apple", 706, TID_REMOVE, 192);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 730, false, true);

    // Start the timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*2-(2*game_speed));

    // Check for winners
    do
    {
        Check_WonRoundItem();
        Check_FailRoundItem();
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame79" (void) // Shoot an Imp
{
    int time = 0;
    HUDMessage(s:"Shoot an Imp"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_CHICKN");
    Line_SetBlocking(26, BLOCKF_CREATURES, 0);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 540, false, true);

    // Start the timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*8+20-(15*game_speed));

    // Keep the roads busy
    do
    {
        Check_WonRoundItem();
        if (time == 0)
        {
            if (random(0, 15) == 0)
                SpawnSpotForced("ImpKart1UP", random(416, 417), TID_REMOVE, 0);
            else
                SpawnSpotForced("ImpKart", random(416, 417), TID_REMOVE, 0);
            if (random(0, 15) == 0)
                SpawnSpotForced("ImpKart1UP", random(418, 419), TID_REMOVE, 128);
            else
                SpawnSpotForced("ImpKart", random(418, 419), TID_REMOVE, 128);
            time = random(15, SECOND*2);
        }
        time--;
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);
    Line_SetBlocking(26, 0, BLOCKF_CREATURES);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame80" (void) // Survive (Pyoro)
{
    int time = 0;
    round_winifmid = true;
    round_forceobservers = true;
    hudmessage(s:"Survive (Pyoro)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_PYORO");
    Add_Observer(813);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 820, false, true);

    // Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*8+(20*game_speed));

    // Make it rain
    do
    {
        if (time == 0)
        {
            SpawnProjectile(814, "Bean", 0, 0, -64-game_speed*4, 0, TID_REMOVE+1);
            SetActorPosition(TID_REMOVE+1, GetActorX(TID_REMOVE+1)+32.0*random(0,29), GetActorY(TID_REMOVE+1), GetActorZ(TID_REMOVE+1), false);
            Thing_ChangeTID(TID_REMOVE+1, TID_REMOVE);
            time = random(15, 35-game_speed*3);
        }
        time--;
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);

    // Fix the floors
    for (int i=0; i<15; i++)
    {
        if (GetSectorFloorZ(222+i, GetActorX(814)+32.0*i, GetActorY(814)) != 72.0)
        {
            Floor_RaiseInstant(222+i, 0, 64);
            Sector_SetDamage(222+i, 0, MOD_UNKNOWN);
        }
    }
}

Script "DoomWare_Server_Minigame81" (void) // Dodge the Car
{
    int time = 0;
    round_winifmid = true;
    round_forceobservers = true;
    hudmessage(s:"Dodge the Car"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_DODGE");
    Add_Observer(815);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 840, false, true);

    // Spawn a car
    Thing_ProjectileGravity(816, random(253, 254), 128, 64, 0);

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*4);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame82" (void) // Whack a Diglett
{
    HUDMessage(s:"Whack a Diglett"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_DIGLET");

    // Spawn some digletts to whack
    for (int i=0; i<9; i++)
        Spawn("Diglett", random(-304, 304)<<16,random(-304, 304)<<16, 10.0, TID_REMOVE);
    Spawn("DiglettShiny", random(-304, 304)<<16,random(-304, 304)<<16, 10.0, TID_REMOVE);

    // Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*4-(10*game_speed));

    // Check for winners
    do
    {
        Check_WonRoundItem();
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);
}

Script "DoomWare_Server_Minigame83" (void) // Charge ur Laz0r
{
    int i;
    HUDMessage(s:"Charge ur Laz0r"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_DBZ");
    minigame_fragpoints = true;
    minigame_wincondition1 = 1337;

    // Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*5+30-(12*game_speed));

    // Make the Auras follow the players
    do
    {
        for (i=0; i<MAXPLAYERS; i++)
        {
            if (ThingCount(0, TID_EXTRA+i) != 0 && GetActorProperty(TID_PLAYER+i, APROP_Health) > 0)
                SetActorPosition(TID_EXTRA+i, GetActorX(TID_PLAYER+i),  GetActorY(TID_PLAYER+i),  GetActorZ(TID_PLAYER+i), false);
            else if (ThingCount(0, TID_EXTRA+i) != 0 && player_answer1[i] != -1)
            {
                SetActorState(TID_EXTRA+i, "Death", true);
                player_answer1[i] = -1;
            }
        }
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Kill the auras
    for (i=0; i<MAXPLAYERS; i++)
        if (ThingCount(0, TID_EXTRA+i) != 0)
            SetActorState(TID_EXTRA+i, "Death", true);
}

Script "DoomWare_Server_Minigame84" (void) // Stay on the Road
{
    int time = 10;
    int direction = 0;
    HUDMessage(s:"Stay on the Road"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("");
    Add_Observer(817);
    round_winifmid = true;

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 860, false, true);

    // Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*10+(12*game_speed));

    // Make the buses drift
    do
    {
        // Change the direction of the buses
        if (time == 0)
        {
            time = random(20, SECOND*2-game_speed*12);
            direction = random(-4, 4);
        }

        // Make the buses drift off
        for (int i=0; i<MAXPLAYERS; i++)
            if (player_lostround[i] == false)
                SetActorVelocity(TID_PLAYER+i, (direction<<16)/(8-game_speed/2), 0, 0, true, false);

        time--;
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame85" (void) // Survive (Time Freeze)
{
    HUDMessage(s:"Survive (Time freeze)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    round_winifmid = true;
    minigame_fragpoints = true;

    // Give all the players a time freeze powerup
    for (int i=0; i<MAXPLAYERS; i++)
        GiveActorInventory(TID_PLAYER+i, "TimeFreeze", 1);

    // Since timefreeze stops music, we gotta fake some
    PlaySound(1, "DoomWare/MusicFreeze", CHAN_ITEM | CHAN_NOPAUSE, 1.0, true, ATTN_NONE);

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*10);

    // Stop the "music"
    PlaySound(1, "DoomWare/Blank", CHAN_ITEM | CHAN_NOPAUSE, 1.0, false, ATTN_NONE);
}

Script "DoomWare_Server_Minigame86" (void) // Reach the End (Chasm)
{
    HUDMessage(s:"Reach The End (Chasm)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_the_da");
    Add_Observer(878);
    Add_Observer(877);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 857, true, true);
    
    // Because this map isn't cruel enough, create Imps
    SpawnSpotFacingForcedEx("DoomImp", 879, TID_REMOVE);

    // Start a timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*25-game_speed*SECOND);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame87" (void) // Be the Highest Player
{
    int i;
    int highest = 0;
    SetMusic("d_height");
    hudmessage(s:"Be the Highest Player"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    
    // Raise the floor
    floor_raisebyvalue(19, 16, 64);
    floor_raisebyvalue(20, 8, 32);
    floor_raisebyvalue(21, 8, 32);
    floor_raisebyvalue(22, 8, 32);
    floor_raisebyvalue(691, 8, 32);
    floor_raisebyvalue(692, 8, 32);
    floor_raisebyvalue(693, 8, 32);
    SetActorState(88, "Off", true);
    SetActorState(147, "Off", true);

    // Let the players survive
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*5+(SECOND*game_speed));

    // Find out what the biggest height is
    for (i=0; i<MAXPLAYERS; i++)
        if (GetActorZ(TID_PLAYER+i) > highest)
            highest = GetActorZ(TID_PLAYER+i);
    
    // Make the highest players win
    for (i=0; i<MAXPLAYERS; i++)
        if (GetActorZ(TID_PLAYER+i) == highest)
            Player_Win(i);
    delay(1);

    // Move things back
    floor_lowerbyvalue(19, 16, 64);
    floor_lowerbyvalue(20, 8, 32);
    floor_lowerbyvalue(21, 8, 32);
    floor_lowerbyvalue(22, 8, 32);
    floor_lowerbyvalue(691, 8, 32);
    floor_lowerbyvalue(692, 8, 32);
    floor_lowerbyvalue(693, 8, 32);
    SetActorState(88, "Spawn", true);
    SetActorState(147, "Spawn", true);
    
}

Script "DoomWare_Server_Minigame88" (void) // Choose a Side
{
    bool shifted = 0;
    Add_Observer(898);
    round_forceobservers = true;
    round_winifmid = true;
    hudmessage(s:"Choose a Side"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_STEADY");

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 900, false, true);

    // Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*5);
    
    // Shift the seesaw
    delay(1);
    do
    {
        // If two seconds are left
        if (minigame_timer < SECOND*2 && shifted == 0)
        {
            int side1count = ThingCountNameSector("DoomPlayer", 0, 837)+ThingCountNameSector("DoomPlayer", 0, 688);
            int side2count = ThingCountNameSector("DoomPlayer", 0, 836)+ThingCountNameSector("DoomPlayer", 0, 690);
			side1count += ThingCountNameSector("Buu342Player", 0, 837)+ThingCountNameSector("Buu342Player", 0, 688);
			side2count += ThingCountNameSector("Buu342Player", 0, 836)+ThingCountNameSector("Buu342Player", 0, 690);
            
            if (side1count > side2count)
            {
                shifted = 1;
                Floor_LowerInstant(837, 0, 16);
                Floor_LowerInstant(688, 0, 16);
                Sector_SetDamage(837, 1337, MOD_LAVA);
                Sector_SetDamage(688, 1337, MOD_LAVA);
                Sector_SetWind(690, 200, 128, 0);
            }
            else if (side1count < side2count)
            {
                shifted = 2;
                Floor_LowerInstant(836, 0, 16);
                Floor_LowerInstant(690, 0, 16);
                Sector_SetDamage(836, 1337, MOD_LAVA);
                Sector_SetDamage(690, 1337, MOD_LAVA);
                Sector_SetWind(688, 200, 0, 0);
            }
        }
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);

    // Fix the seesaw
    if (shifted == 1)
    {
        Floor_RaiseInstant(837, 0, 16);
        Floor_RaiseInstant(688, 0, 16);
        Sector_SetDamage(837, 0, MOD_UNKNOWN);
        Sector_SetDamage(688, 0, MOD_UNKNOWN);
        Sector_SetWind(690, 0, 0, 0);
    }
    else if (shifted == 2)
    {
        Floor_RaiseInstant(836, 0, 16);
        Floor_RaiseInstant(690, 0, 16);
        Sector_SetDamage(836, 0, MOD_UNKNOWN);
        Sector_SetDamage(690, 0, MOD_UNKNOWN);
        Sector_SetWind(688, 0, 0, 0);
    }
}

Script "DoomWare_Server_Minigame89" (void) // Abandon Ship
{
    int i, j, k;
    int nextboom = 0;
    int lastboom = 0;
    hudmessage(s:"Abandon Ship"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_ABANDN");
    
    // Shake the floor and start the alarm
    Radius_Quake2(896, 2, SECOND*7-game_speed*15, 0, 1024, "DoomWare/IceMove");
    Thing_Activate(697);
    
    // Close doors at random
    for (i=0; i<8; i++)
        player_answer1[i] = 900+i;
    for (i=0; i<8; i++)
    {
        j = random(i, 7);
        k = player_answer1[i];
        player_answer1[i] = player_answer1[j];
        player_answer1[j] = k;
    }
    for (i=7; i>=PlayerCount()/2; i--)
        Ceiling_LowerInstant(player_answer1[i], 0, 16);

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 896, true, true);

    // Start a timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*7-game_speed*15);
    do
    {
        // Make random booms
        nextboom--;
        if (nextboom <= 0)
        {
            SpawnSpotForced("Explosion_Effect_Quiet", 694+lastboom, 0, 0);
            nextboom = random(5, 15);
            lastboom = (lastboom+1)%3;
        }
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
    
    // Open all the doors again and stop the alarm
    for (i=7; i>=PlayerCount()/2; i--)
        Ceiling_MoveToValue(player_answer1[i], 8, 120, 0);
    Thing_Deactivate(697);
}

Script "DoomWare_Server_Minigame90" (void) // Survive (Captain Falcon)
{
    HUDMessage(s:"Survive (Captain Falcon)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_SSB");
    Add_Observer(698);
    round_winifmid = true;
    minigame_fragpoints = true;
    
    // Teleport everyone to the fighting arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 700, true, true);
    
    // Start the timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*10+30-(10*game_speed));

    // If there is only one player left, make him win to stop the timer
    do
    {
        Check_LMS();
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);
    
    // Teleport the players back to the main arena
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame91" (void) // Reach the End (Golden Idol)
{
    HUDMessage(s:"Reach the End (Golden Idol)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_RAIDRS");
    Add_Observer(702);
    
    // Teleport everyone to the Temple of Warriors
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 920, false, true);
    
    // Spawn the "Golden Idol"
    SpawnSpotForced("YellowSkull", 701, TID_REMOVE, 0);
    Thing_SetSpecial(TID_REMOVE, 226, 252, 0, 0);
    
    // Start the timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*15-(25*game_speed));
    
    // Teleport the players back to the main arena
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame92" (void) // Pet Daisy :)
{
    HUDMessage(s:"Pet Daisy :)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_FARM");
    
    // Spawn Daisy :)
	while (ThingCount(0, TID_REMOVE) == 0) // Needs a loop because Zandronum Jank will cause her to not spawn sometimes
	{
		SpawnSpotForcedEx("Daisy", random(3, 10), TID_REMOVE, 0);
		delay(1);
	}
    
    // Start the timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*6-25-(20*game_speed));
    
    // Check for winners
    do
    {
        Check_WonRoundItem();
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);
}

Script "DoomWare_Server_Minigame93" (void) // Choose a Source Port
{
    int port1=0, port2=0, port3=0;
    HUDMessage(s:"Choose a Source Port"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_MOON");
    minigame_wincondition1 = 0;
    round_winifmid = true;
    
    // Teleport everyone to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 917, true, true);
    
    // Give people time to make a panic decision
    delay(SECOND*3 + 30);
    
    // Kill anyone not on a port
    Ceiling_CrushRaiseAndStay(916, 96, 1337);
    delay(17);
    
    // Make everyone now change port
    minigame_wincondition1 = random(1, 2);
    delay(SECOND*3 + 33);
    
    // Count the people per port
    for (int i=0; i<MAXPLAYERS; i++)
    {
        port1 += ThingCountSector(T_NONE, TID_PLAYER+i, 705);
        port2 += ThingCountSector(T_NONE, TID_PLAYER+i, 710);
        port3 += ThingCountSector(T_NONE, TID_PLAYER+i, 899);
    }
    
    // Since we don't want any port to have 0, (in the case of few players), correct that
    port1 = Max(1, port1);
    port2 = Max(1, port2);
    port3 = Max(1, port3);
    
    // Crush ceilings depending on the number of players per port
    Ceiling_CrushRaiseAndStay(916, 64, 1337);
    if (minigame_wincondition1 == 1)
    {
        if (port1 < port2 || port1 < port3)
            Ceiling_CrushRaiseAndStay(705, 96, 1337);
        if (port2 < port1 || port2 < port3)
            Ceiling_CrushRaiseAndStay(710, 96, 1337);
        if (port3 < port1 || port3 < port2)
            Ceiling_CrushRaiseAndStay(899, 96, 1337);
    }
    else
    {
        if (port1 > port2 || port1 > port3)
            Ceiling_CrushRaiseAndStay(705, 96, 1337);
        if (port2 > port1 || port2 > port3)
            Ceiling_CrushRaiseAndStay(710, 96, 1337);
        if (port3 > port1 || port3 > port2)
            Ceiling_CrushRaiseAndStay(899, 96, 1337);        
    }
    delay(17);
    
    // Teleport the players back to the main arena
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, false);
}

Script "DoomWare_Server_Minigame94" (void) // Survive (Meteors)
{
    HUDMessage(s:"Survive (Meteors)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_RAGE");
	round_winifmid = true;
	
	// Spawn a ton of meteors
	for (int i=0; i<(25+game_speed*8); i++)
	{
		int x = random(-288, 288)<<16;
		int y = random(-288, 288)<<16;
		SpawnForced("Avoid", x, y, 0.0, TID_REMOVE, 0.0);
		SpawnForced("Meteor", x, y, 220.0, 0, 0.0);
		thing_destroy(TID_REMOVE, false, 0);
		delay(2);
	}
	
	// Wait a bit for the last one to crash
	delay(SECOND*2);
}

Script "DoomWare_Server_Minigame95" (void) // Survive (F.E.A.R. Deathmatch)
{
	int i;
    HUDMessage(s:"Survive (F.E.A.R. Deathmatch)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_FEAR");
    round_winifmid = true;
    minigame_fragpoints = true;
	minigame_wincondition1 = 0; // minigame_wincondition1 is being used as a bit mask for broken windows
	Add_Observer(998);
	Add_Observer(999);
	Add_Observer(1019);

	// Spawn some fire extinguishers to blow up
    SpawnSpotForced("FearExtinguisher", 997, TID_REMOVE, 0);
	
    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 1020, false, true);

    // Start the timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*22+30-(10*game_speed));

    // If there is only one player left, make him win to stop the timer
    do
    {
        Check_LMS();
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
	
	// Fix any broken windows
	for (i=0; i<9; i++)
	{
		if ((minigame_wincondition1 >> i) & 1)
		{
			int tag = 29+i;
			minigame_wincondition1 &= ~(1 << i);
			SetLineTexture(tag, SIDE_FRONT, TEXTURE_MIDDLE, "SHAWN2");
			SetLineTexture(tag, SIDE_BACK, TEXTURE_MIDDLE, "SHAWN2");
			Line_SetBlocking(tag, BLOCKF_EVERYTHING, 0);
		}
	}
}

Script "DoomWare_Server_Minigame96" (void) // Survive (Mr. Shifty Deathmatch)
{
    HUDMessage(s:"Survive (Mr. Shifty Deathmatch)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_SHIFTY");
    round_winifmid = true;
    minigame_fragpoints = true;

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 1040, false, true);
	
    // Start the timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*10);
	
	// If there is only one player left, make him win to stop the timer
    do
    {
        Check_LMS();
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame97" (void) // Survive (Rocket Pattern)
{
	int i, thickness, gapstart, gapwidth, gapmove;
    HUDMessage(s:"Survive (Rocket Pattern)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_SKYROC");
    round_winifmid = true;
	
	// Initialize all the projectile variables
	thickness = 3+game_speed*3;
	gapwidth = random(3, 8-game_speed); 
	gapstart = random(0, 23-gapwidth); // 736/32 = 23
	if (game_speed > 1)
	{
		gapmove = random(1, 2);
		if (gapmove == 2)
			gapmove = -1;
	}

    // Move all the players to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 1036, true, true);
	
	// Spawn rockets in a pattern
    Delay(SECOND-game_speed*4);
	for (int j=0; j<thickness; j++)
	{
		int k=-1;
		
		// Spawn rockets
		for (i=0; i<736.0; i+=32.0) 
		{
			k++;
			
			// Create a gap in the rockets
			if (k >= gapstart && k <= gapstart+gapwidth)
				continue;
			
			// Spawn the rockets
			Spawn("Rocket", GetActorX(1037), GetActorY(1037)-i, GetActorZ(1037), TID_REMOVE, 128);
			SpawnSpotForced("Explosion_Effect", 1038, 0, 0);
		}
		
		// Move the gap
		if (gapmove != 0)
		{
			if ((gapstart+gapmove < 0) || (gapstart+gapwidth+gapmove > 23))
				gapmove *= -1;
			gapstart += gapmove;
		}
	
		// Give the rockets speed
		SetActorVelocity(TID_REMOVE, -20.0, 0.0, 0, false, false);
		delay(5);
	}
    Delay(SECOND*4);

    // Return players back to the main lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame98" (void) // Reach the End (Batman)
{
    HUDMessage(s:"Reach the End (Batman)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_BATMAN");
    Add_Observer(1059);
    Add_Observer(1076);
	
	// Spawn some criminals
    SpawnSpotFacingForcedEx("CriminalMelee", 1056, TID_REMOVE);
    SpawnSpotFacingForcedEx("CriminalRanged", 1058, TID_REMOVE);
    
    // Teleport everyone to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 1060, false, true);
    
    // Start the timer
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*20-(SECOND*game_speed));
    
    // Teleport the players back to the main arena
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_Minigame99" (void) // Put Yourself Out
{
	int i;
    HUDMessage(s:"Put Yourself Out"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
	round_winifmid = true;
	
	// Expose everyone to the majesty that is 'Sea Shanty 2'
    SetMusic("D_SHANTY"); 
	Delay(SECOND*2 + 15);
	
	// Set everyone on fire when the music kicks in
	minigame_wincondition1 = 1;
	AmbientSound("DoomWare/Engulf", 127);
	
	// Decide which lights to lower based on the game speed
	if (game_speed > 2)
		minigame_wincondition2 = random(1, 2);
	
	// Start the timer
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, SECOND*3-(10*game_speed));
	
	// Lower the lights
	if (minigame_wincondition2 == 0 || minigame_wincondition2 == 1)
	{
		Floor_LowerbyValue(20, 8, 18);
		Floor_LowerbyValue(21, 8, 16);
		Floor_LowerbyValue(22, 8, 16);
	}
	if (minigame_wincondition2 == 0 || minigame_wincondition2 == 2)
	{
		Floor_LowerbyValue(691, 8, 18);
		Floor_LowerbyValue(692, 8, 16);
		Floor_LowerByValue(693, 8, 16);
	}
    SetActorState(88, "Off", true);
    SetActorState(147, "Off", true);
	Delay(SECOND);
	
    // Turn the floor to water
	if (minigame_wincondition2 == 0 || minigame_wincondition2 == 1)
	{
		ChangeFloor(20, "WFWATER1");
		ChangeFloor(21, "WFWATER1");
		ChangeFloor(22, "WFWATER1");
	}
	if (minigame_wincondition2 == 0 || minigame_wincondition2 == 2)
	{
		ChangeFloor(691, "WFWATER1");
		ChangeFloor(692, "WFWATER1");
		ChangeFloor(693, "WFWATER1");
	}
	minigame_wincondition1 = 2;
	
    // If there is only one player left, make him win to stop the timer
    do
    {
		bool someoneonfire = false;
		
		// Check if someone is on fire
		for (i=0; i<MAXPLAYERS; i++)
		{
			if (!StrCmp(GetActorClass(TID_PLAYER+i), "FirePlayer"))
			{
				someoneonfire = true;
				break;
			}
		}
		
		// If no one's on fire, end the game early
		if (!someoneonfire)
			for (i=0; i<MAXPLAYERS; i++)
				Player_Win(i);
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);
	
	// Kill anyone who was still on fire
	for (i=0; i<MAXPLAYERS; i++)
		if (!StrCmp(GetActorClass(TID_PLAYER+i), "FirePlayer"))
			Thing_Damage(TID_PLAYER+i, 1337, MOD_LAVA);
	delay(1);
	
	// Put everything back to normal
    ChangeFloor(20, "N_BRGR13");
    ChangeFloor(691, "N_BRGR13");
    ChangeFloor(21, "TLITE6_5");
    ChangeFloor(692, "TLITE6_5");
    switch (game_skin)
    {
        case MAPSKIN_HALLOWEEN:
            ChangeFloor(22, "TLITE6_8");
            ChangeFloor(693, "TLITE6_8");
            break;
        case MAPSKIN_CHRISTMAS:
            ChangeFloor(22, "TLITE6_9");
            ChangeFloor(693, "TLITE6_9");
            break;
        default:
            ChangeFloor(22, "TLITE6_7");
            ChangeFloor(693, "TLITE6_7");
            break;
    }
    SetActorState(88, "Spawn", true);
    SetActorState(147, "Spawn", true);
	if (minigame_wincondition2 == 0 || minigame_wincondition2 == 1)
	{
		Floor_RaiseByValue(20, 8, 18);
		Floor_RaiseByValue(21, 8, 16);
		Floor_RaiseByValue(22, 8, 16);
	}
	if (minigame_wincondition2 == 0 || minigame_wincondition2 == 2)
	{
		Floor_RaiseByValue(691, 8, 18);
		Floor_RaiseByValue(692, 8, 16);
		Floor_RaiseByValue(693, 8, 16);
	}
}

Script "DoomWare_Server_Minigame100" (void) // Match the Demon
{
	str ans;
	int part, i, j;
	bool canearnachievement = true;
    HUDMessage(s:"Match the Demon"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_BIOLAB");
    minigame_invisiblehats = true;
    
    // Teleport everyone to the arena
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 1080, false, true);
	
	// Spawn our demon's body parts
	SpawnSpotForced("ImpBodyLegs", 1078, TID_REMOVE, 192);
	SpawnSpotForced("ImpBodyChest", 1078, TID_REMOVE+1, 192);
	SpawnSpotForced("ImpBodyHead", 1078, TID_REMOVE+2, 192);
	
	// Randomly generate our demon (keep doing so until we don't generate a vanilla imp)
	do
	{
		switch (game_speed)
		{
			case 4:
				part = random(1, 5);
				minigame_wincondition2 += part*1000; // Random
				if (part == 1)
					canearnachievement = false;
				SetActorState(TID_REMOVE+2, StrParam(s:"Parts", d:part), true);
			case 3:
			case 2:
				part = random(1, 5);
				if (part == 1 || game_speed != 4)
					canearnachievement = false;
				minigame_wincondition2 += part*100; // Random Color
				Thing_SetTranslation(TID_REMOVE, 17+part);
				Thing_SetTranslation(TID_REMOVE+1, 17+part);
				Thing_SetTranslation(TID_REMOVE+2, 17+part);
			case 1:
			case 0:
				// Correct for the two missing cases in game_speed == 0 or 1
				if (game_speed != 4)
					minigame_wincondition2 += 1000;
				if (game_speed <= 1)
					minigame_wincondition2 += 100;
					
				// Generate the other body parts
				part = random(1, 5);
				if (part == 1 || game_speed != 4)
					canearnachievement = false;
				minigame_wincondition2 += part*10; // Random Chest
				SetActorState(TID_REMOVE+1, StrParam(s:"Parts", d:part), true);
				part = random(1, 5);
				if (part == 1 || game_speed != 4)
					canearnachievement = false;
				minigame_wincondition2 += part; // Random Legs
				SetActorState(TID_REMOVE, StrParam(s:"Parts", d:part), true);
				break;
		}
		delay(1);
	}
	while (minigame_wincondition2 == 11 || minigame_wincondition2 == 111 || minigame_wincondition2 == 1111);
    
	// Wait a second, then raise the "curtains" to reveal the demon
	delay(SECOND);
	Ceiling_RaiseByValue(1079, 16, 112);
	
	// Give the players some time to memorize the demon
	delay(SECOND*3-(10*game_speed));
	
	// Cleanup the previous map
	Ceiling_LowerByValue(1079, 16, 112);
	Thing_Remove(TID_REMOVE);
	Thing_Remove(TID_REMOVE+1);
	Thing_Remove(TID_REMOVE+2);

    // Teleport players, initialize solutions, and spawn the demon parts
    for (i=0; i<MAXPLAYERS; i++)
	{
		if (!PlayerInGame(i))
			continue;
		for (j=0; j<4; j++)
			player_answer2[i][j] = 1;
		SpawnSpotForced("ImpBodyLegs", 1120+i, TID_REMOVE+i*3, 192);
		SpawnSpotForced("ImpBodyChest", 1120+i, TID_REMOVE+i*3+1, 192);
		SpawnSpotForced("ImpBodyHead", 1120+i, TID_REMOVE+i*3+2, 192);
		ACS_NamedExecute("DoomWare_Server_TeleportSingle", 0, i, 1100+i);
	}
	
    // Start the timer
	minigame_wincondition1 = 1;
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, SECOND*9-(10*game_speed));
	
	// Check for people with the correct answers
	ans = StrParam(d:minigame_wincondition2); // Convert to string to make life easier
    for (i=0; i<MAXPLAYERS; i++)
	{
		str plyans = StrParam(d:player_answer2[i][3], d:player_answer2[i][2], d:player_answer2[i][1], d:player_answer2[i][0]);
		if (!PlayerInGame(i))
			continue;
		if (!StrCmp(plyans, ans))
		{
			Player_Win(i);
			if (canearnachievement)
				Give_Achievement(i, ACHIEVE_ID_WAIFU);
		}
	}
    
    // Teleport the players back to the main arena
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
	
	// Remove all the spawned demon parts
    for (i=0; i<MAXPLAYERS; i++)
	{
		Thing_Remove(TID_REMOVE+i*3);
		Thing_Remove(TID_REMOVE+i*3+1);
		Thing_Remove(TID_REMOVE+i*3+2);
	}
}


/*===================================================================================================
                                    1v1 TieBreakers (Serverside)
===================================================================================================*/

Script "DoomWare_Server_TieBreaker1" (void) // Gun Duel
{
    HUDMessage(s:"TieBreaker1v1 - Gun Duel"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_gduel");
    Add_Observer(727);

    // Teleport the participants to the arena, make everyone else lose
    ACS_NamedExecuteAlways("DoomWare_Server_TeleportSingle", 0, game_highnames[0], 726);
    ACS_NamedExecuteAlways("DoomWare_Server_TeleportSingle", 0, game_highnames[1], 708);
    for (int i=2; i<MAXPLAYERS; i++)
        Player_Lose(game_highnames[i], true);

    // Start a random timer
    Delay(random(SECOND*3, SECOND*7));

    // Game started!
    minigame_canmove = true;
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, (SECOND*2));

    // Move the players back if they didn't die
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_TieBreaker2" (void) // Tug O War
{
    HUDMessage(s:"TieBreaker1v1 - Tug O War"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_tug");
    Add_Observer(729);

    // Teleport the participants to the arena, make everyone else lose
    ACS_NamedExecuteAlways("DoomWare_Server_TeleportSingle", 0, game_highnames[0], 747);
    ACS_NamedExecuteAlways("DoomWare_Server_TeleportSingle", 0, game_highnames[1], 746);
    for (int i=2; i<MAXPLAYERS; i++)
        Player_Lose(game_highnames[i], true);

    // Start a random timer
    delay(random(SECOND, SECOND*3));

    // Game started!
    minigame_canmove = true;
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, (SECOND*10));

    // Move the players back if they didn't die
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_TieBreaker3" (void) // Barrel Duel
{
    int i;
    HUDMessage(s:"TieBreaker1v1 - Barrel Duel"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("d_brlfun");
    Add_Observer(751);

    // Teleport the participants to the arena, make everyone else lose
    ACS_NamedExecuteAlways("DoomWare_Server_TeleportSingle", 0, game_highnames[0], 750);
    ACS_NamedExecuteAlways("DoomWare_Server_TeleportSingle", 0, game_highnames[1], 749);
    for (i=2; i<MAXPLAYERS; i++)
        Player_Lose(game_highnames[i], true);

    // Spawn the barrels and create a random timer
    SpawnSpotForced("ExplosiveBarrel", 748, TID_REMOVE, 0.0);
    Delay(random(SECOND*2, SECOND*4));

    // Game started!
    minigame_canmove = true;
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, (SECOND*5));

    // Check for winners
    do
    {		
        if (player_lostround[game_highnames[0]])
        {
            Player_Win(game_highnames[1]);
            SetActorProperty(TID_PLAYER+game_highnames[1], APROP_Invulnerable, 1);
        }
        else if (player_lostround[game_highnames[1]])
        {
            Player_Win(game_highnames[0]);
            SetActorProperty(TID_PLAYER+game_highnames[0], APROP_Invulnerable, 1);
        }

        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Move the players back if they didn't die
    SetActorProperty(TID_PLAYER+game_highnames[0], APROP_Invulnerable, 0);
    SetActorProperty(TID_PLAYER+game_highnames[1], APROP_Invulnerable, 0);
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_TieBreaker4" (void) // Score (Pong)
{
    HUDMessage(s:"TieBreaker1v1 - Score (Pong)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_PONG");
    Add_Observer(691);

    // Teleport the participants to the arena, make everyone else lose
    ACS_NamedExecuteAlways("DoomWare_Server_TeleportSingle", 0, game_highnames[0], 688);
    ACS_NamedExecuteAlways("DoomWare_Server_TeleportSingle", 0, game_highnames[1], 690);
    for (int i=2; i<MAXPLAYERS; i++)
        Player_Lose(game_highnames[i], true);

    // Create a random timer
    Delay(random(SECOND*2, SECOND*4));

    // Game started!
    minigame_canmove = true;
	SpawnProjectile(266, "PongBall", GetActorAngle(266)>>8, 48, 0, 0, TID_REMOVE);
    ACS_NamedExecuteWait("DoomWare_Server_GameWait", 0, (SECOND*15));

    // Move the players back
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
	
	// Reset the arena
	SetLineTexture(38, SIDE_FRONT, TEXTURE_MIDDLE, "PONGSCR0");
	SetLineTexture(39, SIDE_FRONT, TEXTURE_MIDDLE, "PONGSCR0");
}

Script "DoomWare_Server_TieBreaker5" (void) // Hit the Keys in Order
{
    int i;
	str winstr;
	HUDMessage(s:"TieBreaker1v1 - Hit the Keys in Order"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_AIRBAT");
    Add_Observer(692);
	
	// Setup the wall textures correctly
	for (i=0; i<4; i++)
	{
		int num = random(1, 3);
		str tex;
		switch(num)
		{
			case 1:
				tex = "KEYSHOOT";
				break;
			case 2:
				tex = "KEYUSE";
				break;
			case 3:
				tex = "KEYJUMP";
				break;
		}
		SetLineTexture(40+i, SIDE_FRONT, TEXTURE_MIDDLE, tex);
		SetLineTexture(44+i, SIDE_FRONT, TEXTURE_MIDDLE, tex);
		minigame_wincondition1 = minigame_wincondition1*10 + num;
	}

    // Teleport the participants to the arena, make everyone else lose
    ACS_NamedExecuteAlways("DoomWare_Server_TeleportSingle", 0, game_highnames[0], 693);
    ACS_NamedExecuteAlways("DoomWare_Server_TeleportSingle", 0, game_highnames[1], 699);
    for (i=2; i<MAXPLAYERS; i++)
        Player_Lose(game_highnames[i], true);
	SetActorAngle(TID_PLAYER+game_highnames[0], GetActorAngle(693));
	SetActorAngle(TID_PLAYER+game_highnames[1], GetActorAngle(699));
		
	// Play a sky battle loop sound
	PlaySound(692, "DoomWare/Fighting", CHAN_ITEM, 1.0, true);

    // Start a random timer
    Delay(random(SECOND*2, SECOND*3));

    // Game started!
    minigame_canmove = true;
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, (SECOND*10));
	
	// Check for winners
	winstr = StrParam(d:minigame_wincondition1);
    do
    {		
        for (i=0; i<2; i++)
		{
			// Check if the player has the correct key combo
			bool finished = true;
			for (int j=0; j<4; j++)
				if (player_answer2[game_highnames[i]][j] != (GetChar(winstr, j)-'0'))
					finished = false;
				
			// If the player did it, make 'em win
			if (finished)
			{
				int k = 1;
				if (i == 1)
					k = 0;
				
				// If the other player didn't win, then kill them and make this one win
				if (!Check_Player_Won(game_highnames[k]))
				{
					Thing_Damage(TID_PLAYER+game_highnames[k], 1337, MOD_HIT);
					Player_win(game_highnames[i]);
				}
			}
			
			// Set victory state on the winning player
			if (Check_Player_Won(game_highnames[i]))
			{
				SetActorState(TID_PLAYER+game_highnames[i], "Victory", true);
				PlaySound(692, "DoomWare/Blank", CHAN_ITEM, 1.0, false);
			}
		}
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Move the players back
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
	PlaySound(692, "DoomWare/Blank", CHAN_ITEM, 1.0, false);
	
	// Reset the arena
	Floor_RaiseToNearest(1096, 256);
	Floor_RaiseToNearest(1097, 256);
}


/*===================================================================================================
                                  Non 1v1 TieBreakers (Serverside)
===================================================================================================*/

Script "DoomWare_Server_TieBreakerM1" (void) // Grenade Launcher Duel
{
    HUDMessage(s:"TieBreakerM - Grenade Launcher Duel"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_GARAGE");
    round_winifmid = true;
    minigame_fragpoints = true;
    Add_Observer(752);
    Add_Observer(756);

    // Teleport our participants to the main arena and start a random timer
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 760, false, true);
    delay(random(SECOND*2, SECOND*4));

    // Start the timer
    minigame_canmove = true;
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, (SECOND*13));

    // Check for last man standing
    do
    {
        Check_LMS();
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_TieBreakerM2" (void) // Survive (Decreasing Ring)
{
    int i;
    int floors_dropped = 0;
    int ticks_passsed = 0;
    HUDMessage(s:"TieBreakerM - Survive (Decreasing Ring)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_PUSHER");
    Add_Observer(754);
    round_winifmid = true;

    // Teleport our participants to the main arena and start a random timer
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 753, true, true);
    delay(random(SECOND*2, SECOND*4));

    // Start the timer
    minigame_canmove = true;
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, (SECOND*5 + SECOND*2*9));

    // While the game is running
    do
    {
        // Drop a floor ever 2 seconds
        ticks_passsed++;
        if (ticks_passsed%(SECOND*2) == 0)
        {
            ticks_passsed = 0;
            Floor_LowerInstant(210+floors_dropped, 0, 314);
            Sector_setDamage(210+floors_dropped, 200000, MOD_WATER);
            ChangeFloor(210+floors_dropped, "WFWATER1");
            floors_dropped++;
        }

        // Check for last man standing
        Check_LMS();
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Bring the dropped floors back up
    for (i=0;i<floors_dropped;i++)
    {
        Floor_RaiseInstant(210+i, 0, 314);
        Sector_setDamage(210+i, 0, MOD_UNKNOWN);
        ChangeFloor(210+i, "NFMBGY01");
    }

    // Return survivors to the waiting room
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_TieBreakerM3" (void) // Shoot the Target (One Shot)
{
    int i;
    int time = 0;
    int checks = 0;
    HUDMessage(s:"TieBreakerM - Shoot the Target (One Shot)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_fire");
    Add_Observer(755);

    // Teleport our participants to the main arena and start a random timer
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 780, false, true);
    
    // Wait some time
    delay(random(SECOND*2, SECOND*4));

    // Raise the target
    minigame_canmove = true;
    minigame_wincondition1 = random(2, 4);
    Floor_RaiseInstant(217+minigame_wincondition1, 0, 16);

    // Lower the target once it's been shot
    while (time < SECOND*2)
    {
        for (i=0; i<MAXPLAYERS; i++)
		{
            if (player_wonround[i] == true)
            {
                Floor_LowerInstant(217+minigame_wincondition1, 0, 16);
                minigame_wincondition1 = -1;
                break;
            }
		}
        time++;
        delay(1);
    }

    // Lower the target if no one shot it
    for (i=0; i<MAXPLAYERS; i++)
        if (player_wonround[i] != true)
            checks++;
    if (checks == MAXPLAYERS)
        Floor_LowerInstant(217+minigame_wincondition1, 0, 16);

    // Bring people back to the main arena
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_TieBreakerM4" (void) // Survive (Brawler)
{
    int i;
    HUDMessage(s:"TieBreakerM - Survive (Brawler)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_BRAWL");
    Add_Observer(1098);
	round_winifmid = true;
	minigame_fragpoints = true;

    // Teleport our participants to the main arena and start a random timer
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 1140, false, true);
    
    // Wait some time
    delay(random(SECOND*2, SECOND*4));

    // Start the timer
    minigame_canmove = true;
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, (SECOND*15)); 

    // Check for last man standing
    do
    {
        Check_LMS();
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

    // Bring people back to the main arena
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
}

Script "DoomWare_Server_TieBreakerM5" (void) // Reach the End (Traps)
{
	int time = SECOND;
	int pillarstate = 0;
    HUDMessage(s:"TieBreakerM - Reach the End (Traps)"; HUDMSG_LOG, MSGID_CONSOLE, CR_BLACK, 2.0, 2.0, 0);
    SetMusic("D_RIGHT");
    Add_Observer(1137);
    Add_Observer(1138);
    Add_Observer(1139);

    // Teleport our participants to the main arena and start a random timer
	SpawnSpotForced("PopupSpikes", 1136, TID_REMOVE, 0);
    ACS_NamedExecute("DoomWare_Server_TeleportPlayers", 0, 1160, false, true);
    delay(random(SECOND*2, SECOND*4));

    // Start the timer
    minigame_canmove = true;
    ACS_NamedExecute("DoomWare_Server_GameWait", 0, (SECOND*15));

    // Manipulate the level
    do
    {
		time--;
		if (time == 0)
		{
			if (pillarstate == 0)
			{
				Floor_LowerInstant(1099, 0, 16);
				Sector_setDamage(1099, 1337, MOD_FALLING);
				ChangeFloor(1099, "F_SKY1");
			}
			else
			{
				Floor_RaiseInstant(1099, 0, 16);
				Sector_setDamage(1099, 0, MOD_FALLING);
				ChangeFloor(1099, "GRASS1");
			}
			pillarstate = (pillarstate+1)%2;
			time = SECOND;
		}
        delay(1);
    }
    while (minigame_timer != TIMER_OFF);

	// Bring players back to the lobby
    ACS_NamedExecute("DoomWare_Server_ReturnPlayers", 0, true);
	
	// Fix the pillar
	if (pillarstate == 1)
	{
		Floor_RaiseInstant(1099, 0, 16);
		Sector_setDamage(1099, 0, MOD_FALLING);
		ChangeFloor(1099, "GRASS1");
	}
}


/*===================================================================================================
                                       Extra Minigame Scripts
===================================================================================================*/

Script 9 (int Condition) // Check win with condition
{
    if (Condition == minigame_wincondition1)
        Player_Win(PlayerNumber());
}

Script 10 (void) // Give WonRoundItem for DECORATE
{
    SetActivatorToTarget(0);
    GiveInventory("WonRoundItem", 1);
}

Script 11 (void) // Give FailRoundItem for DECORATE
{
    SetActivatorToTarget(0);
    GiveInventory("FailRoundItem", 1);
}

Script 12 (void) // Win players for accomplishing tasks
{
    int current_minigame = round_current[game_roundnum-1];
    switch (current_minigame)
    {
        case 14:
            if (!Check_Player_Won(PlayerNumber()))
                LocalAmbientSound("DoomWare/Worm", 127);
            Player_Win(PlayerNumber());
            break;
        default:
            Player_Win(PlayerNumber());
            break;
    }
}

Script 13 (void) // Give achievement for catching the 1up in the Sonic Minigame
{
	if (game_wackymod != WACKYMOD_FLIGHT)
		Give_Achievement(PlayerNumber(), ACHIEVE_ID_LONGJUMP);
}

Script 14 (void) // Give achievement for destroying an ATST
{
    if (ActivatorTID() >= TID_PLAYER && ActivatorTID() <= TID_PLAYER+MAXPLAYERS)
        Give_Achievement(PlayerNumber(), ACHIEVE_ID_ATST);
}

Script 15 (void) // Flash the screen with the NES Zapper
{
    FadeTo(0, 0, 0, 1.0, 0.01);
    delay(2);
    FadeTo(0, 0, 0, 0.0, 0.01);
}

Script 16 (void) // Teleport players in Chasm 1UP spot
{
    Teleport(858, 0, 0);
}

Script 17 (int door) // Abandon Ship Doors
{
    Ceiling_LowerAndCrushDist(900 + door, 120, 1337, 0, 1);
    Player_Win(PlayerNumber());
}

Script 18 (int door) // Teleporting players when pressing doors with keys
{
	if (round_current[game_roundnum-1] != 13 || minigame_timer == TIMER_OFF)
		terminate;
		
	if (door == minigame_wincondition1)
	{
		thing_move(0, 130+PlayerNumber(), false);
		Player_Win(PlayerNumber());
	}
	else
	{
		thing_move(0, 19, false);
		Player_Lose(PlayerNumber(), false);
	}
}

Script 241 (void) // Lose invulnerability in rocket launcher minigame
{
    Thing_Destroy(TID_PLAYER+PlayerNumber(), 1);
}

Script 242 (int HitCaco) // Cacodemon/Number shot
{
    // Prevent the script from running multiple times in one tick
    if (player_answer1[PlayerNumber()] != 0)
        terminate;

    for (int j=0; j<4; j++)
        if (player_answer2[PlayerNumber()][j] == -1)
        {
            player_answer1[PlayerNumber()] = 3;
            player_answer2[PlayerNumber()][j] = HitCaco;
            break;
        }
}

Script 243 (int Key) // Key Reset
{
    if (game_status == STATUS_MINIGAME)
    {
        if (Key == 0)
            SpawnSpotForced("YellowCard", 497, TID_REMOVE, 0);
        if (Key == 1)
            SpawnSpotForced("BlueCard", 498, TID_REMOVE+1, 0);
        if (Key == 2)
            SpawnSpotForced("RedCard", 499, TID_REMOVE+2, 0);
        Thing_SetSpecial(TID_REMOVE, 226, 243, 0, 0);
        Thing_SetSpecial(TID_REMOVE+1, 226, 243, 0, 1);
        Thing_SetSpecial(TID_REMOVE+2, 226, 243, 0, 2);
    }
}

Script 244 (void) // Basketball points
{
    if (!(ClassifyActor(0) & ACTOR_PLAYER) && GetActorZ(0) > 83.0 && GetActorZ(0) < 103.0)
    {
        if (CheckActorInventory(GetActorProperty(0, APROP_TargetTID), "WonRoundItem") == 0)
        {
            GiveActorInventory(GetActorProperty(0, APROP_TargetTID), "WonRoundItem", 1);
            GiveInventory("WonRoundItem", 1);
            SpawnSpotForced("StarSparkleEmitter", 0, TID_REMOVE, 0);
        }
    }
}

Script 245 (void) // Bean floor destruction
{
    int floor = ((GetActorX(0)-GetActorX(814))/64) >> 16;

    // Play a sound if the floor hasn't been destroyed
    if (GetActorZ(0) > 40.0)
        PlaySound(813,"DoomWare/BeanDie");

    // Remove the floor
    if (GetActorZ(0) == 72.0)
    {
        Floor_LowerInstant(222+floor, 0, 64);
        Sector_SetDamage(222+floor, 666, MOD_FALLING);
    }
}

Script 246 (void) // Manipulate projectile on car dodging
{
    int chance = random(1, 2);

    if (game_speed > 0 && chance == 1)
    {
        int velx = GetActorVelX(TID_REMOVE);
        SetActorVelocity(TID_REMOVE, 0.0, 0.0, 0.0, false, false);
        delay(17);
        SetActorVelocity(TID_REMOVE, velx, 0.0, 0.0, false, false);
    }
    else if (game_speed > 2 && chance == 2)
    {
        ThrustThingZ(TID_REMOVE, 23, 0, 0);
    }

    PlaySound(815, "DoomWare/DriveBy");
}

Script 247 (void) // Slow the bus down
{
    Player_Lose(ActivatorTID()-TID_PLAYER, false);
    Thing_Stop(0);
    SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
    While(GetActorProperty(0, APROP_HEalth) > 0 && minigame_timer != TIMER_OFF)
    {
        SetActorVelocity(0, 0.0, -16.0, 0.0, false, false);
        delay(1);
    }
    SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
}

Script 250 (int CheckpointNum) // Checkpoint in kart racing
{
    // If half-way there, increase the checkpoint counter
    if (CheckpointNum == 0)
        player_answer1[PlayerNumber()] = 1;

    // If at the finish lap, and has passed the checkpoint
    if (CheckpointNum == 1 && player_answer1[PlayerNumber()] == 1 && !player_wonround[PlayerNumber()] && ClassifyActor(0) & ACTOR_ALIVE)
    {
        // If first place, give an achievement
        bool otherwinner = false;
        for (int i=0; i<MAXPLAYERS; i++)
            if (player_wonround[i] == true)
                otherwinner = true;
        if (otherwinner == false)
            Give_Achievement(PlayerNumber(), ACHIEVE_ID_KARTWIN);

        // Make player win round
        Player_Win(PlayerNumber());
    }
}

Script "DoomWare_FalconPunchFreeze" (int freeze) // Falcon Punch Weapon freeze
{
    if (freeze)
        Player_FreezeTotally(0);
    else
        Player_UnFreezeTotally(0);
}

Script 251 (void) // Golden idol room arrows
{
    if (GetActorZ(0)-GetActorFloorZ(0) == 0.0 && ThingCountSector(T_NONE, TID_PLAYER+PlayerNumber(), 699) == 0)
    {
        delay(5);
        Thing_damage(0, 1337, MOD_RAILGUN);
    }
}

Script 252 (void) // Golden idol key pickup
{
    if (game_status == STATUS_MINIGAME)
    {
        SpawnSpotForced("YellowSkull", 701, TID_REMOVE, 0);
        Thing_SetSpecial(TID_REMOVE, 226, 252, 0, 0);
        Player_Win(PlayerNumber());
    }
}

int C71UpState = 0;
Script 253 (void) // Corridor 7 1UP Box
{
    switch (C71UpState)
    {
        case 0:
            SetLineTexture(28, SIDE_FRONT, TEXTURE_MIDDLE, "C71UP2");
            delay(2);
            SetLineTexture(28, SIDE_FRONT, TEXTURE_MIDDLE, "C71UP3");
            delay(2);
            SetLineTexture(28, SIDE_FRONT, TEXTURE_MIDDLE, "C71UP4");
            delay(2);
            AmbientSound("DoomWare/C7Door", 127);
            C71UpState = 1;
            break;
        case 1:
            SetLineTexture(28, SIDE_FRONT, TEXTURE_MIDDLE, "C71UP5");
            GiveInventory("1Up", 1);
            C71UpState = 2;
            break;
    }
}

Script "DoomWare_VoidMapBooks" (void) // Void books Polyobjects
{
	if (game_status != STATUS_MINIGAME)
		terminate;
	
	Polyobj_Move(34, 64, 64, 64);
	Polyobj_Move(35, 64, -64, 64);
	delay(10);
	Polyobj_Move(38, 64, 64, 64);
	Polyobj_Move(39, 64, -64, 64);
	delay(10);
	Polyobj_Move(36, 64, 64, 64);
	Polyobj_Move(37, 64, -64, 64);
	delay(10);
	Polyobj_Move(34, 64, -64, 64);
	Polyobj_Move(35, 64, 64, 64);
	delay(10);
	Polyobj_Move(38, 64, -64, 64);
	Polyobj_Move(39, 64, 64, 64);
	delay(10);
	Polyobj_Move(36, 64, -64, 64);
	Polyobj_Move(37, 64, 64, 64);
	delay(10);
	restart;
}

Script "DoomWare_VoidMapPillars" (void) // Void books Pillars
{
	int i;
	int speed = 32;
	int height = 128;
	
	// Stop if we're not playing a minigame
	if (game_status != STATUS_MINIGAME)
		terminate;
	
	// Lower the pillars, then raise them
	for(i=0; i<4; i++)
	{
		floor_lowerbyvalue(980+i, speed, height);
		delay(15);
	}
	for(i=0; i<4; i++)
	{
		floor_raisebyvalue(980+i, speed, height);
		delay(15);
	}
	restart;
}

Script "DoomWare_VoidMapLights" (void) // Void tunnel lights
{
	if (game_status != STATUS_MINIGAME)
		terminate;
	for (int i=0; i<6; i++)
	{
		light_fade(957+i-1, 112, 5);
		light_fade(956+(i+1)%6, 224, 5);
		delay(5);
	}
	restart;
}

script "DoomWare_VoidMapSky" (void) // Void skybox
{
	int i;
	int r = 255*random(0, 1);
	int g = 255*random(0, 1);
	int b;
	
	// Stop if we're not playing a minigame
	if (game_status != STATUS_MINIGAME)
		terminate;
	
	// If no red and green, then force blue (so we don't get a black sky) 
	if (r == 0 && g == 0)
		b = 255;
	else
		b = 255*random(0, 1);
		
	// Paint the sky
	for (i=0; i<4; i++)
	{
		sector_setcolor(967+i, r, g, b, 255);
		light_fade(967+i, 255, SECOND);	
	}
	delay(SECOND);

	// Change the colors again
	r = 255*random(0,1);
	g = 255*random(0,1);
	
	// If no red and green, then force blue (so we don't get a black sky)
	if (r == 0 && g == 0)
		b = 255;
	else
		b = 255*random(0,1);
		
	// Paint the sky again
	for (i=0; i<4; i++)
	{
		sector_setcolor(967+i, r, g, b, 255);
		light_fade(967+i, 0, SECOND);	
	}
	delay(SECOND);
	restart;
}

script 254 (int num) // Void floor platform popups
{
	int plat = -1;
	
	// Decide which platoform to popup
	if (num == 1 && minigame_wincondition1 == 0)
	{
		plat = random(0, 1);
		minigame_wincondition1 |= 1<<plat;

	}
	else if (num == 2 && (minigame_wincondition1&0x04) == 0)
	{
		plat = 2;
		minigame_wincondition1 |= 0x04;
	}
	
	if (plat != -1)
	{
		// Make the platform popup
		ChangeFloor(971+plat*2, "NFMBGY01");
		ChangeFloor(972+plat*2, "FLAT20_2");
		Floor_RaiseByValue(971+plat*2, 255, 11);
		Floor_RaiseByValue(972+plat*2, 255, 8);
		
		delay(1);
		if (num == 1)
		{
			Floor_Waggle(978, 32, 64, 32, SECOND*10);
			Floor_Waggle(971, 32, 64, 32, SECOND*10);
			Floor_Waggle(972, 32, 64, 32, SECOND*10);
			Floor_Waggle(973, 32, 64, 32, SECOND*10);
			Floor_Waggle(974, 32, 64, 32, SECOND*10);
		}
		else
		{
			Floor_Waggle(975, 32, 64, 64, SECOND*10);
			Floor_Waggle(976, 32, 64, 64, SECOND*10);
			Floor_Waggle(979, 32, 64, 64, SECOND*10);
		}
	}
}

Script 240 (int tag) // Breakable glass in the FEAR minigame
{
	int t1, t2;
	int window = tag-29;
	
	// Check that this window hasn't been broken
	if ((minigame_wincondition1 >> window) & 1)
		terminate;
		
	// Break the window
	minigame_wincondition1 |= 1 << window; // Store in a bit field so we can repair the windows after the minigame ends
	t1 = 1001+(window)*2;
	t2 = 1002+(window)*2;
	SetLineTexture(tag, SIDE_FRONT, TEXTURE_MIDDLE, "-");
	SetLineTexture(tag, SIDE_BACK, TEXTURE_MIDDLE, "-");
	Line_SetBlocking(tag, 0, BLOCKF_EVERYTHING);
	Thingsound(t1, "DoomWare/WindowBreak", 127);
	Thingsound(t2, "DoomWare/WindowBreak", 127);
	
	// Spawn particles clientside
	ACS_NamedExecuteAlways("DoomWare_ClientsideGlassSpawn", 0, t1, t2, ActivatorTID());
}

Script "DoomWare_ClientsideGlassSpawn" (int t1, int t2, int active) CLIENTSIDE // Spawning glass particles clientside
{
	int ang = VectorAngle(GetActorX(t2)-GetActorX(t1), GetActorY(t2)-GetActorY(t1));
	int glassl = Max(Abs(GetActorX(t1)-GetActorX(t2)), Abs(GetActorY(t1)-GetActorY(t2)));
	int glassh = GetActorCeilingZ(t2)-GetActorFloorZ(t1);
	int plyang = GetActorAngle(active)>>8;
	for (int i=2.0; i<glassh; i+=6.0)
	{
		int z = GetActorZ(t1)+i;
		for (int j=2.0; j<glassl; j+=6.0)
			SpawnForced("FearGlassShard", GetActorX(t1)+FixedMul(Cos(ang), j), GetActorY(t1)+FixedMul(sin(ang), j), z, TID_REMOVE, plyang);
	}
}

Script "DoomWare_RopeScroll" (int ply1, int ply2) CLIENTSIDE // Rope scrolling in Tiebreaker Minigame 2
{
	int spot1 = 747;
	int spot2 = 746;
	int yprev = 0;
	while (GetCvar("__clientsync_gamestatus") == STATUS_TIEBREAK)
	{
		int ypos = GetActorY(spot1)-GetActorY(ply1);
		
		// Set the line offset to the distance of player1 from their map spot
		if (ypos != yprev)
		{
			if (ypos > yprev)
				Line_SetTextureOffset(27, 2.0, NO_CHANGE, SIDE_FRONT, TEXFLAG_MIDDLE|TEXFLAG_ADDOFFSET);
			else
				Line_SetTextureOffset(27, -2.0, NO_CHANGE, SIDE_FRONT, TEXFLAG_MIDDLE|TEXFLAG_ADDOFFSET);
		}
		yprev = ypos;
		delay(1);
		
		// Stop if either player died
		if (!(ClassifyActor(ply1) & ACTOR_ALIVE) || !(ClassifyActor(ply2) & ACTOR_ALIVE))
			terminate;
	}
}

script 239 (int plynum, int part) // Swapping body parts in Demon Matching minigame
{
	int j = part-1;
	int cur = player_answer2[plynum][j];
	
	// Calculate the next body part and store the new answer
	cur = (++cur)%6;
	if (cur == 0)
		cur = 1;
	player_answer2[plynum][j] = cur;
	
	// Correct j if we're changing the head
	if (part == 4)
		j = 2;
	
	// Change the monster
	if (part == 3)
	{
		Thing_SetTranslation(TID_REMOVE+plynum*3, 17+cur);
		Thing_SetTranslation(TID_REMOVE+plynum*3+1, 17+cur);
		Thing_SetTranslation(TID_REMOVE+plynum*3+2, 17+cur);
	}
	else
		SetActorState(TID_REMOVE+plynum*3+j, StrParam(s:"Parts", d:cur), true);
}

Script 238 (int ply) // Pong minigame scoring
{
	if (ThingCount(0, TID_REMOVE) == 0)
		terminate;
		
	Player_Lose(game_highnames[ply], false);
	if (ply == 0)
	{
		Player_Win(game_highnames[1]);
		SetLineTexture(38, SIDE_FRONT, TEXTURE_MIDDLE, "PONGSCR1");
	}
	else
	{
		Player_Win(game_highnames[0]);
		SetLineTexture(39, SIDE_FRONT, TEXTURE_MIDDLE, "PONGSCR1");
	}
	Thing_Remove(TID_REMOVE);
	AmbientSound("DoomWare/PongWin", 127);
}